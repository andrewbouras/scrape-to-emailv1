Here's context/documentation straight from the clinicaltrials.gov:

ClinicalTrials.gov API
On this page
Introduction
ClinicalTrials.gov REST API
Resources
Notice to API users:
The classic ClinicalTrials.gov API is no longer available. To learn more about the new API:
Read the Migration Guide for information about migrating to the legacy endpoint replacements.
See the updated Modernization Transition Top Questions.
Contact us at register@clinicaltrials.gov with any additional questions.
Introduction
The CTG API specification is available in YAML format and can be used with a variety of tools and other software frameworks to generate client code for interacting with the REST API in a way that is specific for the target language or environment.

The OpenAPI 3.0 Specification is an open-source format for describing and documenting HTTP APIs. An OpenAPI 3.0 specification serves as the core definition for the API of the ClinicalTrials.gov website.

Schedule of data updates
Data on ClinicalTrials.gov is refreshed daily Monday through Friday, generally by 9 a.m. ET (14:00 UTC). However, to ensure your API requests gather the most recent data, please check the “dataTimestamp” field available at https://clinicaltrials.gov/api/v2/version to ensure the refresh has completed.

ClinicalTrials.gov REST API 2.0.3
This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

Expand all
 | 
Collapse all
  sections
Studies
Related to clinical trial studies

get
/studies
Studies
get
/studies/{nctId}
Single Study
get
/studies/metadata
Data Model Fields
get
/studies/search-areas
Search Areas
get
/studies/enums
Enums
Stats
Data statistics

get
/stats/size
Study Sizes
get
/stats/field/values
Field Values
get
/stats/field/sizes
List Field Sizes
Version
Version info

get
/version
Version
Resources
Study Data Structure
Search Areas
CSV Download
RIS Download
Constructing Complex Search Queries
Please note that the COVERAGE and EXPANSION operators are not fully implemented on the modernized ClinicalTrials.gov.

Last updated on August 27, 2024


Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeData and APIAbout APIStudy Data Structure
Study Data Structure
On this page
Introduction
Protocol Section
Results Section
Annotation Section
Document Section
Derived Section
Has Results
Enumeration types
Built-in types
Introduction
The information below shows study data fields and their data type and other JSON attributes.

"Piece Name" and "Alt Piece Names" are unique, so a field can be referenced by them.
Fields marked with ⤷ start nested documents, which allow use of a SEARCH operator to target search results.
For example, this query matches city, state, and country inside one location: SEARCH[Location](AREA[LocationCity]Florence AND AREA[LocationState]South Carolina AND AREA[LocationCountry]United States)
Fields marked with ✗ are available for search but not for retrieval.
Fields producing synonyms are marked with ✓.

Select view mode

Compact

Full

Table
Protocol Section
ProtocolSection - Protocol Section
Index Field	protocolSection
Data Type	
ProtocolSection
Definition	Study Protocol
IdentificationModule
Index Field	protocolSection.identificationModule
Data Type	
IdentificationModule
Definition	Study Identification
NCTId
Index Field	protocolSection.identificationModule.nctId
Data Type	
text (stats)
NCTIdAlias
Index Field	protocolSection.identificationModule.nctIdAliases
Data Type	
text[] ✓ (stats)
NumNCTAliases
Index Field	protocolSection.identificationModule.numNctAliases ✗
Data Type	
short (stats)
OrgStudyIdInfo
Index Field	protocolSection.identificationModule.orgStudyIdInfo
Data Type	
OrgStudyIdInfo
OrgStudyId
Index Field	protocolSection.identificationModule.orgStudyIdInfo.id
Data Type	
text ✓ (stats)
Definition	Unique Protocol Identification Number
OrgStudyIdType
Index Field	protocolSection.identificationModule.orgStudyIdInfo.type
Data Type	
enum OrgStudyIdType (stats)
OrgStudyIdLink
Index Field	protocolSection.identificationModule.orgStudyIdInfo.link
Data Type	
text (stats)
SecondaryIdInfo
Index Field	protocolSection.identificationModule.secondaryIdInfos
Data Type	
SecondaryIdInfo[]
SecondaryId
Index Field	protocolSection.identificationModule.secondaryIdInfos.id
Data Type	
text ✓ (stats)
Definition	Secondary IDs
SecondaryIdType
Index Field	protocolSection.identificationModule.secondaryIdInfos.type
Data Type	
enum SecondaryIdType (stats)
Definition	Secondary ID Type
SecondaryIdDomain
Index Field	protocolSection.identificationModule.secondaryIdInfos.domain
Data Type	
text ✓ (stats)
Definition	Description
SecondaryIdLink
Index Field	protocolSection.identificationModule.secondaryIdInfos.link
Data Type	
text (stats)
NumSecondaryIds
Index Field	protocolSection.identificationModule.numSecondaryIds ✗
Data Type	
short (stats)
BriefTitle
Index Field	protocolSection.identificationModule.briefTitle
Data Type	
text ✓ (stats)
Definition	Brief Title
OfficialTitle
Index Field	protocolSection.identificationModule.officialTitle
Data Type	
text ✓ (stats)
Definition	Official Title
Acronym
Index Field	protocolSection.identificationModule.acronym
Data Type	
text ✓ (stats)
Definition	Acronym
Organization
Index Field	protocolSection.identificationModule.organization
Data Type	
Organization
OrgFullName
Index Field	protocolSection.identificationModule.organization.fullName
Data Type	
text (stats)
OrgClass
Index Field	protocolSection.identificationModule.organization.class
Data Type	
enum AgencyClass (stats)
StatusModule
Index Field	protocolSection.statusModule
Data Type	
StatusModule
Definition	Study Status
StatusVerifiedDate
Index Field	protocolSection.statusModule.statusVerifiedDate
Data Type	
PartialDate (stats)
Definition	Record Verification Date
OverallStatus
Index Field	protocolSection.statusModule.overallStatus
Data Type	
enum Status (stats)
Definition	Overall Recruitment Status
LastKnownStatus
Index Field	protocolSection.statusModule.lastKnownStatus
Data Type	
enum Status (stats)
DelayedPosting
Index Field	protocolSection.statusModule.delayedPosting
Data Type	
boolean (stats)
Definition	Post Prior to U.S. FDA Approval or Clearance
WhyStopped
Index Field	protocolSection.statusModule.whyStopped
Data Type	
markup ✓ (stats)
Definition	Why Study Stopped
ExpandedAccessInfo
Index Field	protocolSection.statusModule.expandedAccessInfo
Data Type	
ExpandedAccessInfo
HasExpandedAccess
Index Field	protocolSection.statusModule.expandedAccessInfo.hasExpandedAccess
Data Type	
boolean (stats)
Definition	Availability of Expanded Access
ExpandedAccessNCTId
Index Field	protocolSection.statusModule.expandedAccessInfo.nctId
Data Type	
text ✓ (stats)
Definition	Expanded Access Record NCT Number
ExpandedAccessStatusForNCTId
Index Field	protocolSection.statusModule.expandedAccessInfo.statusForNctId
Data Type	
enum ExpandedAccessStatus (stats)
StartDateStruct
Index Field	protocolSection.statusModule.startDateStruct
Data Type	
PartialDateStruct
StartDate
Index Field	protocolSection.statusModule.startDateStruct.date
Data Type	
PartialDate (stats)
Definition	Study Start Date
StartDateType
Index Field	protocolSection.statusModule.startDateStruct.type
Data Type	
enum DateType (stats)
PrimaryCompletionDateStruct
Index Field	protocolSection.statusModule.primaryCompletionDateStruct
Data Type	
PartialDateStruct
PrimaryCompletionDate
Index Field	protocolSection.statusModule.primaryCompletionDateStruct.date
Data Type	
PartialDate (stats)
Definition	Primary Completion Date
PrimaryCompletionDateType
Index Field	protocolSection.statusModule.primaryCompletionDateStruct.type
Data Type	
enum DateType (stats)
Definition	Primary Completion Date
CompletionDateStruct
Index Field	protocolSection.statusModule.completionDateStruct
Data Type	
PartialDateStruct
CompletionDate
Index Field	protocolSection.statusModule.completionDateStruct.date
Data Type	
PartialDate (stats)
Definition	Study Completion Date
CompletionDateType
Index Field	protocolSection.statusModule.completionDateStruct.type
Data Type	
enum DateType (stats)
Definition	Study Completion Date
StudyFirstSubmitDate
Index Field	protocolSection.statusModule.studyFirstSubmitDate
Data Type	
NormalizedDate (stats)
StudyFirstSubmitYear
Index Field	protocolSection.statusModule.studyFirstSubmitYear ✗
Data Type	
short (stats)
StudyFirstSubmitQCDate
Index Field	protocolSection.statusModule.studyFirstSubmitQcDate
Data Type	
NormalizedDate (stats)
StudyFirstPostDateStruct
Index Field	protocolSection.statusModule.studyFirstPostDateStruct
Data Type	
DateStruct
StudyFirstPostDate
Index Field	protocolSection.statusModule.studyFirstPostDateStruct.date
Data Type	
NormalizedDate (stats)
StudyFirstPostYear
Index Field	protocolSection.statusModule.studyFirstPostDateStruct.studyFirstPostYear ✗
Data Type	
short (stats)
StudyFirstPostDateType
Index Field	protocolSection.statusModule.studyFirstPostDateStruct.type
Data Type	
enum DateType (stats)
ResultsWaived
Index Field	protocolSection.statusModule.resultsWaived
Data Type	
boolean (stats)
ResultsFirstSubmitDate - Results First Submitted Date
Index Field	protocolSection.statusModule.resultsFirstSubmitDate
Data Type	
NormalizedDate (stats)
Description	
The date on which the study sponsor or investigator first submits a study record with summary results information. There is typically a delay between the results first submitted date and when summary results information becomes available on ClinicalTrials.gov (the results first posted date).
ResultsFirstSubmitYear
Index Field	protocolSection.statusModule.resultsFirstSubmitYear ✗
Data Type	
short (stats)
ResultsFirstSubmitQCDate
Index Field	protocolSection.statusModule.resultsFirstSubmitQcDate
Data Type	
NormalizedDate (stats)
ResultsFirstPostDateStruct
Index Field	protocolSection.statusModule.resultsFirstPostDateStruct
Data Type	
DateStruct
ResultsFirstPostDate
Index Field	protocolSection.statusModule.resultsFirstPostDateStruct.date
Data Type	
NormalizedDate (stats)
ResultsFirstPostYear
Index Field	protocolSection.statusModule.resultsFirstPostDateStruct.resultsFirstPostYear ✗
Data Type	
short (stats)
ResultsFirstPostDateType
Index Field	protocolSection.statusModule.resultsFirstPostDateStruct.type
Data Type	
enum DateType (stats)
DispFirstSubmitDate
Index Field	protocolSection.statusModule.dispFirstSubmitDate
Data Type	
NormalizedDate (stats)
DispFirstSubmitYear
Index Field	protocolSection.statusModule.dispFirstSubmitYear ✗
Data Type	
short (stats)
DispFirstSubmitQCDate
Index Field	protocolSection.statusModule.dispFirstSubmitQcDate
Data Type	
NormalizedDate (stats)
DispFirstPostDateStruct
Index Field	protocolSection.statusModule.dispFirstPostDateStruct
Data Type	
DateStruct
DispFirstPostDate
Index Field	protocolSection.statusModule.dispFirstPostDateStruct.date
Data Type	
NormalizedDate (stats)
DispFirstPostYear
Index Field	protocolSection.statusModule.dispFirstPostDateStruct.dispFirstPostYear ✗
Data Type	
short (stats)
DispFirstPostDateType
Index Field	protocolSection.statusModule.dispFirstPostDateStruct.type
Data Type	
enum DateType (stats)
LastUpdateSubmitDate
Index Field	protocolSection.statusModule.lastUpdateSubmitDate
Data Type	
NormalizedDate (stats)
LastUpdateSubmitYear
Index Field	protocolSection.statusModule.lastUpdateSubmitYear ✗
Data Type	
short (stats)
LastUpdatePostDateStruct
Index Field	protocolSection.statusModule.lastUpdatePostDateStruct
Data Type	
DateStruct
LastUpdatePostDate
Index Field	protocolSection.statusModule.lastUpdatePostDateStruct.date
Data Type	
NormalizedDate (stats)
LastUpdatePostYear
Index Field	protocolSection.statusModule.lastUpdatePostDateStruct.lastUpdatePostYear ✗
Data Type	
short (stats)
LastUpdatePostDateType
Index Field	protocolSection.statusModule.lastUpdatePostDateStruct.type
Data Type	
enum DateType (stats)
SponsorCollaboratorsModule
Index Field	protocolSection.sponsorCollaboratorsModule
Data Type	
SponsorCollaboratorsModule
Definition	Sponsor/Collaborators
ResponsibleParty
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty
Data Type	
ResponsibleParty
Definition	Investigator Information
ResponsiblePartyType
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty.type
Data Type	
enum ResponsiblePartyType (stats)
Definition	Responsible Party, by Official Title
ResponsiblePartyInvestigatorFullName
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty.investigatorFullName
Data Type	
text ✓ (stats)
Definition	Investigator Name
ResponsiblePartyInvestigatorTitle
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty.investigatorTitle
Data Type	
text ✓ (stats)
Definition	Investigator Official Title
ResponsiblePartyInvestigatorAffiliation
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty.investigatorAffiliation
Data Type	
text ✓ (stats)
Definition	Investigator Affiliation
ResponsiblePartyOldNameTitle
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty.oldNameTitle
Data Type	
text ✓ (stats)
Definition	Investigator Name
ResponsiblePartyOldOrganization
Index Field	protocolSection.sponsorCollaboratorsModule.responsibleParty.oldOrganization
Data Type	
text ✓ (stats)
Definition	Investigator Affiliation
LeadSponsor
Index Field	protocolSection.sponsorCollaboratorsModule.leadSponsor
Data Type	
Sponsor
LeadSponsorName
Index Field	protocolSection.sponsorCollaboratorsModule.leadSponsor.name
Data Type	
text (stats)
Definition	Name of the Sponsor
LeadSponsorClass
Index Field	protocolSection.sponsorCollaboratorsModule.leadSponsor.class
Data Type	
enum AgencyClass (stats)
Collaborator
Index Field	protocolSection.sponsorCollaboratorsModule.collaborators
Data Type	
Sponsor[]
CollaboratorName
Index Field	protocolSection.sponsorCollaboratorsModule.collaborators.name
Data Type	
text (stats)
Definition	Collaborators
CollaboratorClass
Index Field	protocolSection.sponsorCollaboratorsModule.collaborators.class
Data Type	
enum AgencyClass (stats)
NumCollaborators
Index Field	protocolSection.sponsorCollaboratorsModule.numCollaborators ✗
Data Type	
short (stats)
NumCollaboratorsPlusLead
Index Field	protocolSection.sponsorCollaboratorsModule.numCollaboratorsPlusLead ✗
Data Type	
short (stats)
OversightModule
Index Field	protocolSection.oversightModule
Data Type	
OversightModule
Definition	Oversight
OversightHasDMC
Index Field	protocolSection.oversightModule.oversightHasDmc
Data Type	
boolean (stats)
Definition	Data Monitoring Committee
IsFDARegulatedDrug
Index Field	protocolSection.oversightModule.isFdaRegulatedDrug
Data Type	
boolean (stats)
Definition	Studies a U.S. FDA-regulated Drug Product
IsFDARegulatedDevice
Index Field	protocolSection.oversightModule.isFdaRegulatedDevice
Data Type	
boolean (stats)
Definition	Studies a U.S. FDA-regulated Device Product
IsUnapprovedDevice
Index Field	protocolSection.oversightModule.isUnapprovedDevice
Data Type	
boolean (stats)
Definition	Device Product Not Approved or Cleared by U.S. FDA
IsPPSD
Index Field	protocolSection.oversightModule.isPpsd
Data Type	
boolean (stats)
Definition	Pediatric Postmarket Surveillance of a Device Product
IsUSExport
Index Field	protocolSection.oversightModule.isUsExport
Data Type	
boolean (stats)
Definition	Product Manufactured in and Exported from the U.S.
FDAAA801Violation
Index Field	protocolSection.oversightModule.fdaaa801Violation
Data Type	
boolean (stats)
DescriptionModule
Index Field	protocolSection.descriptionModule
Data Type	
DescriptionModule
Definition	Study Description
BriefSummary
Index Field	protocolSection.descriptionModule.briefSummary
Data Type	
markup ✓ (stats)
Definition	Brief Summary
DetailedDescription
Index Field	protocolSection.descriptionModule.detailedDescription
Data Type	
markup ✓ (stats)
Definition	Detailed Description
ConditionsModule
Index Field	protocolSection.conditionsModule
Data Type	
ConditionsModule
Definition	Conditions and Keywords
Condition
Index Field	protocolSection.conditionsModule.conditions
Data Type	
text[] ✓ (stats)
Definition	Primary Disease or Condition Being Studied in the Trial, or the Focus of the Study
NumConditions
Index Field	protocolSection.conditionsModule.numConditions ✗
Data Type	
short (stats)
Keyword
Index Field	protocolSection.conditionsModule.keywords
Data Type	
text[] ✓ (stats)
Definition	Keywords
NumKeywords
Index Field	protocolSection.conditionsModule.numKeywords ✗
Data Type	
short (stats)
DesignModule
Index Field	protocolSection.designModule
Data Type	
DesignModule
Definition	Study Design
StudyType
Index Field	protocolSection.designModule.studyType
Data Type	
enum StudyType (stats)
Definition	Study Type
NPtrsToThisExpAccNCTId
Index Field	protocolSection.designModule.nPtrsToThisExpAccNctId
Data Type	
number (stats)
ExpandedAccessTypes
Index Field	protocolSection.designModule.expandedAccessTypes
Data Type	
ExpandedAccessTypes
ExpAccTypeIndividual
Index Field	protocolSection.designModule.expandedAccessTypes.individual
Data Type	
boolean (stats)
ExpAccTypeIntermediate
Index Field	protocolSection.designModule.expandedAccessTypes.intermediate
Data Type	
boolean (stats)
ExpAccTypeTreatment
Index Field	protocolSection.designModule.expandedAccessTypes.treatment
Data Type	
boolean (stats)
PatientRegistry
Index Field	protocolSection.designModule.patientRegistry
Data Type	
boolean (stats)
TargetDuration
Index Field	protocolSection.designModule.targetDuration
Data Type	
NormalizedTime (stats)
Definition	Target Follow-Up Duration
Phase
Index Field	protocolSection.designModule.phases
Data Type	
enum Phase[] (stats)
Definition	Study Phase
NumPhases
Index Field	protocolSection.designModule.numPhases ✗
Data Type	
short (stats)
DesignInfo
Index Field	protocolSection.designModule.designInfo
Data Type	
DesignInfo
Definition	Interventional Study Design
DesignAllocation
Index Field	protocolSection.designModule.designInfo.allocation
Data Type	
enum DesignAllocation (stats)
Definition	Allocation
DesignInterventionModel
Index Field	protocolSection.designModule.designInfo.interventionModel
Data Type	
enum InterventionalAssignment (stats)
Definition	Interventional Study Model
DesignInterventionModelDescription
Index Field	protocolSection.designModule.designInfo.interventionModelDescription
Data Type	
markup ✓ (stats)
Definition	Model Description
DesignPrimaryPurpose
Index Field	protocolSection.designModule.designInfo.primaryPurpose
Data Type	
enum PrimaryPurpose (stats)
Definition	Primary Purpose
DesignObservationalModel
Index Field	protocolSection.designModule.designInfo.observationalModel
Data Type	
enum ObservationalModel (stats)
Definition	Observational Study Model
DesignTimePerspective
Index Field	protocolSection.designModule.designInfo.timePerspective
Data Type	
enum DesignTimePerspective (stats)
Definition	Time Perspective
DesignMaskingInfo
Index Field	protocolSection.designModule.designInfo.maskingInfo
Data Type	
MaskingBlock
DesignMasking
Index Field	protocolSection.designModule.designInfo.maskingInfo.masking
Data Type	
enum DesignMasking (stats)
Definition	Masking
DesignMaskingDescription
Index Field	protocolSection.designModule.designInfo.maskingInfo.maskingDescription
Data Type	
markup ✓ (stats)
Definition	Masking Description
DesignWhoMasked
Index Field	protocolSection.designModule.designInfo.maskingInfo.whoMasked
Data Type	
enum WhoMasked[] (stats)
Definition	Masking
NumDesignWhoMaskeds
Index Field	protocolSection.designModule.designInfo.maskingInfo.numDesignWhoMaskeds ✗
Data Type	
short (stats)
BioSpec
Index Field	protocolSection.designModule.bioSpec
Data Type	
BioSpec
BioSpecRetention
Index Field	protocolSection.designModule.bioSpec.retention
Data Type	
enum BioSpecRetention (stats)
Definition	Biospecimen Retention
BioSpecDescription
Index Field	protocolSection.designModule.bioSpec.description
Data Type	
markup ✓ (stats)
Definition	Biospecimen Description
EnrollmentInfo
Index Field	protocolSection.designModule.enrollmentInfo
Data Type	
EnrollmentInfo
EnrollmentCount
Index Field	protocolSection.designModule.enrollmentInfo.count
Data Type	
integer (stats)
Definition	Enrollment
EnrollmentType
Index Field	protocolSection.designModule.enrollmentInfo.type
Data Type	
enum EnrollmentType (stats)
Definition	Enrollment
ArmsInterventionsModule
Index Field	protocolSection.armsInterventionsModule
Data Type	
ArmsInterventionsModule
Definition	Arms, Groups, and Interventions
ArmGroup
Index Field	protocolSection.armsInterventionsModule.armGroups
Data Type	
ArmGroup[]
Definition	Arm Information
ArmGroupLabel
Index Field	protocolSection.armsInterventionsModule.armGroups.label
Data Type	
text ✓ (stats)
Definition	Arm Title
ArmGroupType
Index Field	protocolSection.armsInterventionsModule.armGroups.type
Data Type	
enum ArmGroupType (stats)
Definition	Arm Type
ArmGroupDescription
Index Field	protocolSection.armsInterventionsModule.armGroups.description
Data Type	
markup ✓ (stats)
Definition	Arm Description
ArmGroupInterventionName
Index Field	protocolSection.armsInterventionsModule.armGroups.interventionNames
Data Type	
text[] ✓ (stats)
Definition	Arm/Group Intervention Name(s)
NumArmGroupInterventionNames
Index Field	protocolSection.armsInterventionsModule.armGroups.numArmGroupInterventionNames ✗
Data Type	
short (stats)
NumArmGroups
Index Field	protocolSection.armsInterventionsModule.numArmGroups ✗
Data Type	
short (stats)
Definition	Number of Arms
Intervention
Index Field	protocolSection.armsInterventionsModule.interventions
Data Type	
Intervention[]
Definition	Interventions
InterventionType
Index Field	protocolSection.armsInterventionsModule.interventions.type
Data Type	
enum InterventionType (stats)
Definition	Intervention Type
InterventionName
Index Field	protocolSection.armsInterventionsModule.interventions.name
Data Type	
text ✓ (stats)
Definition	Intervention Name(s)
InterventionDescription
Index Field	protocolSection.armsInterventionsModule.interventions.description
Data Type	
markup ✓ (stats)
Definition	Intervention Description
InterventionArmGroupLabel
Index Field	protocolSection.armsInterventionsModule.interventions.armGroupLabels
Data Type	
text[] ✓ (stats)
NumInterventionArmGroupLabels
Index Field	protocolSection.armsInterventionsModule.interventions.numInterventionArmGroupLabels ✗
Data Type	
short (stats)
InterventionOtherName
Index Field	protocolSection.armsInterventionsModule.interventions.otherNames
Data Type	
text[] ✓ (stats)
Definition	Other Intervention Name(s)
NumInterventionOtherNames
Index Field	protocolSection.armsInterventionsModule.interventions.numInterventionOtherNames ✗
Data Type	
short (stats)
NumInterventions
Index Field	protocolSection.armsInterventionsModule.numInterventions ✗
Data Type	
short (stats)
OutcomesModule
Index Field	protocolSection.outcomesModule
Data Type	
OutcomesModule
Definition	Outcome Measures
PrimaryOutcome
Index Field	protocolSection.outcomesModule.primaryOutcomes
Data Type	
Outcome[]
Definition	Primary Outcome Measure Information
PrimaryOutcomeMeasure
Index Field	protocolSection.outcomesModule.primaryOutcomes.measure
Data Type	
text ✓ (stats)
Definition	Title
PrimaryOutcomeDescription
Index Field	protocolSection.outcomesModule.primaryOutcomes.description
Data Type	
markup ✓ (stats)
Definition	Description
PrimaryOutcomeTimeFrame
Index Field	protocolSection.outcomesModule.primaryOutcomes.timeFrame
Data Type	
text ✓ (stats)
Definition	Time Frame
NumPrimaryOutcomes
Index Field	protocolSection.outcomesModule.numPrimaryOutcomes ✗
Data Type	
short (stats)
SecondaryOutcome
Index Field	protocolSection.outcomesModule.secondaryOutcomes
Data Type	
Outcome[]
Definition	Secondary Outcome Measure Information
SecondaryOutcomeMeasure
Index Field	protocolSection.outcomesModule.secondaryOutcomes.measure
Data Type	
text ✓ (stats)
Definition	Title
SecondaryOutcomeDescription
Index Field	protocolSection.outcomesModule.secondaryOutcomes.description
Data Type	
markup ✓ (stats)
Definition	Description
SecondaryOutcomeTimeFrame
Index Field	protocolSection.outcomesModule.secondaryOutcomes.timeFrame
Data Type	
text ✓ (stats)
Definition	Time Frame
NumSecondaryOutcomes
Index Field	protocolSection.outcomesModule.numSecondaryOutcomes ✗
Data Type	
short (stats)
OtherOutcome
Index Field	protocolSection.outcomesModule.otherOutcomes
Data Type	
Outcome[]
Definition	Other Pre-specified Outcome Measures
OtherOutcomeMeasure
Index Field	protocolSection.outcomesModule.otherOutcomes.measure
Data Type	
text ✓ (stats)
Definition	Title
OtherOutcomeDescription
Index Field	protocolSection.outcomesModule.otherOutcomes.description
Data Type	
markup ✓ (stats)
Definition	Description
OtherOutcomeTimeFrame
Index Field	protocolSection.outcomesModule.otherOutcomes.timeFrame
Data Type	
text ✓ (stats)
Definition	Time Frame
NumOtherOutcomes
Index Field	protocolSection.outcomesModule.numOtherOutcomes ✗
Data Type	
short (stats)
NumOutcomes
Index Field	protocolSection.outcomesModule.numOutcomes ✗
Data Type	
short (stats)
EligibilityModule
Index Field	protocolSection.eligibilityModule
Data Type	
EligibilityModule
Definition	Eligibility
EligibilityCriteria
Index Field	protocolSection.eligibilityModule.eligibilityCriteria
Data Type	
markup ✓ (stats)
Definition	Eligibility Criteria
HealthyVolunteers
Index Field	protocolSection.eligibilityModule.healthyVolunteers
Data Type	
boolean (stats)
Definition	Accepts Healthy Volunteers
Sex
Index Field	protocolSection.eligibilityModule.sex
Data Type	
enum Sex (stats)
Definition	Sex/Gender
GenderBased
Index Field	protocolSection.eligibilityModule.genderBased
Data Type	
boolean (stats)
Definition	Gender Based
GenderDescription
Index Field	protocolSection.eligibilityModule.genderDescription
Data Type	
markup ✓ (stats)
Definition	Gender Eligibility Description
MinimumAge
Index Field	protocolSection.eligibilityModule.minimumAge
Data Type	
NormalizedTime (stats)
Definition	Minimum Age
MaximumAge
Index Field	protocolSection.eligibilityModule.maximumAge
Data Type	
NormalizedTime (stats)
Definition	Maximum Age
StdAge
Index Field	protocolSection.eligibilityModule.stdAges
Data Type	
enum StandardAge[] (stats)
NumStdAges
Index Field	protocolSection.eligibilityModule.numStdAges ✗
Data Type	
short (stats)
StudyPopulation
Index Field	protocolSection.eligibilityModule.studyPopulation
Data Type	
markup ✓ (stats)
Definition	Study Population Description (For observational studies only)
SamplingMethod
Index Field	protocolSection.eligibilityModule.samplingMethod
Data Type	
enum SamplingMethod (stats)
Definition	Sampling Method (For observational studies only)
ContactsLocationsModule
Index Field	protocolSection.contactsLocationsModule
Data Type	
ContactsLocationsModule
Definition	Contacts, Locations, and Investigator Information
CentralContact
Index Field	protocolSection.contactsLocationsModule.centralContacts
Data Type	
Contact[]
Definition	Central Contact Person or Optional Central Contact Backup
CentralContactName
Index Field	protocolSection.contactsLocationsModule.centralContacts.name
Data Type	
text (stats)
Definition	First Name & Middle Initial & Last Name or Official Title & Degree
CentralContactRole
Index Field	protocolSection.contactsLocationsModule.centralContacts.role
Data Type	
enum ContactRole (stats)
CentralContactPhone
Index Field	protocolSection.contactsLocationsModule.centralContacts.phone
Data Type	
text (stats)
Definition	Phone
CentralContactPhoneExt
Index Field	protocolSection.contactsLocationsModule.centralContacts.phoneExt
Data Type	
text (stats)
Definition	Ext
CentralContactEMail
Index Field	protocolSection.contactsLocationsModule.centralContacts.email
Data Type	
text (stats)
Definition	Email
NumCentralContacts
Index Field	protocolSection.contactsLocationsModule.numCentralContacts ✗
Data Type	
short (stats)
OverallOfficial
Index Field	protocolSection.contactsLocationsModule.overallOfficials
Data Type	
Official[]
Definition	Overall Study Officials
OverallOfficialName
Index Field	protocolSection.contactsLocationsModule.overallOfficials.name
Data Type	
text (stats)
Definition	First Name & Middle Initial & Last Name & Degree
OverallOfficialAffiliation
Index Field	protocolSection.contactsLocationsModule.overallOfficials.affiliation
Data Type	
text (stats)
Definition	Organizational Affiliation
OverallOfficialRole
Index Field	protocolSection.contactsLocationsModule.overallOfficials.role
Data Type	
enum OfficialRole (stats)
Definition	Official's Role
NumOverallOfficials
Index Field	protocolSection.contactsLocationsModule.numOverallOfficials ✗
Data Type	
short (stats)
Location
Index Field	protocolSection.contactsLocationsModule.locations ⤷
Data Type	
Location[]
Definition	Facility Information
LocationFacility
Index Field	protocolSection.contactsLocationsModule.locations.facility
Data Type	
text (stats)
Definition	Facility Name
LocationStatus
Index Field	protocolSection.contactsLocationsModule.locations.status
Data Type	
enum RecruitmentStatus (stats)
Definition	Individual Site Status
LocationCity
Index Field	protocolSection.contactsLocationsModule.locations.city
Data Type	
text (stats)
Definition	City
LocationState
Index Field	protocolSection.contactsLocationsModule.locations.state
Data Type	
text (stats)
Definition	State/Province
LocationZip
Index Field	protocolSection.contactsLocationsModule.locations.zip
Data Type	
text (stats)
Definition	ZIP/Postal Code
LocationCountry
Index Field	protocolSection.contactsLocationsModule.locations.country
Data Type	
text (stats)
Definition	Country
LocationContact
Index Field	protocolSection.contactsLocationsModule.locations.contacts
Data Type	
Contact[]
Definition	Facility Contact or Facility Contact Backup
LocationContactName
Index Field	protocolSection.contactsLocationsModule.locations.contacts.name
Data Type	
text (stats)
Definition	First Name & Middle Initial & Last Name & Degree
LocationContactRole
Index Field	protocolSection.contactsLocationsModule.locations.contacts.role
Data Type	
enum ContactRole (stats)
Definition	Investigators
LocationContactPhone
Index Field	protocolSection.contactsLocationsModule.locations.contacts.phone
Data Type	
text (stats)
Definition	Phone
LocationContactPhoneExt
Index Field	protocolSection.contactsLocationsModule.locations.contacts.phoneExt
Data Type	
text (stats)
Definition	Ext
LocationContactEMail
Index Field	protocolSection.contactsLocationsModule.locations.contacts.email
Data Type	
text (stats)
Definition	Email
NumLocationContacts
Index Field	protocolSection.contactsLocationsModule.locations.numLocationContacts ✗
Data Type	
short (stats)
LocationCountryCode - ISO Country Code
Index Field	protocolSection.contactsLocationsModule.locations.countryCode ✗
Data Type	
keyword (stats)
LocationGeoPoint
Index Field	protocolSection.contactsLocationsModule.locations.geoPoint
Data Type	
GeoPoint (stats)
NumLocations
Index Field	protocolSection.contactsLocationsModule.numLocations ✗
Data Type	
short (stats)
NumUniqueLocationCountries
Index Field	protocolSection.contactsLocationsModule.numUniqueLocationCountries ✗
Data Type	
short (stats)
ReferencesModule
Index Field	protocolSection.referencesModule
Data Type	
ReferencesModule
Definition	References
Reference
Index Field	protocolSection.referencesModule.references
Data Type	
Reference[]
Definition	Citations
ReferencePMID
Index Field	protocolSection.referencesModule.references.pmid
Data Type	
text (stats)
Definition	PubMed Identifier
ReferenceType
Index Field	protocolSection.referencesModule.references.type
Data Type	
enum ReferenceType (stats)
Definition	Results Reference
ReferenceCitation
Index Field	protocolSection.referencesModule.references.citation
Data Type	
text ✓ (stats)
Definition	Citation
Retraction
Index Field	protocolSection.referencesModule.references.retractions
Data Type	
Retraction[]
RetractionPMID
Index Field	protocolSection.referencesModule.references.retractions.pmid
Data Type	
text (stats)
RetractionSource
Index Field	protocolSection.referencesModule.references.retractions.source
Data Type	
text ✓ (stats)
NumRetractionsForRef
Index Field	protocolSection.referencesModule.references.numRetractionsForRef ✗
Data Type	
short (stats)
NumReferences
Index Field	protocolSection.referencesModule.numReferences ✗
Data Type	
short (stats)
NumRetractionsAllRefs
Index Field	protocolSection.referencesModule.numRetractionsAllRefs ✗
Data Type	
short (stats)
SeeAlsoLink
Index Field	protocolSection.referencesModule.seeAlsoLinks
Data Type	
SeeAlsoLink[]
Definition	Links
SeeAlsoLinkLabel
Index Field	protocolSection.referencesModule.seeAlsoLinks.label
Data Type	
markup ✓ (stats)
Definition	Description
SeeAlsoLinkURL
Index Field	protocolSection.referencesModule.seeAlsoLinks.url
Data Type	
text (stats)
Definition	URL
NumSeeAlsoLinks
Index Field	protocolSection.referencesModule.numSeeAlsoLinks ✗
Data Type	
short (stats)
AvailIPD
Index Field	protocolSection.referencesModule.availIpds
Data Type	
AvailIpd[]
AvailIPDId
Index Field	protocolSection.referencesModule.availIpds.id
Data Type	
text ✓ (stats)
Definition	Available IPD/Information Identifier
AvailIPDType
Index Field	protocolSection.referencesModule.availIpds.type
Data Type	
text ✓ (stats)
Definition	Available IPD/Information Type
AvailIPDURL
Index Field	protocolSection.referencesModule.availIpds.url
Data Type	
text (stats)
Definition	Available IPD/Information URL
AvailIPDComment
Index Field	protocolSection.referencesModule.availIpds.comment
Data Type	
markup ✓ (stats)
Definition	Available IPD/Information Comments
NumAvailIPDs
Index Field	protocolSection.referencesModule.numAvailIpDs ✗
Data Type	
short (stats)
IPDSharingStatementModule
Index Field	protocolSection.ipdSharingStatementModule
Data Type	
IpdSharingStatementModule
Definition	IPD Sharing Statement
IPDSharing
Index Field	protocolSection.ipdSharingStatementModule.ipdSharing
Data Type	
enum IpdSharing (stats)
Definition	Plan to Share IPD
IPDSharingDescription
Index Field	protocolSection.ipdSharingStatementModule.description
Data Type	
markup ✓ (stats)
Definition	IPD Sharing Plan Description
IPDSharingInfoType
Index Field	protocolSection.ipdSharingStatementModule.infoTypes
Data Type	
enum IpdSharingInfoType[] (stats)
Definition	IPD Sharing Supporting Information Type
NumIPDSharingInfoTypes
Index Field	protocolSection.ipdSharingStatementModule.numIpdSharingInfoTypes ✗
Data Type	
short (stats)
IPDSharingTimeFrame
Index Field	protocolSection.ipdSharingStatementModule.timeFrame
Data Type	
markup ✓ (stats)
Definition	IPD Sharing Time Frame
IPDSharingAccessCriteria
Index Field	protocolSection.ipdSharingStatementModule.accessCriteria
Data Type	
markup ✓ (stats)
Definition	IPD Sharing Access Criteria
IPDSharingURL
Index Field	protocolSection.ipdSharingStatementModule.url
Data Type	
text (stats)
Definition	IPD Sharing URL
Results Section
ResultsSection - Results Section
Index Field	resultsSection
Data Type	
ResultsSection
Definition	Study Results
ParticipantFlowModule - Participant Flow Module
Index Field	resultsSection.participantFlowModule
Data Type	
ParticipantFlowModule
Definition	Participant Flow
FlowPreAssignmentDetails
Index Field	resultsSection.participantFlowModule.preAssignmentDetails
Data Type	
markup ✓ (stats)
Definition	Pre-assignment Details
FlowRecruitmentDetails
Index Field	resultsSection.participantFlowModule.recruitmentDetails
Data Type	
markup ✓ (stats)
Definition	Recruitment Details
FlowTypeUnitsAnalyzed
Index Field	resultsSection.participantFlowModule.typeUnitsAnalyzed
Data Type	
text ✓ (stats)
Definition	Type of Units Assigned
FlowGroup
Index Field	resultsSection.participantFlowModule.groups
Data Type	
FlowGroup[]
Definition	Arm/Group Information
FlowGroupId
Index Field	resultsSection.participantFlowModule.groups.id
Data Type	
text ✓ (stats)
FlowGroupTitle
Index Field	resultsSection.participantFlowModule.groups.title
Data Type	
text ✓ (stats)
Definition	Arm/Group Title
FlowGroupDescription
Index Field	resultsSection.participantFlowModule.groups.description
Data Type	
markup ✓ (stats)
Definition	Arm/Group Description
NumFlowGroups
Index Field	resultsSection.participantFlowModule.numFlowGroups ✗
Data Type	
short (stats)
FlowPeriod
Index Field	resultsSection.participantFlowModule.periods
Data Type	
FlowPeriod[]
Definition	Period(s)
FlowPeriodTitle
Index Field	resultsSection.participantFlowModule.periods.title
Data Type	
text ✓ (stats)
Definition	Period Title
FlowMilestone
Index Field	resultsSection.participantFlowModule.periods.milestones
Data Type	
FlowMilestone[]
Definition	Additional Milestone(s)
FlowMilestoneType
Index Field	resultsSection.participantFlowModule.periods.milestones.type
Data Type	
text ✓ (stats)
Definition	Started
FlowMilestoneComment
Index Field	resultsSection.participantFlowModule.periods.milestones.comment
Data Type	
markup ✓ (stats)
Definition	Comments
FlowAchievement
Index Field	resultsSection.participantFlowModule.periods.milestones.achievements
Data Type	
FlowStats[]
FlowAchievementGroupId
Index Field	resultsSection.participantFlowModule.periods.milestones.achievements.groupId
Data Type	
text ✓ (stats)
FlowAchievementComment
Index Field	resultsSection.participantFlowModule.periods.milestones.achievements.comment
Data Type	
markup ✓ (stats)
Definition	Comments
FlowAchievementNumSubjects
Index Field	resultsSection.participantFlowModule.periods.milestones.achievements.numSubjects
Data Type	
text ✓ (stats)
Definition	Milestone Data
FlowAchievementNumUnits
Index Field	resultsSection.participantFlowModule.periods.milestones.achievements.numUnits
Data Type	
text ✓ (stats)
Definition	Milestone Data
NumFlowAchievements
Index Field	resultsSection.participantFlowModule.periods.milestones.numFlowAchievements ✗
Data Type	
short (stats)
NumFlowMilestones
Index Field	resultsSection.participantFlowModule.periods.numFlowMilestones ✗
Data Type	
short (stats)
FlowDropWithdraw
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws
Data Type	
DropWithdraw[]
Definition	Reason Not Completed
FlowDropWithdrawType
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.type
Data Type	
text ✓ (stats)
Definition	Reason Not Completed Type
FlowDropWithdrawComment
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.comment
Data Type	
markup ✓ (stats)
FlowReason
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.reasons
Data Type	
FlowStats[]
FlowReasonGroupId
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.reasons.groupId
Data Type	
text ✓ (stats)
FlowReasonComment
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.reasons.comment
Data Type	
markup ✓ (stats)
Definition	Reason Not Completed Data
FlowReasonNumSubjects
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.reasons.numSubjects
Data Type	
text ✓ (stats)
Definition	Reason Not Completed Data
NumFlowReasons
Index Field	resultsSection.participantFlowModule.periods.dropWithdraws.numFlowReasons ✗
Data Type	
short (stats)
NumFlowDropWithdraws
Index Field	resultsSection.participantFlowModule.periods.numFlowDropWithdraws ✗
Data Type	
short (stats)
NumFlowPeriods
Index Field	resultsSection.participantFlowModule.numFlowPeriods ✗
Data Type	
short (stats)
BaselineCharacteristicsModule
Index Field	resultsSection.baselineCharacteristicsModule
Data Type	
BaselineCharacteristicsModule
Definition	Baseline Characteristics
BaselinePopulationDescription
Index Field	resultsSection.baselineCharacteristicsModule.populationDescription
Data Type	
markup ✓ (stats)
Definition	Baseline Analysis Population Description
BaselineTypeUnitsAnalyzed
Index Field	resultsSection.baselineCharacteristicsModule.typeUnitsAnalyzed
Data Type	
text ✓ (stats)
Definition	Type of Units Analyzed
BaselineGroup
Index Field	resultsSection.baselineCharacteristicsModule.groups
Data Type	
MeasureGroup[]
Definition	Arm/Group Information
BaselineGroupId
Index Field	resultsSection.baselineCharacteristicsModule.groups.id
Data Type	
text ✓ (stats)
BaselineGroupTitle
Index Field	resultsSection.baselineCharacteristicsModule.groups.title
Data Type	
text ✓ (stats)
Definition	Arm/Group Title
BaselineGroupDescription
Index Field	resultsSection.baselineCharacteristicsModule.groups.description
Data Type	
markup ✓ (stats)
Definition	Arm/Group Description
NumBaselineGroups
Index Field	resultsSection.baselineCharacteristicsModule.numBaselineGroups ✗
Data Type	
short (stats)
BaselineDenom
Index Field	resultsSection.baselineCharacteristicsModule.denoms
Data Type	
Denom[]
BaselineDenomUnits
Index Field	resultsSection.baselineCharacteristicsModule.denoms.units
Data Type	
text ✓ (stats)
Definition	Overall Number of Units Analyzed
BaselineDenomCount
Index Field	resultsSection.baselineCharacteristicsModule.denoms.counts
Data Type	
DenomCount[]
BaselineDenomCountGroupId
Index Field	resultsSection.baselineCharacteristicsModule.denoms.counts.groupId
Data Type	
text ✓ (stats)
BaselineDenomCountValue
Index Field	resultsSection.baselineCharacteristicsModule.denoms.counts.value
Data Type	
text ✓ (stats)
Definition	Overall Number of Baseline Participants
NumBaselineDenoms
Index Field	resultsSection.baselineCharacteristicsModule.numBaselineDenoms ✗
Data Type	
short (stats)
BaselineMeasure
Index Field	resultsSection.baselineCharacteristicsModule.measures
Data Type	
BaselineMeasure[]
Definition	Baseline Measure Information
BaselineMeasureTitle
Index Field	resultsSection.baselineCharacteristicsModule.measures.title
Data Type	
text ✓ (stats)
Definition	Baseline Measure Title
BaselineMeasureDescription
Index Field	resultsSection.baselineCharacteristicsModule.measures.description
Data Type	
markup ✓ (stats)
Definition	Baseline Measure Description
BaselineMeasurePopulationDescription
Index Field	resultsSection.baselineCharacteristicsModule.measures.populationDescription
Data Type	
markup ✓ (stats)
Definition	Measure Analysis Population Description
BaselineMeasureParamType
Index Field	resultsSection.baselineCharacteristicsModule.measures.paramType
Data Type	
enum MeasureParam (stats)
Definition	Measure Type
BaselineMeasureDispersionType
Index Field	resultsSection.baselineCharacteristicsModule.measures.dispersionType
Data Type	
enum MeasureDispersionType (stats)
Definition	Measure of Dispersion
BaselineMeasureUnitOfMeasure
Index Field	resultsSection.baselineCharacteristicsModule.measures.unitOfMeasure
Data Type	
text ✓ (stats)
Definition	Unit of Measure
BaselineMeasureCalculatePct
Index Field	resultsSection.baselineCharacteristicsModule.measures.calculatePct
Data Type	
boolean (stats)
BaselineMeasureDenomUnitsSelected
Index Field	resultsSection.baselineCharacteristicsModule.measures.denomUnitsSelected
Data Type	
text ✓ (stats)
Definition	Analysis Population Type
BaselineMeasureDenom
Index Field	resultsSection.baselineCharacteristicsModule.measures.denoms
Data Type	
Denom[]
BaselineMeasureDenomUnits
Index Field	resultsSection.baselineCharacteristicsModule.measures.denoms.units
Data Type	
text ✓ (stats)
Definition	Number of Units Analyzed
BaselineMeasureDenomCount
Index Field	resultsSection.baselineCharacteristicsModule.measures.denoms.counts
Data Type	
DenomCount[]
BaselineMeasureDenomCountGroupId
Index Field	resultsSection.baselineCharacteristicsModule.measures.denoms.counts.groupId
Data Type	
text ✓ (stats)
BaselineMeasureDenomCountValue
Index Field	resultsSection.baselineCharacteristicsModule.measures.denoms.counts.value
Data Type	
text ✓ (stats)
Definition	Number of Baseline Participants
NumBaselineMeasureDenoms
Index Field	resultsSection.baselineCharacteristicsModule.measures.numBaselineMeasureDenoms ✗
Data Type	
short (stats)
BaselineClass
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes
Data Type	
MeasureClass[]
BaselineClassTitle
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.title
Data Type	
text ✓ (stats)
Definition	Category or Row Title
BaselineClassDenom
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.denoms
Data Type	
Denom[]
BaselineClassDenomUnits
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.denoms.units
Data Type	
text ✓ (stats)
BaselineClassDenomCount
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.denoms.counts
Data Type	
DenomCount[]
BaselineClassDenomCountGroupId
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.denoms.counts.groupId
Data Type	
text ✓ (stats)
BaselineClassDenomCountValue
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.denoms.counts.value
Data Type	
text ✓ (stats)
BaselineCategory
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories
Data Type	
MeasureCategory[]
BaselineCategoryTitle
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.title
Data Type	
text ✓ (stats)
Definition	Category or Row Title
BaselineMeasurement
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements
Data Type	
Measurement[]
BaselineMeasurementGroupId
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements.groupId
Data Type	
text ✓ (stats)
BaselineMeasurementValue
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements.value
Data Type	
text ✓ (stats)
Definition	Baseline Measure Data
BaselineMeasurementSpread
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements.spread
Data Type	
text ✓ (stats)
BaselineMeasurementLowerLimit
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements.lowerLimit
Data Type	
text ✓ (stats)
BaselineMeasurementUpperLimit
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements.upperLimit
Data Type	
text ✓ (stats)
BaselineMeasurementComment
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.measurements.comment
Data Type	
markup ✓ (stats)
NumBaselineMeasurements
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.categories.numBaselineMeasurements ✗
Data Type	
short (stats)
NumBaselineCategories
Index Field	resultsSection.baselineCharacteristicsModule.measures.classes.numBaselineCategories ✗
Data Type	
short (stats)
NumBaselineClasses
Index Field	resultsSection.baselineCharacteristicsModule.measures.numBaselineClasses ✗
Data Type	
short (stats)
NumBaselineMeasures
Index Field	resultsSection.baselineCharacteristicsModule.numBaselineMeasures ✗
Data Type	
short (stats)
OutcomeMeasuresModule
Index Field	resultsSection.outcomeMeasuresModule
Data Type	
OutcomeMeasuresModule
Definition	Outcome Measures
OutcomeMeasure
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures
Data Type	
OutcomeMeasure[]
Definition	Outcome Measure Information
OutcomeMeasureType
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.type
Data Type	
enum OutcomeMeasureType (stats)
Definition	Outcome Measure Type
OutcomeMeasureTitle
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.title
Data Type	
text ✓ (stats)
Definition	Outcome Measure Title
OutcomeMeasureDescription
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.description
Data Type	
markup ✓ (stats)
Definition	Outcome Measure Description
OutcomeMeasurePopulationDescription
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.populationDescription
Data Type	
markup ✓ (stats)
Definition	Analysis Population Description
OutcomeMeasureReportingStatus
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.reportingStatus
Data Type	
enum ReportingStatus (stats)
OutcomeMeasureAnticipatedPostingDate
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.anticipatedPostingDate
Data Type	
PartialDate (stats)
Definition	Anticipated Reporting Date
OutcomeMeasureParamType
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.paramType
Data Type	
enum MeasureParam (stats)
Definition	Measure Type
OutcomeMeasureDispersionType
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.dispersionType
Data Type	
text ✓ (stats)
Definition	Measure of Dispersion/Precision
OutcomeMeasureUnitOfMeasure
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.unitOfMeasure
Data Type	
text ✓ (stats)
Definition	Unit of Measure
OutcomeMeasureCalculatePct
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.calculatePct
Data Type	
boolean (stats)
OutcomeMeasureTimeFrame
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.timeFrame
Data Type	
text ✓ (stats)
Definition	Outcome Measure Time Frame
OutcomeMeasureTypeUnitsAnalyzed
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.typeUnitsAnalyzed
Data Type	
text ✓ (stats)
Definition	Type of Units Analyzed
OutcomeMeasureDenomUnitsSelected
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.denomUnitsSelected
Data Type	
text ✓ (stats)
OutcomeGroup
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.groups
Data Type	
MeasureGroup[]
Definition	Arm/Group Information
OutcomeGroupId
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.groups.id
Data Type	
text ✓ (stats)
OutcomeGroupTitle
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.groups.title
Data Type	
text ✓ (stats)
Definition	Arm/Group Title
OutcomeGroupDescription
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.groups.description
Data Type	
markup ✓ (stats)
Definition	Arm/Group Description
NumOutcomeGroups
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.numOutcomeGroups ✗
Data Type	
short (stats)
OutcomeDenom
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.denoms
Data Type	
Denom[]
OutcomeDenomUnits
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.denoms.units
Data Type	
text ✓ (stats)
Definition	Overall Number of Units Analyzed
OutcomeDenomCount
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.denoms.counts
Data Type	
DenomCount[]
OutcomeDenomCountGroupId
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.denoms.counts.groupId
Data Type	
text ✓ (stats)
OutcomeDenomCountValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.denoms.counts.value
Data Type	
text ✓ (stats)
Definition	Overall Number of Participants Analyzed
NumOutcomeDenoms
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.numOutcomeDenoms ✗
Data Type	
short (stats)
OutcomeClass
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes
Data Type	
MeasureClass[]
OutcomeClassTitle
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.title
Data Type	
text ✓ (stats)
Definition	Category or Row Title
OutcomeClassDenom
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.denoms
Data Type	
Denom[]
OutcomeClassDenomUnits
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.denoms.units
Data Type	
text ✓ (stats)
Definition	Number of Units Analyzed
OutcomeClassDenomCount
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.denoms.counts
Data Type	
DenomCount[]
OutcomeClassDenomCountGroupId
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.denoms.counts.groupId
Data Type	
text ✓ (stats)
OutcomeClassDenomCountValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.denoms.counts.value
Data Type	
text ✓ (stats)
Definition	Number of Participants Analyzed
OutcomeCategory
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories
Data Type	
MeasureCategory[]
OutcomeCategoryTitle
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.title
Data Type	
text ✓ (stats)
Definition	Category or Row Title
OutcomeMeasurement
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements
Data Type	
Measurement[]
Definition	Outcome Measure Data Table
OutcomeMeasurementGroupId
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements.groupId
Data Type	
text ✓ (stats)
OutcomeMeasurementValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements.value
Data Type	
text ✓ (stats)
Definition	Outcome Measure Data
OutcomeMeasurementSpread
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements.spread
Data Type	
text ✓ (stats)
OutcomeMeasurementLowerLimit
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements.lowerLimit
Data Type	
text ✓ (stats)
OutcomeMeasurementUpperLimit
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements.upperLimit
Data Type	
text ✓ (stats)
OutcomeMeasurementComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.measurements.comment
Data Type	
markup ✓ (stats)
NumOutcomeMeasurements
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.categories.numOutcomeMeasurements ✗
Data Type	
short (stats)
NumOutcomeCategories
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.classes.numOutcomeCategories ✗
Data Type	
short (stats)
NumOutcomeClasses
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.numOutcomeClasses ✗
Data Type	
short (stats)
OutcomeAnalysis
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses
Data Type	
MeasureAnalysis[]
OutcomeAnalysisParamType
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.paramType
Data Type	
text ✓ (stats)
Definition	Estimation Parameter
OutcomeAnalysisParamValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.paramValue
Data Type	
text ✓ (stats)
Definition	Estimated Value
OutcomeAnalysisDispersionType
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.dispersionType
Data Type	
enum AnalysisDispersionType (stats)
Definition	Parameter Dispersion Type
OutcomeAnalysisDispersionValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.dispersionValue
Data Type	
text ✓ (stats)
Definition	Dispersion Value
OutcomeAnalysisStatisticalMethod
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.statisticalMethod
Data Type	
text ✓ (stats)
Definition	Method
OutcomeAnalysisStatisticalComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.statisticalComment
Data Type	
markup ✓ (stats)
Definition	Comments
OutcomeAnalysisPValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.pValue
Data Type	
text ✓ (stats)
Definition	P-Value
OutcomeAnalysisPValueComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.pValueComment
Data Type	
markup ✓ (stats)
Definition	Comments
OutcomeAnalysisCINumSides
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.ciNumSides
Data Type	
enum ConfidenceIntervalNumSides (stats)
Definition	Number of Sides
OutcomeAnalysisCIPctValue
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.ciPctValue
Data Type	
text ✓ (stats)
Definition	Level
OutcomeAnalysisCILowerLimit
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.ciLowerLimit
Data Type	
text ✓ (stats)
Definition	Lower Limit
OutcomeAnalysisCIUpperLimit
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.ciUpperLimit
Data Type	
text ✓ (stats)
Definition	Upper Limit
OutcomeAnalysisCILowerLimitComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.ciLowerLimitComment
Data Type	
markup ✓ (stats)
OutcomeAnalysisCIUpperLimitComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.ciUpperLimitComment
Data Type	
markup ✓ (stats)
OutcomeAnalysisEstimateComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.estimateComment
Data Type	
markup ✓ (stats)
Definition	Estimation Comments
OutcomeAnalysisTestedNonInferiority
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.testedNonInferiority
Data Type	
boolean (stats)
Definition	Type of Statistical Test
OutcomeAnalysisNonInferiorityType
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.nonInferiorityType
Data Type	
enum NonInferiorityType (stats)
Definition	Type of Statistical Test
OutcomeAnalysisNonInferiorityComment
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.nonInferiorityComment
Data Type	
markup ✓ (stats)
Definition	Comments
OutcomeAnalysisOtherAnalysisDescription
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.otherAnalysisDescription
Data Type	
markup ✓ (stats)
Definition	Other Statistical Analysis
OutcomeAnalysisGroupDescription
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.groupDescription
Data Type	
markup ✓ (stats)
Definition	Comments
OutcomeAnalysisGroupId
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.groupIds
Data Type	
text[] ✓ (stats)
Definition	Comparison Group Selection
NumOutcomeAnalysisGroupIds
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.analyses.numOutcomeAnalysisGroupIds ✗
Data Type	
short (stats)
NumOutcomeAnalyses
Index Field	resultsSection.outcomeMeasuresModule.outcomeMeasures.numOutcomeAnalyses ✗
Data Type	
short (stats)
NumOutcomeMeasures
Index Field	resultsSection.outcomeMeasuresModule.numOutcomeMeasures ✗
Data Type	
short (stats)
AdverseEventsModule
Index Field	resultsSection.adverseEventsModule
Data Type	
AdverseEventsModule
Definition	Adverse Event Information
EventsFrequencyThreshold
Index Field	resultsSection.adverseEventsModule.frequencyThreshold
Data Type	
text ✓ (stats)
Definition	Frequency Threshold for Reporting Other (Not Including Serious) Adverse Events
EventsTimeFrame
Index Field	resultsSection.adverseEventsModule.timeFrame
Data Type	
text ✓ (stats)
Definition	Time Frame
EventsDescription
Index Field	resultsSection.adverseEventsModule.description
Data Type	
markup ✓ (stats)
Definition	Adverse Event Reporting Description
EventsAllCauseMortalityComment
Index Field	resultsSection.adverseEventsModule.allCauseMortalityComment
Data Type	
markup ✓ (stats)
EventGroup
Index Field	resultsSection.adverseEventsModule.eventGroups
Data Type	
EventGroup[]
Definition	Arm/Group Information
EventGroupId
Index Field	resultsSection.adverseEventsModule.eventGroups.id
Data Type	
text ✓ (stats)
EventGroupTitle
Index Field	resultsSection.adverseEventsModule.eventGroups.title
Data Type	
text ✓ (stats)
Definition	Arm/Group Title
EventGroupDescription
Index Field	resultsSection.adverseEventsModule.eventGroups.description
Data Type	
markup ✓ (stats)
Definition	Arm/Group Description
EventGroupDeathsNumAffected
Index Field	resultsSection.adverseEventsModule.eventGroups.deathsNumAffected
Data Type	
integer (stats)
Definition	Total Number Affected by All-Cause Mortality
EventGroupDeathsNumAtRisk
Index Field	resultsSection.adverseEventsModule.eventGroups.deathsNumAtRisk
Data Type	
integer (stats)
Definition	Total Number at Risk for All-Cause Mortality
EventGroupSeriousNumAffected
Index Field	resultsSection.adverseEventsModule.eventGroups.seriousNumAffected
Data Type	
integer (stats)
Definition	Total Number Affected by Any Serious Adverse Event
EventGroupSeriousNumAtRisk
Index Field	resultsSection.adverseEventsModule.eventGroups.seriousNumAtRisk
Data Type	
integer (stats)
Definition	Total Number at Risk for Serious Adverse Events
EventGroupOtherNumAffected
Index Field	resultsSection.adverseEventsModule.eventGroups.otherNumAffected
Data Type	
integer (stats)
Definition	Total Number Affected by Any Other (Not Including Serious) Adverse Events Above the Frequency Threshold
EventGroupOtherNumAtRisk
Index Field	resultsSection.adverseEventsModule.eventGroups.otherNumAtRisk
Data Type	
integer (stats)
Definition	Total Number at Risk for Other (Not Including Serious) Adverse Events
NumEventGroups
Index Field	resultsSection.adverseEventsModule.numEventGroups ✗
Data Type	
short (stats)
SeriousEvent
Index Field	resultsSection.adverseEventsModule.seriousEvents
Data Type	
AdverseEvent[]
SeriousEventTerm
Index Field	resultsSection.adverseEventsModule.seriousEvents.term
Data Type	
text ✓ (stats)
Definition	Adverse Event Term
SeriousEventOrganSystem
Index Field	resultsSection.adverseEventsModule.seriousEvents.organSystem
Data Type	
text ✓ (stats)
Definition	Organ System
SeriousEventSourceVocabulary
Index Field	resultsSection.adverseEventsModule.seriousEvents.sourceVocabulary
Data Type	
text ✓ (stats)
Definition	Source Vocabulary Name
SeriousEventAssessmentType
Index Field	resultsSection.adverseEventsModule.seriousEvents.assessmentType
Data Type	
enum EventAssessment (stats)
Definition	Collection Approach
SeriousEventNotes
Index Field	resultsSection.adverseEventsModule.seriousEvents.notes
Data Type	
markup ✓ (stats)
Definition	Adverse Event Term Additional Description
SeriousEventStats
Index Field	resultsSection.adverseEventsModule.seriousEvents.stats
Data Type	
EventStats[]
SeriousEventStatsGroupId
Index Field	resultsSection.adverseEventsModule.seriousEvents.stats.groupId
Data Type	
text ✓ (stats)
SeriousEventStatsNumEvents
Index Field	resultsSection.adverseEventsModule.seriousEvents.stats.numEvents
Data Type	
integer (stats)
Definition	Number of Events
SeriousEventStatsNumAffected
Index Field	resultsSection.adverseEventsModule.seriousEvents.stats.numAffected
Data Type	
integer (stats)
Definition	Number of Participants Affected
SeriousEventStatsNumAtRisk
Index Field	resultsSection.adverseEventsModule.seriousEvents.stats.numAtRisk
Data Type	
integer (stats)
Definition	Number of Participants at Risk
NumSeriousEventStatss
Index Field	resultsSection.adverseEventsModule.seriousEvents.numSeriousEventStatss ✗
Data Type	
short (stats)
NumSeriousEvents
Index Field	resultsSection.adverseEventsModule.numSeriousEvents ✗
Data Type	
short (stats)
OtherEvent
Index Field	resultsSection.adverseEventsModule.otherEvents
Data Type	
AdverseEvent[]
OtherEventTerm
Index Field	resultsSection.adverseEventsModule.otherEvents.term
Data Type	
text ✓ (stats)
Definition	Adverse Event Term
OtherEventOrganSystem
Index Field	resultsSection.adverseEventsModule.otherEvents.organSystem
Data Type	
text ✓ (stats)
Definition	Organ System
OtherEventSourceVocabulary
Index Field	resultsSection.adverseEventsModule.otherEvents.sourceVocabulary
Data Type	
text ✓ (stats)
Definition	Source Vocabulary Name
OtherEventAssessmentType
Index Field	resultsSection.adverseEventsModule.otherEvents.assessmentType
Data Type	
enum EventAssessment (stats)
Definition	Collection Approach
OtherEventNotes
Index Field	resultsSection.adverseEventsModule.otherEvents.notes
Data Type	
markup ✓ (stats)
Definition	Adverse Event Term Additional Description
OtherEventStats
Index Field	resultsSection.adverseEventsModule.otherEvents.stats
Data Type	
EventStats[]
OtherEventStatsGroupId
Index Field	resultsSection.adverseEventsModule.otherEvents.stats.groupId
Data Type	
text ✓ (stats)
OtherEventStatsNumEvents
Index Field	resultsSection.adverseEventsModule.otherEvents.stats.numEvents
Data Type	
integer (stats)
Definition	Number of Events
OtherEventStatsNumAffected
Index Field	resultsSection.adverseEventsModule.otherEvents.stats.numAffected
Data Type	
integer (stats)
Definition	Number of Participants Affected
OtherEventStatsNumAtRisk
Index Field	resultsSection.adverseEventsModule.otherEvents.stats.numAtRisk
Data Type	
integer (stats)
Definition	Number of Participants at Risk
NumOtherEventStatss
Index Field	resultsSection.adverseEventsModule.otherEvents.numOtherEventStatss ✗
Data Type	
short (stats)
NumOtherEvents
Index Field	resultsSection.adverseEventsModule.numOtherEvents ✗
Data Type	
short (stats)
NumEvents
Index Field	resultsSection.adverseEventsModule.numEvents ✗
Data Type	
short (stats)
MoreInfoModule
Index Field	resultsSection.moreInfoModule
Data Type	
MoreInfoModule
LimitationsAndCaveats
Index Field	resultsSection.moreInfoModule.limitationsAndCaveats
Data Type	
LimitationsAndCaveats
Definition	Limitations and Caveats
LimitationsAndCaveatsDescription
Index Field	resultsSection.moreInfoModule.limitationsAndCaveats.description
Data Type	
markup ✓ (stats)
Definition	Overall Limitations and Caveats
CertainAgreement
Index Field	resultsSection.moreInfoModule.certainAgreement
Data Type	
CertainAgreement
Definition	Certain Agreements
AgreementPISponsorEmployee
Index Field	resultsSection.moreInfoModule.certainAgreement.piSponsorEmployee
Data Type	
boolean (stats)
Definition	Are all PIs Employees of Sponsor?
AgreementRestrictionType
Index Field	resultsSection.moreInfoModule.certainAgreement.restrictionType
Data Type	
enum AgreementRestrictionType (stats)
Definition	PI Disclosure Restriction Type
AgreementRestrictiveAgreement
Index Field	resultsSection.moreInfoModule.certainAgreement.restrictiveAgreement
Data Type	
boolean (stats)
Definition	Results Disclosure Restriction on PI(s)?
AgreementOtherDetails
Index Field	resultsSection.moreInfoModule.certainAgreement.otherDetails
Data Type	
markup ✓ (stats)
Definition	Other Disclosure Restriction Description
PointOfContact
Index Field	resultsSection.moreInfoModule.pointOfContact
Data Type	
PointOfContact
Definition	Results Point of Contact
PointOfContactTitle
Index Field	resultsSection.moreInfoModule.pointOfContact.title
Data Type	
text ✓ (stats)
Definition	Name or Official Title
PointOfContactOrganization
Index Field	resultsSection.moreInfoModule.pointOfContact.organization
Data Type	
text (stats)
Definition	Organization Name
PointOfContactEMail
Index Field	resultsSection.moreInfoModule.pointOfContact.email
Data Type	
text (stats)
Definition	Email
PointOfContactPhone
Index Field	resultsSection.moreInfoModule.pointOfContact.phone
Data Type	
text (stats)
Definition	Phone
PointOfContactPhoneExt
Index Field	resultsSection.moreInfoModule.pointOfContact.phoneExt
Data Type	
text (stats)
Definition	Extension (Ext.)
Annotation Section
AnnotationSection - Annotation Section
Index Field	annotationSection
Data Type	
AnnotationSection
Description	
Internally generated Annotation section
AnnotationModule
Index Field	annotationSection.annotationModule
Data Type	
AnnotationModule
UnpostedAnnotation
Index Field	annotationSection.annotationModule.unpostedAnnotation
Data Type	
UnpostedAnnotation
UnpostedResponsibleParty
Index Field	annotationSection.annotationModule.unpostedAnnotation.unpostedResponsibleParty
Data Type	
text ✓ (stats)
UnpostedEvent
Index Field	annotationSection.annotationModule.unpostedAnnotation.unpostedEvents
Data Type	
UnpostedEvent[]
UnpostedEventType
Index Field	annotationSection.annotationModule.unpostedAnnotation.unpostedEvents.type
Data Type	
enum UnpostedEventType (stats)
UnpostedEventDate
Index Field	annotationSection.annotationModule.unpostedAnnotation.unpostedEvents.date
Data Type	
NormalizedDate (stats)
UnpostedEventDateUnknown - Unposted Event Date is Unknown
Index Field	annotationSection.annotationModule.unpostedAnnotation.unpostedEvents.dateUnknown
Data Type	
boolean (stats)
NumUnpostedEvents
Index Field	annotationSection.annotationModule.unpostedAnnotation.numUnpostedEvents ✗
Data Type	
short (stats)
ViolationAnnotation
Index Field	annotationSection.annotationModule.violationAnnotation
Data Type	
ViolationAnnotation
ViolationEvent
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents
Data Type	
ViolationEvent[]
ViolationEventType
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents.type
Data Type	
enum ViolationEventType (stats)
ViolationEventDescription
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents.description
Data Type	
text ✓ (stats)
ViolationEventCreationDate
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents.creationDate
Data Type	
NormalizedDate (stats)
ViolationEventIssuedDate
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents.issuedDate
Data Type	
NormalizedDate (stats)
ViolationEventReleaseDate
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents.releaseDate
Data Type	
NormalizedDate (stats)
ViolationEventPostedDate
Index Field	annotationSection.annotationModule.violationAnnotation.violationEvents.postedDate
Data Type	
NormalizedDate (stats)
NumViolationEvents
Index Field	annotationSection.annotationModule.violationAnnotation.numViolationEvents ✗
Data Type	
short (stats)
Document Section
DocumentSection - Document Section
Index Field	documentSection
Data Type	
DocumentSection
LargeDocumentModule
Index Field	documentSection.largeDocumentModule
Data Type	
LargeDocumentModule
Definition	A.1 Document Upload Information
LargeDocNoSAP
Index Field	documentSection.largeDocumentModule.noSap
Data Type	
boolean (stats)
LargeDoc
Index Field	documentSection.largeDocumentModule.largeDocs
Data Type	
LargeDoc[]
LargeDocTypeAbbrev
Index Field	documentSection.largeDocumentModule.largeDocs.typeAbbrev
Data Type	
text ✓ (stats)
Definition	Document Type
LargeDocHasProtocol
Index Field	documentSection.largeDocumentModule.largeDocs.hasProtocol
Data Type	
boolean (stats)
LargeDocHasSAP
Index Field	documentSection.largeDocumentModule.largeDocs.hasSap
Data Type	
boolean (stats)
LargeDocHasICF
Index Field	documentSection.largeDocumentModule.largeDocs.hasIcf
Data Type	
boolean (stats)
LargeDocLabel
Index Field	documentSection.largeDocumentModule.largeDocs.label
Data Type	
text ✓ (stats)
Definition	Subtitle
LargeDocDate
Index Field	documentSection.largeDocumentModule.largeDocs.date
Data Type	
NormalizedDate (stats)
Definition	Document Date
LargeDocUploadDate
Index Field	documentSection.largeDocumentModule.largeDocs.uploadDate
Data Type	
DateTimeMinutes (stats)
LargeDocFilename
Index Field	documentSection.largeDocumentModule.largeDocs.filename
Data Type	
text (stats)
LargeDocSize
Index Field	documentSection.largeDocumentModule.largeDocs.size
Data Type	
long (stats)
NumLargeDocs
Index Field	documentSection.largeDocumentModule.numLargeDocs ✗
Data Type	
short (stats)
Derived Section
DerivedSection - Derived Section
Index Field	derivedSection
Data Type	
DerivedSection
Description	
Internally Generated
MiscInfoModule
Index Field	derivedSection.miscInfoModule
Data Type	
MiscInfoModule
VersionHolder
Index Field	derivedSection.miscInfoModule.versionHolder
Data Type	
NormalizedDate (stats)
RemovedCountry
Index Field	derivedSection.miscInfoModule.removedCountries
Data Type	
text[] (stats)
NumRemovedCountries
Index Field	derivedSection.miscInfoModule.numRemovedCountries ✗
Data Type	
short (stats)
SubmissionTracking
Index Field	derivedSection.miscInfoModule.submissionTracking
Data Type	
SubmissionTracking
EstimatedResultsFirstSubmitDate
Index Field	derivedSection.miscInfoModule.submissionTracking.estimatedResultsFirstSubmitDate
Data Type	
NormalizedDate (stats)
FirstMCPInfo
Index Field	derivedSection.miscInfoModule.submissionTracking.firstMcpInfo
Data Type	
FirstMcpInfo
FirstMCPPostDateStruct
Index Field	derivedSection.miscInfoModule.submissionTracking.firstMcpInfo.postDateStruct
Data Type	
DateStruct
FirstMCPPostDate
Index Field	derivedSection.miscInfoModule.submissionTracking.firstMcpInfo.postDateStruct.date
Data Type	
NormalizedDate (stats)
FirstMCPPostDateType
Index Field	derivedSection.miscInfoModule.submissionTracking.firstMcpInfo.postDateStruct.type
Data Type	
enum DateType (stats)
SubmissionInfo
Index Field	derivedSection.miscInfoModule.submissionTracking.submissionInfos
Data Type	
SubmissionInfo[]
SubmissionReleaseDate
Index Field	derivedSection.miscInfoModule.submissionTracking.submissionInfos.releaseDate
Data Type	
NormalizedDate (stats)
SubmissionUnreleaseDate
Index Field	derivedSection.miscInfoModule.submissionTracking.submissionInfos.unreleaseDate
Data Type	
NormalizedDate (stats)
SubmissionUnreleaseDateUnknown
Index Field	derivedSection.miscInfoModule.submissionTracking.submissionInfos.unreleaseDateUnknown
Data Type	
boolean (stats)
SubmissionResetDate
Index Field	derivedSection.miscInfoModule.submissionTracking.submissionInfos.resetDate
Data Type	
NormalizedDate (stats)
SubmissionMCPReleaseN
Index Field	derivedSection.miscInfoModule.submissionTracking.submissionInfos.mcpReleaseN
Data Type	
integer (stats)
ConditionBrowseModule
Index Field	derivedSection.conditionBrowseModule
Data Type	
BrowseModule
ConditionMesh
Index Field	derivedSection.conditionBrowseModule.meshes
Data Type	
Mesh[]
ConditionMeshId
Index Field	derivedSection.conditionBrowseModule.meshes.id
Data Type	
text (stats)
ConditionMeshTerm
Index Field	derivedSection.conditionBrowseModule.meshes.term
Data Type	
text ✓ (stats)
NumConditionMeshes
Index Field	derivedSection.conditionBrowseModule.numConditionMeshes ✗
Data Type	
short (stats)
ConditionAncestor
Index Field	derivedSection.conditionBrowseModule.ancestors
Data Type	
Mesh[]
ConditionAncestorId
Index Field	derivedSection.conditionBrowseModule.ancestors.id
Data Type	
text (stats)
ConditionAncestorTerm
Index Field	derivedSection.conditionBrowseModule.ancestors.term
Data Type	
text ✓ (stats)
NumConditionAncestors
Index Field	derivedSection.conditionBrowseModule.numConditionAncestors ✗
Data Type	
short (stats)
ConditionBrowseLeaf
Index Field	derivedSection.conditionBrowseModule.browseLeaves
Data Type	
BrowseLeaf[]
ConditionBrowseLeafId
Index Field	derivedSection.conditionBrowseModule.browseLeaves.id
Data Type	
text (stats)
ConditionBrowseLeafName
Index Field	derivedSection.conditionBrowseModule.browseLeaves.name
Data Type	
text ✓ (stats)
ConditionBrowseLeafAsFound
Index Field	derivedSection.conditionBrowseModule.browseLeaves.asFound
Data Type	
text ✓ (stats)
ConditionBrowseLeafRelevance
Index Field	derivedSection.conditionBrowseModule.browseLeaves.relevance
Data Type	
enum BrowseLeafRelevance (stats)
NumConditionBrowseLeafs
Index Field	derivedSection.conditionBrowseModule.numConditionBrowseLeafs ✗
Data Type	
short (stats)
ConditionBrowseBranch
Index Field	derivedSection.conditionBrowseModule.browseBranches
Data Type	
BrowseBranch[]
ConditionBrowseBranchAbbrev
Index Field	derivedSection.conditionBrowseModule.browseBranches.abbrev
Data Type	
text ✓ (stats)
ConditionBrowseBranchName
Index Field	derivedSection.conditionBrowseModule.browseBranches.name
Data Type	
text ✓ (stats)
NumConditionBrowseBranches
Index Field	derivedSection.conditionBrowseModule.numConditionBrowseBranches ✗
Data Type	
short (stats)
InterventionBrowseModule
Index Field	derivedSection.interventionBrowseModule
Data Type	
BrowseModule
InterventionMesh
Index Field	derivedSection.interventionBrowseModule.meshes
Data Type	
Mesh[]
InterventionMeshId
Index Field	derivedSection.interventionBrowseModule.meshes.id
Data Type	
text (stats)
InterventionMeshTerm
Index Field	derivedSection.interventionBrowseModule.meshes.term
Data Type	
text ✓ (stats)
NumInterventionMeshes
Index Field	derivedSection.interventionBrowseModule.numInterventionMeshes ✗
Data Type	
short (stats)
InterventionAncestor
Index Field	derivedSection.interventionBrowseModule.ancestors
Data Type	
Mesh[]
InterventionAncestorId
Index Field	derivedSection.interventionBrowseModule.ancestors.id
Data Type	
text (stats)
InterventionAncestorTerm
Index Field	derivedSection.interventionBrowseModule.ancestors.term
Data Type	
text ✓ (stats)
NumInterventionAncestors
Index Field	derivedSection.interventionBrowseModule.numInterventionAncestors ✗
Data Type	
short (stats)
InterventionBrowseLeaf
Index Field	derivedSection.interventionBrowseModule.browseLeaves
Data Type	
BrowseLeaf[]
InterventionBrowseLeafId
Index Field	derivedSection.interventionBrowseModule.browseLeaves.id
Data Type	
text (stats)
InterventionBrowseLeafName
Index Field	derivedSection.interventionBrowseModule.browseLeaves.name
Data Type	
text ✓ (stats)
InterventionBrowseLeafAsFound
Index Field	derivedSection.interventionBrowseModule.browseLeaves.asFound
Data Type	
text ✓ (stats)
InterventionBrowseLeafRelevance
Index Field	derivedSection.interventionBrowseModule.browseLeaves.relevance
Data Type	
enum BrowseLeafRelevance (stats)
NumInterventionBrowseLeafs
Index Field	derivedSection.interventionBrowseModule.numInterventionBrowseLeafs ✗
Data Type	
short (stats)
InterventionBrowseBranch
Index Field	derivedSection.interventionBrowseModule.browseBranches
Data Type	
BrowseBranch[]
InterventionBrowseBranchAbbrev
Index Field	derivedSection.interventionBrowseModule.browseBranches.abbrev
Data Type	
text ✓ (stats)
InterventionBrowseBranchName
Index Field	derivedSection.interventionBrowseModule.browseBranches.name
Data Type	
text ✓ (stats)
NumInterventionBrowseBranches
Index Field	derivedSection.interventionBrowseModule.numInterventionBrowseBranches ✗
Data Type	
short (stats)
Has Results
HasResults - Has Results
Index Field	hasResults
Data Type	
boolean (stats)
Description	
Flag that indicates if a study has posted results on public site
Enumeration types
Type	Value - Source Value
Status	
ACTIVE_NOT_RECRUITING - Active, not recruiting
COMPLETED - Completed
ENROLLING_BY_INVITATION - Enrolling by invitation
NOT_YET_RECRUITING - Not yet recruiting
RECRUITING - Recruiting
SUSPENDED - Suspended
TERMINATED - Terminated
WITHDRAWN - Withdrawn
AVAILABLE - Available
NO_LONGER_AVAILABLE - No longer available
TEMPORARILY_NOT_AVAILABLE - Temporarily not available
APPROVED_FOR_MARKETING - Approved for marketing
WITHHELD - Withheld
UNKNOWN - Unknown status
StudyType	
EXPANDED_ACCESS - Expanded Access
INTERVENTIONAL - Interventional
OBSERVATIONAL - Observational
Phase	
NA - Not Applicable
EARLY_PHASE1 - Early Phase 1
PHASE1 - Phase 1
PHASE2 - Phase 2
PHASE3 - Phase 3
PHASE4 - Phase 4
Sex	
FEMALE - Female
MALE - Male
ALL - All
StandardAge	
CHILD - Child
ADULT - Adult
OLDER_ADULT - Older Adult
SamplingMethod	
PROBABILITY_SAMPLE - Probability Sample
NON_PROBABILITY_SAMPLE - Non-Probability Sample
IpdSharing	
YES - Yes
NO - No
UNDECIDED - Undecided
IpdSharingInfoType	
STUDY_PROTOCOL - Study Protocol
SAP - Statistical Analysis Plan (SAP)
ICF - Informed Consent Form (ICF)
CSR - Clinical Study Report (CSR)
ANALYTIC_CODE - Analytic Code
OrgStudyIdType	
NIH - U.S. NIH Grant/Contract
FDA - U.S. FDA Grant/Contract
VA - U.S. VA Grant/Contract
CDC - U.S. CDC Grant/Contract
AHRQ - U.S. AHRQ Grant/Contract
SAMHSA - U.S. SAMHSA Grant/Contract
SecondaryIdType	
NIH - U.S. NIH Grant/Contract
FDA - U.S. FDA Grant/Contract
VA - U.S. VA Grant/Contract
CDC - U.S. CDC Grant/Contract
AHRQ - U.S. AHRQ Grant/Contract
SAMHSA - U.S. SAMHSA Grant/Contract
OTHER_GRANT - Other Grant/Funding Number
EUDRACT_NUMBER - EudraCT Number
CTIS - EU Trial (CTIS) Number
REGISTRY - Registry Identifier
OTHER - Other Identifier
AgencyClass	
NIH - NIH
FED - FED
OTHER_GOV - OTHER_GOV
INDIV - INDIV
INDUSTRY - INDUSTRY
NETWORK - NETWORK
AMBIG - AMBIG
OTHER - OTHER
UNKNOWN - UNKNOWN
ExpandedAccessStatus	
AVAILABLE - Available
NO_LONGER_AVAILABLE - No longer available
TEMPORARILY_NOT_AVAILABLE - Temporarily not available
APPROVED_FOR_MARKETING - Approved for marketing
DateType	
ACTUAL - Actual
ESTIMATED - Estimated
ResponsiblePartyType	
SPONSOR - Sponsor
PRINCIPAL_INVESTIGATOR - Principal Investigator
SPONSOR_INVESTIGATOR - Sponsor-Investigator
DesignAllocation	
RANDOMIZED - Randomized
NON_RANDOMIZED - Non-Randomized
NA - N/A
InterventionalAssignment	
SINGLE_GROUP - Single Group Assignment
PARALLEL - Parallel Assignment
CROSSOVER - Crossover Assignment
FACTORIAL - Factorial Assignment
SEQUENTIAL - Sequential Assignment
PrimaryPurpose	
TREATMENT - Treatment
PREVENTION - Prevention
DIAGNOSTIC - Diagnostic
ECT - Educational/Counseling/Training
SUPPORTIVE_CARE - Supportive Care
SCREENING - Screening
HEALTH_SERVICES_RESEARCH - Health Services Research
BASIC_SCIENCE - Basic Science
DEVICE_FEASIBILITY - Device Feasibility
OTHER - Other
ObservationalModel	
COHORT - Cohort
CASE_CONTROL - Case-Control
CASE_ONLY - Case-Only
CASE_CROSSOVER - Case-Crossover
ECOLOGIC_OR_COMMUNITY - Ecologic or Community
FAMILY_BASED - Family-Based
DEFINED_POPULATION - Defined Population
NATURAL_HISTORY - Natural History
OTHER - Other
DesignTimePerspective	
RETROSPECTIVE - Retrospective
PROSPECTIVE - Prospective
CROSS_SECTIONAL - Cross-Sectional
OTHER - Other
BioSpecRetention	
NONE_RETAINED - None Retained
SAMPLES_WITH_DNA - Samples With DNA
SAMPLES_WITHOUT_DNA - Samples Without DNA
EnrollmentType	
ACTUAL - Actual
ESTIMATED - Estimated
ArmGroupType	
EXPERIMENTAL - Experimental
ACTIVE_COMPARATOR - Active Comparator
PLACEBO_COMPARATOR - Placebo Comparator
SHAM_COMPARATOR - Sham Comparator
NO_INTERVENTION - No Intervention
OTHER - Other
InterventionType	
BEHAVIORAL - Behavioral
BIOLOGICAL - Biological
COMBINATION_PRODUCT - Combination Product
DEVICE - Device
DIAGNOSTIC_TEST - Diagnostic Test
DIETARY_SUPPLEMENT - Dietary Supplement
DRUG - Drug
GENETIC - Genetic
PROCEDURE - Procedure
RADIATION - Radiation
OTHER - Other
ContactRole	
STUDY_CHAIR - Study Chair
STUDY_DIRECTOR - Study Director
PRINCIPAL_INVESTIGATOR - Principal Investigator
SUB_INVESTIGATOR - Sub-Investigator
CONTACT - Contact
OfficialRole	
STUDY_CHAIR - Study Chair
STUDY_DIRECTOR - Study Director
PRINCIPAL_INVESTIGATOR - Principal Investigator
SUB_INVESTIGATOR - Sub-Investigator
RecruitmentStatus	
ACTIVE_NOT_RECRUITING - Active, not recruiting
COMPLETED - Completed
ENROLLING_BY_INVITATION - Enrolling by invitation
NOT_YET_RECRUITING - Not yet recruiting
RECRUITING - Recruiting
SUSPENDED - Suspended
TERMINATED - Terminated
WITHDRAWN - Withdrawn
AVAILABLE - Available
ReferenceType	
BACKGROUND - background
RESULT - result
DERIVED - derived
MeasureParam	
GEOMETRIC_MEAN - Geometric Mean
GEOMETRIC_LEAST_SQUARES_MEAN - Geometric Least Squares Mean
LEAST_SQUARES_MEAN - Least Squares Mean
LOG_MEAN - Log Mean
MEAN - Mean
MEDIAN - Median
NUMBER - Number
COUNT_OF_PARTICIPANTS - Count of Participants
COUNT_OF_UNITS - Count of Units
MeasureDispersionType	
NA - Not Applicable
STANDARD_DEVIATION - Standard Deviation
STANDARD_ERROR - Standard Error
INTER_QUARTILE_RANGE - Inter-Quartile Range
FULL_RANGE - Full Range
CONFIDENCE_80 - 80% Confidence Interval
CONFIDENCE_90 - 90% Confidence Interval
CONFIDENCE_95 - 95% Confidence Interval
CONFIDENCE_975 - 97.5% Confidence Interval
CONFIDENCE_99 - 99% Confidence Interval
CONFIDENCE_OTHER - Other Confidence Interval Level
GEOMETRIC_COEFFICIENT - Geometric Coefficient of Variation
OutcomeMeasureType	
PRIMARY - Primary
SECONDARY - Secondary
OTHER_PRE_SPECIFIED - Other Pre-specified
POST_HOC - Post-Hoc
ReportingStatus	
NOT_POSTED - Not Posted
POSTED - Posted
EventAssessment	
NON_SYSTEMATIC_ASSESSMENT - Non-systematic Assessment
SYSTEMATIC_ASSESSMENT - Systematic Assessment
AgreementRestrictionType	
LTE60 - LTE60
GT60 - GT60
OTHER - OTHER
BrowseLeafRelevance	
LOW - low
HIGH - high
DesignMasking	
NONE - None (Open Label)
SINGLE - Single
DOUBLE - Double
TRIPLE - Triple
QUADRUPLE - Quadruple
WhoMasked	
PARTICIPANT - Participant
CARE_PROVIDER - Care Provider
INVESTIGATOR - Investigator
OUTCOMES_ASSESSOR - Outcomes Assessor
AnalysisDispersionType	
STANDARD_DEVIATION - Standard Deviation
STANDARD_ERROR_OF_MEAN - Standard Error of the Mean
ConfidenceIntervalNumSides	
ONE_SIDED - 1-Sided
TWO_SIDED - 2-Sided
NonInferiorityType	
SUPERIORITY - Superiority
NON_INFERIORITY - Non-Inferiority
EQUIVALENCE - Equivalence
OTHER - Other
NON_INFERIORITY_OR_EQUIVALENCE - Non-Inferiority or Equivalence
SUPERIORITY_OR_OTHER - Superiority or Other
NON_INFERIORITY_OR_EQUIVALENCE_LEGACY - Non-Inferiority or Equivalence (legacy)
SUPERIORITY_OR_OTHER_LEGACY - Superiority or Other (legacy)
UnpostedEventType	
RESET - Reset
RELEASE - Release
UNRELEASE - Unrelease
ViolationEventType	
VIOLATION_IDENTIFIED - Violation Identified by FDA
CORRECTION_CONFIRMED - Correction Confirmed by FDA
PENALTY_IMPOSED - Penalty Imposed by FDA
ISSUES_IN_LETTER_ADDRESSED_CONFIRMED - Issues in letter addressed; confirmed by FDA.
Built-in types
/** Date in format: `yyyy-MM-dd` */
type NormalizedDate = string;

/** Date in one of the formats: `yyyy`, `yyyy-MM`, or `yyyy-MM-dd` */
type PartialDate = string;

/** DateTime in format: `yyyy-MM-dd'T'HH:mm` */
type DateTimeMinutes = string;

type NormalizedTime = string;

interface GeoPoint {
  lat: number;
  lon: number;
}
      
Last updated on April 01, 2024
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Back to Top
Tell us what you think!Close
Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeData and APIAbout APISearch Areas
Search Areas
On this page
Introduction
BasicSearch area
ConditionSearch area
InterventionSearch area
InterventionNameSearch area
ObsoleteConditionSearch area
ExternalIdsSearch area
ExternalIdTypesSearch area
EligibilitySearch area
OutcomeSearch area
OutcomeNameSearch area
TitleSearch area
LocationSearch area
ContactSearch area
NCTIdSearch area
IdSearch area
SponsorSearch area
FunderTypeSearch area
ResponsiblePartySearch area
PatientSearch area
Introduction
The Search Areas describe the parts of a study record that are searched for content using different fields. Some search areas consist of groups of weighted study fields that can be searched at once (for example, BasicSearch area consists of 43 data fields). This also applies to the search form on the ClinicalTrials.gov homepage.

Search areas can also consist of a single data field (for example, Acronym, BriefTitle).

See the discussions of Constructing Complex Search Queries for more information on using search areas when conducting searches and to learn how to build detailed searches on ClinicalTrials.gov.

The Data Field column refers to "Piece Name" within the Study Data Structure. Fields producing synonyms are marked with ✓.

ClinicalTrials.gov only supports one search document: Study. It contains 19 search areas.

BasicSearch area
This is a default search area for a query entered in "Other terms" input field of search form in UI.

Request parameter: query.term.

The area contains 57 data fields:

Data Field	Weight	Type
NCTId
1	text
Acronym
1	text ✓
BriefTitle
0.89	text ✓
OfficialTitle
0.85	text ✓
Condition
0.81	text ✓
InterventionName
0.8	text ✓
InterventionOtherName
0.75	text ✓
Phase
0.65	enum Phase
StdAge
0.65	enum StandardAge
PrimaryOutcomeMeasure
Keyword
0.6	text ✓
BriefSummary
0.6	markup ✓
ArmGroupLabel
SecondaryOutcomeMeasure
0.5	text ✓
InterventionDescription
ArmGroupDescription
0.45	markup ✓
PrimaryOutcomeDescription
0.4	markup ✓
LeadSponsorName
OrgStudyId
SecondaryId
NCTIdAlias
0.4	text
InterventionType
0.35	enum InterventionType
ArmGroupType
0.35	enum ArmGroupType
SecondaryOutcomeDescription
0.35	markup ✓
LocationFacility
LocationState
LocationCountry
LocationCity
0.35	text
LocationStatus
0.35	enum RecruitmentStatus
BioSpecDescription
0.3	markup ✓
ResponsiblePartyInvestigatorFullName
ResponsiblePartyInvestigatorTitle
ResponsiblePartyInvestigatorAffiliation
ResponsiblePartyOldNameTitle
ResponsiblePartyOldOrganization
OverallOfficialAffiliation
OverallOfficialRole
OverallOfficialName
CentralContactName
ConditionMeshTerm
InterventionMeshTerm
0.3	text ✓
DesignAllocation
0.3	enum DesignAllocation
DesignInterventionModel
0.3	enum InterventionalAssignment
DesignMasking
0.3	enum DesignMasking
DesignWhoMasked
0.3	enum WhoMasked
DesignObservationalModel
0.3	enum ObservationalModel
DesignPrimaryPurpose
0.3	enum PrimaryPurpose
DesignTimePerspective
0.3	enum DesignTimePerspective
StudyType
0.3	enum StudyType
ConditionAncestorTerm
InterventionAncestorTerm
0.25	text ✓
CollaboratorName
0.25	text
OtherOutcomeMeasure
OutcomeMeasureTitle
0.15	text ✓
OtherOutcomeDescription
OutcomeMeasureDescription
0.1	markup ✓
LocationContactName
0.1	text
ConditionSearch area
This is a default search area for a query entered in "Conditions or disease" input field of search form in UI.

Request parameter: query.cond.

The area contains 7 data fields:

Data Field	Weight	Type
Condition
0.95	text ✓
BriefTitle
0.6	text ✓
OfficialTitle
0.55	text ✓
ConditionMeshTerm
0.5	text ✓
ConditionAncestorTerm
0.4	text ✓
Keyword
0.3	text ✓
NCTId
0.2	text
InterventionSearch area
This is a default search area for a query entered in "Intervention / treatment" input field of search form in UI.

Request parameter: query.intr.

The area contains 12 data fields:

Data Field	Weight	Type
InterventionName
0.95	text ✓
InterventionType
0.85	enum InterventionType
ArmGroupType
0.85	enum ArmGroupType
InterventionOtherName
0.75	text ✓
BriefTitle
0.65	text ✓
OfficialTitle
0.6	text ✓
ArmGroupLabel
0.5	text ✓
InterventionMeshTerm
0.5	text ✓
Keyword
0.5	text ✓
InterventionAncestorTerm
0.4	text ✓
InterventionDescription
0.4	markup ✓
ArmGroupDescription
0.4	markup ✓
InterventionNameSearch area
The area contains 2 data fields:

Data Field	Weight	Type
InterventionName
0.99	text ✓
InterventionOtherName
0.9	text ✓
ObsoleteConditionSearch area
The area contains 4 data fields:

Data Field	Weight	Type
Condition
0.95	text ✓
ConditionMeshTerm
0.8	text ✓
ConditionAncestorTerm
0.8	text ✓
Keyword
0.6	text ✓
ExternalIdsSearch area
The area contains 2 data fields:

Data Field	Weight	Type
OrgStudyId
0.9	text ✓
SecondaryId
0.7	text ✓
ExternalIdTypesSearch area
The area contains 2 data fields:

Data Field	Weight	Type
OrgStudyIdType
0.9	enum OrgStudyIdType
SecondaryIdType
0.7	enum SecondaryIdType
EligibilitySearch area
The area contains 2 data fields:

Data Field	Weight	Type
EligibilityCriteria
0.95	markup ✓
StudyPopulation
0.8	markup ✓
OutcomeSearch area
This is a default search area for a query entered in "Outcome measure" input field of search form in UI.

Request parameter: query.outc.

The area contains 9 data fields:

Data Field	Weight	Type
PrimaryOutcomeMeasure
0.9	text ✓
SecondaryOutcomeMeasure
0.8	text ✓
PrimaryOutcomeDescription
0.6	markup ✓
SecondaryOutcomeDescription
0.5	markup ✓
OtherOutcomeMeasure
0.4	text ✓
OutcomeMeasureTitle
0.4	text ✓
OtherOutcomeDescription
0.3	markup ✓
OutcomeMeasureDescription
0.3	markup ✓
OutcomeMeasurePopulationDescription
0.3	markup ✓
OutcomeNameSearch area
The area contains 4 data fields:

Data Field	Weight	Type
PrimaryOutcomeMeasure
0.98	text ✓
SecondaryOutcomeMeasure
0.8	text ✓
OtherOutcomeMeasure
0.5	text ✓
OutcomeMeasureTitle
0.3	text ✓
TitleSearch area
This is a default search area for a query entered in "Title / acronym" input field of search form in UI.

Request parameter: query.titles.

The area contains 3 data fields:

Data Field	Weight	Type
Acronym
0.99	text ✓
BriefTitle
0.95	text ✓
OfficialTitle
0.8	text ✓
LocationSearch area
This is a default search area for a query entered in "Location terms" input field of search form in UI.

Request parameter: query.locn.

The area contains 5 data fields:

Data Field	Weight	Type
LocationCity
0.95	text
LocationState
0.95	text
LocationCountry
0.95	text
LocationFacility
0.95	text
LocationZip
0.35	text
ContactSearch area
The area contains 4 data fields:

Data Field	Weight	Type
OverallOfficialName
0.95	text
CentralContactName
0.9	text
OverallOfficialAffiliation
0.85	text
LocationContactName
0.8	text
NCTIdSearch area
The area contains 2 data fields:

Data Field	Weight	Type
NCTId
0.99	text
NCTIdAlias
0.9	text ✓
IdSearch area
This is a default search area for a query entered in "Study IDs" input field of search form in UI.

Request parameter: query.id.

The area contains 5 data fields:

Data Field	Weight	Type
NCTId
0.99	text
NCTIdAlias
0.9	text ✓
Acronym
0.85	text ✓
OrgStudyId
0.8	text ✓
SecondaryId
0.75	text ✓
SponsorSearch area
This is a default search area for a query entered in "Sponsor / collaborator" input field of search form in UI.

Request parameter: query.spons.

The area contains 3 data fields:

Data Field	Weight	Type
LeadSponsorName
0.99	text
CollaboratorName
0.9	text
OrgFullName
0.6	text
FunderTypeSearch area
The area contains 2 data fields:

Data Field	Weight	Type
LeadSponsorClass
0.99	enum AgencyClass
CollaboratorClass
0.9	enum AgencyClass
ResponsiblePartySearch area
The area contains 5 data fields:

Data Field	Weight	Type
ResponsiblePartyInvestigatorFullName
0.9	text ✓
ResponsiblePartyOldNameTitle
0.8	text ✓
ResponsiblePartyInvestigatorAffiliation
0.8	text ✓
ResponsiblePartyOldOrganization
0.7	text ✓
ResponsiblePartyInvestigatorTitle
0.7	text ✓
PatientSearch area
Request parameter: query.patient.

The area contains 47 data fields:

Data Field	Weight	Type
Acronym
1	text ✓
Condition
0.95	text ✓
BriefTitle
0.9	text ✓
OfficialTitle
0.85	text ✓
ConditionMeshTerm
0.8	text ✓
ConditionAncestorTerm
0.7	text ✓
BriefSummary
0.65	markup ✓
Keyword
InterventionName
InterventionOtherName
PrimaryOutcomeMeasure
0.6	text ✓
StdAge
0.6	enum StandardAge
ArmGroupLabel
0.5	text ✓
SecondaryOutcomeMeasure
0.5	text ✓
InterventionDescription
0.45	markup ✓
ArmGroupDescription
0.45	markup ✓
PrimaryOutcomeDescription
0.45	markup ✓
LeadSponsorName
0.4	text
OrgStudyId
0.4	text ✓
SecondaryId
0.4	text ✓
NCTIdAlias
0.4	text ✓
SecondaryOutcomeDescription
0.35	markup ✓
LocationFacility
0.35	text
LocationState
0.35	text
LocationCountry
0.35	text
LocationCity
0.35	text
BioSpecDescription
0.3	markup ✓
ResponsiblePartyInvestigatorFullName
0.3	text ✓
ResponsiblePartyInvestigatorTitle
0.3	text ✓
ResponsiblePartyInvestigatorAffiliation
0.3	text ✓
ResponsiblePartyOldNameTitle
0.3	text ✓
ResponsiblePartyOldOrganization
0.3	text ✓
OverallOfficialAffiliation
0.3	text
OverallOfficialName
0.3	text
CentralContactName
0.3	text
DesignInterventionModel
0.3	enum InterventionalAssignment
DesignMasking
0.3	enum DesignMasking
DesignWhoMasked
0.3	enum WhoMasked
DesignObservationalModel
0.3	enum ObservationalModel
DesignPrimaryPurpose
0.3	enum PrimaryPurpose
DesignTimePerspective
0.3	enum DesignTimePerspective
InterventionMeshTerm
0.3	text ✓
InterventionAncestorTerm
0.25	text ✓
CollaboratorName
0.25	text
OtherOutcomeMeasure
0.15	text ✓
OtherOutcomeDescription
0.1	markup ✓
LocationContactName
0.1	text
Last updated on June 07, 2024
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Tell us what you think!Close
Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeData and APIAbout APICSV Download
CSV Download
The information represented below outlines the column names that can be included in a CSV download and the corresponding data fields that will be shown.

* Markup fields are encoded in markdown format

Column Name	Included Data Fields
NCT Number	
NCTId
Study Title	
BriefTitle
Study URL	
NCTId
Acronym	
Acronym
Study Status	
OverallStatus
Brief Summary	
BriefSummary
Study Results	
HasResults
Conditions	
Condition
Interventions	
InterventionType
InterventionName
Primary Outcome Measures	
PrimaryOutcomeMeasure
PrimaryOutcomeDescription
PrimaryOutcomeTimeFrame
Secondary Outcome Measures	
SecondaryOutcomeMeasure
SecondaryOutcomeDescription
SecondaryOutcomeTimeFrame
Other Outcome Measures	
OtherOutcomeMeasure
OtherOutcomeDescription
OtherOutcomeTimeFrame
Sponsor	
LeadSponsorName
Collaborators	
CollaboratorName
Sex	
Sex
Age	
MinimumAge
MaximumAge
StdAge
Phases	
Phase
Enrollment	
EnrollmentCount
Funder Type	
LeadSponsorClass
Study Type	
StudyType
Study Design	
DesignAllocation
DesignInterventionModel
DesignMasking
DesignWhoMasked
DesignPrimaryPurpose
Other IDs	
OrgStudyId
SecondaryId
Start Date	
StartDate
Primary Completion Date	
PrimaryCompletionDate
Completion Date	
CompletionDate
First Posted	
StudyFirstPostDate
Results First Posted	
ResultsFirstPostDate
Last Update Posted	
LastUpdatePostDate
Locations	
LocationFacility
LocationCity
LocationState
LocationZip
LocationCountry
Study Documents	
NCTId
LargeDocLabel
LargeDocFilename
Last updated on January 31, 2023
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Tell us what you think!Close
Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeData and APIAbout APICSV Download
CSV Download
The information represented below outlines the column names that can be included in a CSV download and the corresponding data fields that will be shown.

* Markup fields are encoded in markdown format

Column Name	Included Data Fields
NCT Number	
NCTId
Study Title	
BriefTitle
Study URL	
NCTId
Acronym	
Acronym
Study Status	
OverallStatus
Brief Summary	
BriefSummary
Study Results	
HasResults
Conditions	
Condition
Interventions	
InterventionType
InterventionName
Primary Outcome Measures	
PrimaryOutcomeMeasure
PrimaryOutcomeDescription
PrimaryOutcomeTimeFrame
Secondary Outcome Measures	
SecondaryOutcomeMeasure
SecondaryOutcomeDescription
SecondaryOutcomeTimeFrame
Other Outcome Measures	
OtherOutcomeMeasure
OtherOutcomeDescription
OtherOutcomeTimeFrame
Sponsor	
LeadSponsorName
Collaborators	
CollaboratorName
Sex	
Sex
Age	
MinimumAge
MaximumAge
StdAge
Phases	
Phase
Enrollment	
EnrollmentCount
Funder Type	
LeadSponsorClass
Study Type	
StudyType
Study Design	
DesignAllocation
DesignInterventionModel
DesignMasking
DesignWhoMasked
DesignPrimaryPurpose
Other IDs	
OrgStudyId
SecondaryId
Start Date	
StartDate
Primary Completion Date	
PrimaryCompletionDate
Completion Date	
CompletionDate
First Posted	
StudyFirstPostDate
Results First Posted	
ResultsFirstPostDate
Last Update Posted	
LastUpdatePostDate
Locations	
LocationFacility
LocationCity
LocationState
LocationZip
LocationCountry
Study Documents	
NCTId
LargeDocLabel
LargeDocFilename
Last updated on January 31, 2023
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Tell us what you think!Close


Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeData and APIAbout APICSV Download
CSV Download
The information represented below outlines the column names that can be included in a CSV download and the corresponding data fields that will be shown.

* Markup fields are encoded in markdown format

Column Name	Included Data Fields
NCT Number	
NCTId
Study Title	
BriefTitle
Study URL	
NCTId
Acronym	
Acronym
Study Status	
OverallStatus
Brief Summary	
BriefSummary
Study Results	
HasResults
Conditions	
Condition
Interventions	
InterventionType
InterventionName
Primary Outcome Measures	
PrimaryOutcomeMeasure
PrimaryOutcomeDescription
PrimaryOutcomeTimeFrame
Secondary Outcome Measures	
SecondaryOutcomeMeasure
SecondaryOutcomeDescription
SecondaryOutcomeTimeFrame
Other Outcome Measures	
OtherOutcomeMeasure
OtherOutcomeDescription
OtherOutcomeTimeFrame
Sponsor	
LeadSponsorName
Collaborators	
CollaboratorName
Sex	
Sex
Age	
MinimumAge
MaximumAge
StdAge
Phases	
Phase
Enrollment	
EnrollmentCount
Funder Type	
LeadSponsorClass
Study Type	
StudyType
Study Design	
DesignAllocation
DesignInterventionModel
DesignMasking
DesignWhoMasked
DesignPrimaryPurpose
Other IDs	
OrgStudyId
SecondaryId
Start Date	
StartDate
Primary Completion Date	
PrimaryCompletionDate
Completion Date	
CompletionDate
First Posted	
StudyFirstPostDate
Results First Posted	
ResultsFirstPostDate
Last Update Posted	
LastUpdatePostDate
Locations	
LocationFacility
LocationCity
LocationState
LocationZip
LocationCountry
Study Documents	
NCTId
LargeDocLabel
LargeDocFilename
Last updated on January 31, 2023
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Tell us what you think!Close

Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeData and APIAbout APIRIS Download
RIS Download
The information represented below outlines the tag names included in a RIS download and the corresponding data fields used for their content.

Tag Name	Description	Included Data Fields
TY	Type of reference - always "DBASE"	
DP	Database provider - always "National Library of Medicine (US)"	
PP	Publishing place - always "Bethesda (MD)"	
ID	Unique identifier of content	
NCTId
AN	National Clinical Trial (NCT) identification number	
NCTId
SF	Subfile/database - always "ClinicalTrials.gov"	
ST	Short title	
BriefTitle
Acronym
TI	Official title	
OfficialTitle
Y1	First submitted date	
StudyFirstSubmitDate
Y2	Study start date	
StartDate
A2	Investigator(s)	
CollaboratorName
C1	Sponsor/organization	
LeadSponsorName
C2	Overall status	
OverallStatus
C3	Last update posted date	
LastUpdatePostDate
C4	Last update submitted date	
LastUpdateSubmitDate
C5	Study type	
StudyType
ExpAccTypeIndividual
ExpAccTypeIntermediate
ExpAccTypeTreatment
PatientRegistry
C6	Has results	
HasResults
SubmissionInfo
C7	Study documents	
LargeDocHasProtocol
LargeDocHasSAP
LargeDocHasICF
C8	Central contact	
CentralContactName
CentralContactRole
CentralContactPhone
CentralContactPhoneExt
CentralContactEMail
RD	Retrieved date	
UR	Study URL	
NCTId
Last updated on June 05, 2024
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Tell us what you think!Close


Hide glossaryGlossary
Study record managers: refer to the Data Element Definitions if submitting registration or results information.

Search for terms

Accepts healthy volunteers
Active comparator arm
Adverse event
Age or age group
All-cause mortality
Allocation
Arm
Arm type
Baseline characteristics
Canceled submission
Certain agreements
Certification
Certification/extension first posted
Certification/extension first submitted
Certification/extension first submitted that met QC criteria
City and distance
Clinical study
Clinical trial
ClinicalTrials.gov identifier (NCT number)
Collaborator
Condition/disease
Contact
Country
Cross-over assignment
Data Monitoring Committee (DMC)
Early Phase 1 (formerly listed as Phase 0)
Eligibility criteria
Enrollment
Exclusion criteria
Expanded access
Expanded access status
Expanded access type
Experimental arm
Extension request
Factorial assignment
FDAAA 801 Violations
First posted
First submitted
First submitted that met QC criteria
Food and Drug Administration Amendments Act of 2007, Section 801 (FDAAA 801)
Funder type
Gender-based eligibility
Group/cohort
Human subjects protection review board
Inclusion criteria
Informed consent
Informed consent form (ICF)
Intervention model
Intervention/treatment
Interventional study (clinical trial)
Investigator
Last update posted
Last update submitted
Last update submitted that met QC criteria
Last verified
Listed location countries
Location terms
Masking
NCT number
No intervention arm
Observational study
Observational study model
Other adverse event
Other study IDs
Other terms
Outcome measure
Parallel assignment
Participant flow
Patient registry
Phase
Phase 1
Phase 2
Phase 3
Phase 4
Phase Not Applicable
Placebo
Placebo comparator arm
Primary completion date
Primary outcome measure
Primary purpose
Principal investigator (PI)
Protocol
Quality control (QC) review
Randomized allocation
Recruitment status
Registration
Removed location countries
Reporting group
Responsible party
Results database
Results delayed
Results first posted
Results first posted with QC comments
Results first submitted
Results first submitted that met QC criteria
Results returned after quality control review
Results submitted to ClinicalTrials.gov
Secondary outcome measure
Serious adverse event
Sex
Sham comparator arm
Single group assignment
Sort studies by
Sponsor
State
Statistical analysis plan (SAP)
Status
Study completion date
Study design
Study documents
Study IDs
Study record
Study registry
Study results
Study start date
Study type
Submitted date
Title
Title acronym
type of intervention
U.S. Agency for Healthcare Research and Quality (AHRQ)
U.S. Food and Drug Administration (FDA)
Unknown
U.S. flag
An official website of the United States government

Here's how you know
Skip to main page content
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
PRS Login
ClinicalTrials.gov return to the CTG homepage
Find Studies
Study Basics
Submit Studies
Data and API
Policy
About
My Saved Studies (0)
HomeFind StudiesConstructing Complex Search Queries
Constructing Complex Search Queries
On this page
Introduction
Search operators
Search terms
Search expressions
Introduction
This page explains the use of search operators, terms, syntax, and expressions to do an advanced search of study record data on ClinicalTrials.gov.

Search expressions consist of a sequence of terms and operators; the operators affect which studies are returned and how they are ordered in retrieval sets by changing how the search terms are contextualized or interpreted. Search terms are words or phrases that must appear as values in the study records returned by the search.

Search syntax refers to the arrangement of search terms and operators in search expressions used for evaluation by the search engine.

Search operators
In general, operator precedence (from highest to lowest) is as follows: search terms and source operators, the NOT operator and context operators, the AND operator, and the OR operator.

The following operator types are described in the sections below:

Boolean operators
Grouping operators
Context operators
Source operators
Scoring operators
Boolean operators
Boolean operators connect search terms and define their logical relationship.

Operator	Example	Description
OR	youth OR teen	A binary operator used to retrieve study records containing either the left or right subexpression, or both. The weighted score for determining rank order in retrieval sets will be higher when both the left and right subexpressions are present in a study record.
AND	heart AND attack	A binary operator used to retrieve study records containing both the left and right subexpressions.
NOT	bethesda NOT maryland	A unary operator that acts only on the right subexpression. It is used to retrieve study records that do not contain the right subexpression.
Grouping operators
Grouping operators group search terms or operators in a query.

Operator	Example	Description
" "	"back pain"	Forces a sequence of words to be treated as a phrase.
()	(acetaminophen OR aspirin) AND NOT (heart failure OR heart attack)	Used to increase operator precedence in a search expression.
Context operators
Context operators, which control how search terms are evaluated, are immediately followed by parameters in square brackets without any spaces. All context operators have the same precedence as the NOT operator and apply to the subexpression on their right, which immediately follows the right square bracket without a space in between.

Note that some combinations of the COVERAGE and EXPANSION operators function differently from classic ClinicalTrials.gov.

Operator	Example	Description	Default Setting
COVERAGE	COVERAGE[FullMatch]pain	Declares the degree to which a search term needs to match the text in an API field. There are four choices:
FullMatch—The search term must match all of the text in the field searched.
StartsWith—The search term must match the beginning of the text in the field searched.
EndsWith—The search term must match the end of the text in the field searched.
Contains—The search term must match part of the text in the field searched.
Defaults to Contains when the search expression does not include a COVERAGE operator.
EXPANSION *	EXPANSION[None]SLE	Declares the degree to which a search term may be expanded. There are five choices:
None—The term is searched for exactly as is. Case and accent marks are significant, but consecutive spaces are treated as a single space.
Term—Similar to None but includes simple lexical variants such as plurals, possessives, alternate spellings, and compound words; ignores case, hyphens, and accent marks.
Concept—Similar to Term but includes synonyms based on the Unified Medical Language System (UMLS). Also has a slight scoring penalty, ranking any records that include the search terms higher than records that include only synonyms.
Relaxation—Similar to Concept. Relaxes adjacency requirements so that partial terms are matches (e.g., a search for heart disease will return records with heart in one place and disease in another, as in the phrase "heart and lung disease"). Also has a significant scoring penalty, ranking any records that include the full search terms higher than records that include only partial terms.
Lossy—Similar to Relaxation but allows for missing partial terms (e.g., a search for heart disease will return records with heart but not disease and records with disease but not heart).
Defaults to Relaxation when the search expression does not include an EXPANSION operator.
AREA	AREA[InterventionName]aspirin	Declares which search area should be searched. Search areas are defined on the ClinicalTrials.gov Search Area page. In addition to specifying search areas, it is possible to specify a field from the study structure. Any field from the study structure is searchable.	 
SEARCH **	heart attack AND SEARCH[Location](AREA[LocationCity]Portland AND AREA[LocationState]Maine)	Declares which subsection of the study structure should be searched. For example, this operator can be used to search for a city and state within the same location (e.g. Portland, Maine), and exclude cities and states outside of that location (e.g. Portland, Oregon, and Augusta, Maine).	 
* The EXPANSION operator interacts with other operators as follows:

Enclosing a sequence of words in quotation marks forces those words to be treated as a phrase and gives the phrase higher precedence than EXPANSION. As such, a quoted phrase following EXPANSION[Relaxation] or EXPANSION[Lossy] is effectively the same as EXPANSION[Concept].
COVERAGE[FullMatch], COVERAGE[StartsWith], and COVERAGE[EndsWith] can be used only with EXPANSION[Concept], EXPANSION[Term], or EXPANSION[None].
** The SEARCH operator restricts search expressions to fields within a data element so that multiple pieces from that data element can be found together. For instance, the Location data element includes LocationCity, LocationState, LocationCountry, and LocationStatus. The SEARCH[Location] operator limits the search to the Location data element.

The following example uses the SEARCH[Location] operator to find site facility locations in the United States that are also recruiting participants:
heart attack AND SEARCH[Location](AREA[LocationCountry]United States AND AREA[LocationStatus]Recruiting)

In contrast, the following search expression, which does not use SEARCH[Location], would also return studies listing facility locations in the United States that are not recruiting and facility locations not in the United States that are recruiting:
heart attack AND AREA[LocationCountry]United States AND AREA[LocationStatus]Recruiting

Source operators
Source operators find studies, similar to search terms. All source operators have the same precedence as a search term.

Operator	Example	Description
MISSING	AREA[ResultsFirstPostDate]MISSING	Finds study records that have no values in the search area specified as a parameter.
RANGE	AREA[ResultsFirstPostDate]RANGE[01/01/2015, MAX]	Finds study records in the search area that have a value greater than or equal to the first parameter (e.g., 01/01/2015) and less than or equal to the second parameter (e.g. MAX) in the search area. Each search area (e.g., ResultsFirstPostedDate) has a specified ordering, as follows:
Text fields—Most are ordered alphabetically.
Fields containing numbers and dates—Ordered in ascending sequence.
Age fields—Special ordering to accommodate units and to treat 1 year as greater than 6 months.
Special RANGE operator values:
MIN—Use to indicate the smallest value of interest in the current search area.
MAX—Use to indicate the largest value of interest in the current search area.
Note: The RANGE operator will not retrieve study records with no values in the search area.
ALL	ALL	Retrieves all study records in the database.
Scoring operators
Scoring operators are used to adjust the rank order of search results by recency of dates or size of values.

Operator	Example	Description
TILT	TILT[StudyFirstPostDate]"heart attack"	Biases the scoring and rank ordering of study records in favor of the subexpression to the right by imposing a scoring penalty based on the ordering of API field values for the search area provided as a parameter (e.g., StudyFirstPostDate), with higher-ordered values having a lower penalty (e.g., more recent dates) than lower-ordered values (e.g., earlier dates). Use the TILT operator with API fields that are ordered, such as date fields.
Search terms
Search terms are words or phrases that must appear as values in the study records returned by the search. A search term consists of a string of characters without embedded search operators. Enclosing a multi-word term in quotation marks indicates that all of the words in the search term must be found together in that order (that is, as a phrase) for a study record to be retrieved by the search (see below).


Enlarge image
To search for an operator as part of a term, add a backslash before the operator (e.g., \MISSING). If the operator used is quotation marks, then only embedded quotes need to be preceded by a backslash (e.g., \"sleep deprivation"\).

Search expressions
A search expression consists of sequences of search terms and operators that are evaluated by the search engine to find lists of studies. The search operators affect which studies are returned by the search and their rank order in retrieval sets by changing how the search terms are contextualized or interpreted.

All search expressions are OR expressions.

Order of precedence among expressions
The order in which different types of search expressions are evaluated by the search engine is presented below from highest to lowest precedence. To increase the precedence of an expression, enclose that expression in parentheses.

Source expression.
Operator expression.
AND expression.
OR expression.
Source expression
A source expression consists of a search term, a range expression, an OR expression enclosed in parentheses, and either the MISSING or ALL source operator (see below). The MISSING operator can be used for Structure type fields.


Enlarge image
The following examples are all source expressions:

exhaustion
RANGE[21 years,MAX]
(exhaustion OR sleep deprivation)
MISSING
Range expression
A range expression consists of a RANGE operator with minimum and maximum values as parameters. Use MIN to indicate the smallest value of interest in the search area, and use MAX to indicate the largest value of interest in the search area (see below).


Enlarge image
Studies with no values in the search area will not be retrieved by a search that uses a range expression.

Operator expression
An operator expression consists of a sequence of one, or more unary operators (e.g., the NOT operator and all context operators), followed by a source expression. Any number of operator expressions may precede a source expression (see below).


Enlarge image
The TILT and AREA operators take search areas (labeled "Area" in the figure above) as a parameter. Note that the parameter is enclosed in square brackets, and there is no space between the operator and the left bracket.

The SEARCH operator takes either "Study" or "Location" as a parameter, as shown in the figure above.

The COVERAGE and EXPANSION operators take one of a small set of choices as a parameter (shown in the figure above). The COVERAGE operator takes Contains, FullMatch, StartsWith and EndsWith. EXPANSION[Concept] and EXPANSION[Relaxation] can be used in combination with COVERAGE[Contains]. EXPANSION[Lossy] cannot be used with a COVERAGE operator.

The following examples are all operator expressions that include source expressions:

exhaustion
NOT exhaustion
EXPANSION[Concept] NOT (exhaustion OR sleep deprivation)
heart attack AND SEARCH[Location](AREA[LocationCity] Bethesda AND AREA[LocationState] Maryland)
These unary operators have the second highest precedence after source expressions.

AND expression
An AND expression consists of a list of one or more operator expressions, separated by one, or many binary Boolean AND operators (see below).


Enlarge image
The following examples are all AND expressions that include operator expressions:

dizziness AND NOT exhaustion
dizziness AND NOT exhaustio AND stroke
The AND operator has the second lowest precedence among search operators. All operator expressions are evaluated before the AND expressions formed by connecting the operator expressions using AND operators.

OR expression
An OR expression consists of a list of one or more AND expressions (such as a search term or phrase) separated by binary Boolean OR operators (see below).


Enlarge image
The following examples are all OR expressions that include AND expressions:

heart attack OR stroke
heart attack OR stroke OR dizziness AND shortness of breath
The OR operator has the lowest precedence among search operators. All AND expressions are evaluated before the OR expressions formed by connecting the AND expressions using OR operators.

Last updated on April 30, 2024
About
About ClinicalTrials.gov
Release Notes
Site Map
Help
Give us feedback
Glossary
Customer Support
Legal
Disclaimer
Terms and Conditions
ClinicalTrials.gov logo
National Library of Medicine
8600 Rockville Pike, Bethesda, MD 20894
NIH National Library of Medicine, National Center for Biotechnology Information (opens in a new tab)
ClinicalTrials.gov

An official website of the U.S. Department of Health and Human Services, National Institutes of Health, National Library of Medicine, and National Center for Biotechnology Information.

About HHS
About NIH
About NLM
About NCBI
Accessibility support
FOIA requests
No FEAR Act data
Office of the Inspector General
Privacy policy
HHS Vulnerability Disclosure
Looking for U.S. government information and services?Visit USA.gov
Revision: v2.12.2

Tell us what you think!Close


openapi: "3.0.3"
info:
  title: "ClinicalTrials.gov REST API"
  description: "This API is made available to provide users meta data, statistics,\
    \ and the most recent version of the clinical trials available on ClinicalTrials.gov."
  version: "2.0.3"
tags:
- name: "Studies"
  description: "Related to clinical trial studies"
- name: "Stats"
  description: "Data statistics"
- name: "Version"
  description: "Version info"
servers:
- url: "https://clinicaltrials.gov/api/v2"
  description: "This server"
paths:
  /studies:
    get:
      summary: "Studies"
      description: "Returns data of studies matching query and filter parameters.\
        \ The studies are returned page by page.\nIf response contains `nextPageToken`,\
        \ use its value in `pageToken` to get next page.\nThe last page will not contain\
        \ `nextPageToken`. A page may have empty `studies` array.\nRequest for each\
        \ subsequent page **must** have the same parameters as for the first page,\
        \ except\n`countTotal`, `pageSize`, and `pageToken` parameters.\n\nIf neither\
        \ queries nor filters are set, all studies will be returned.\nIf any query\
        \ parameter contains only NCT IDs (comma- and/or space-separated), filters\
        \ are ignored.\n\n`query.*` parameters are in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\n\
        Those parameters affect ranking of studies, if sorted by relevance. See `sort`\
        \ parameter for details.\n\n`filter.*` and `postFilter.*` parameters have\
        \ same effect as there is no aggregation calculation. \nBoth are available\
        \ just to simplify applying parameters from search request.\nBoth do not affect\
        \ ranking of studies.\n\nNote: When trying JSON format in your browser, do\
        \ not set too large `pageSize` parameter, if `fields` is\nunlimited. That\
        \ may return too much data for the browser to parse and render."
      tags:
      - "Studies"
      operationId: "listStudies"
      parameters:
      - name: "format"
        in: "query"
        description: "Must be one of the following:\n* `csv`- return CSV table with\
          \ one page of study data; first page will contain header with column names;\
          \ available fields are listed on [CSV Download](/data-api/about-api/csv-download)\
          \ page\n* `json`- return JSON with one page of study data; every study object\
          \ is placed in a separate line; `markup` type fields format depends on `markupFormat`\
          \ parameter"
        required: false
        schema:
          type: "string"
          enum:
          - "csv"
          - "json"
          default: "json"
      - name: "markupFormat"
        in: "query"
        description: "Format of `markup` type fields:\n* `markdown`- [markdown](https://spec.commonmark.org/0.28/)\
          \ format\n* `legacy`- compatible with classic PRS\n\nApplicable only to\
          \ `json` format."
        required: false
        schema:
          type: "string"
          enum:
          - "markdown"
          - "legacy"
          default: "markdown"
      - name: "query.cond"
        in: "query"
        description: "\"Conditions or disease\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"ConditionSearch Area\" on [Search Areas](/data-api/about-api/search-areas#ConditionSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
        examples:
          example1:
            value: "lung cancer"
          example2:
            value: "(head OR neck) AND pain"
      - name: "query.term"
        in: "query"
        description: "\"Other terms\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"BasicSearch Area\" on [Search Areas](/data-api/about-api/search-areas#BasicSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
        examples:
          example1:
            value: "AREA[LastUpdatePostDate]RANGE[2023-01-15,MAX]"
      - name: "query.locn"
        in: "query"
        description: "\"Location terms\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"LocationSearch Area\" on [Search Areas](/data-api/about-api/search-areas#LocationSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "query.titles"
        in: "query"
        description: "\"Title / acronym\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"TitleSearch Area\" on [Search Areas](/data-api/about-api/search-areas#TitleSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "query.intr"
        in: "query"
        description: "\"Intervention / treatment\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"InterventionSearch Area\" on [Search Areas](/data-api/about-api/search-areas#InterventionSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "query.outc"
        in: "query"
        description: "\"Outcome measure\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"OutcomeSearch Area\" on [Search Areas](/data-api/about-api/search-areas#OutcomeSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "query.spons"
        in: "query"
        description: "\"Sponsor / collaborator\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"SponsorSearch Area\" on [Search Areas](/data-api/about-api/search-areas#SponsorSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "query.lead"
        in: "query"
        description: "Searches in \"LeadSponsorName\" field. See [Study Data Structure](/data-api/about-api/study-data-structure#LeadSponsorName)\
          \ for more details. The query is in [Essie expression syntax](/find-studies/constructing-complex-search-queries)."
        required: false
        schema:
          type: "string"
      - name: "query.id"
        in: "query"
        description: "\"Study IDs\" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries).\
          \ See \"IdSearch Area\" on [Search Areas](/data-api/about-api/search-areas#IdSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "query.patient"
        in: "query"
        description: "See \"PatientSearch Area\" on [Search Areas](/data-api/about-api/search-areas#PatientSearch)\
          \ for more details."
        required: false
        schema:
          type: "string"
      - name: "filter.overallStatus"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by comma- or pipe-separated list of statuses"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Status"
        examples:
          example1:
            value:
            - "NOT_YET_RECRUITING"
            - "RECRUITING"
          example2:
            value:
            - "COMPLETED"
      - name: "filter.geo"
        in: "query"
        description: "Filter by geo-function. Currently only distance function is\
          \ supported.\nFormat: `distance(latitude,longitude,distance)`"
        required: false
        schema:
          type: "string"
          pattern: "^distance\\(-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,\\d+(\\.\\d+)?(km|mi)?\\\
            )$"
        examples:
          example1:
            value: "distance(39.0035707,-77.1013313,50mi)"
      - name: "filter.ids"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by comma- or pipe-separated list of NCT IDs (a.k.a. ClinicalTrials.gov\
          \ identifiers).\nThe provided IDs will be searched in [NCTId](data-api/about-api/study-data-structure#NCTId)\
          \ and\n[NCTIdAlias](data-api/about-api/study-data-structure#NCTIdAlias)\
          \ fields."
        required: false
        schema:
          type: "array"
          items:
            type: "string"
            pattern: "^[Nn][Cc][Tt]0*[1-9]\\d{0,7}$"
        examples:
          example1:
            value:
            - "NCT04852770"
            - "NCT01728545"
            - "NCT02109302"
      - name: "filter.advanced"
        in: "query"
        description: "Filter by query in [Essie expression syntax](/find-studies/constructing-complex-search-queries)"
        required: false
        schema:
          type: "string"
        examples:
          example1:
            value: "AREA[StartDate]2022"
          example2:
            value: "AREA[MinimumAge]RANGE[MIN, 16 years] AND AREA[MaximumAge]RANGE[16\
              \ years, MAX]"
      - name: "filter.synonyms"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by comma- or pipe-separated list of `area`:`synonym_id`\
          \ pairs"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
        examples:
          example1:
            value:
            - "ConditionSearch:1651367"
            - "BasicSearch:2013558"
      - name: "postFilter.overallStatus"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by comma- or pipe-separated list of statuses"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/components/schemas/Status"
        examples:
          example1:
            value:
            - "NOT_YET_RECRUITING"
            - "RECRUITING"
          example2:
            value:
            - "COMPLETED"
      - name: "postFilter.geo"
        in: "query"
        description: "Filter by geo-function. Currently only distance function is\
          \ supported.\nFormat: `distance(latitude,longitude,distance)`"
        required: false
        schema:
          type: "string"
          pattern: "^distance\\(-?\\d+(\\.\\d+)?,-?\\d+(\\.\\d+)?,\\d+(\\.\\d+)?(km|mi)?\\\
            )$"
        examples:
          example1:
            value: "distance(39.0035707,-77.1013313,50mi)"
      - name: "postFilter.ids"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by comma- or pipe-separated list of NCT IDs (a.k.a. ClinicalTrials.gov\
          \ identifiers).\nThe provided IDs will be searched in [NCTId](data-api/about-api/study-data-structure#NCTId)\
          \ and\n[NCTIdAlias](data-api/about-api/study-data-structure#NCTIdAlias)\
          \ fields."
        required: false
        schema:
          type: "array"
          items:
            type: "string"
            pattern: "^[Nn][Cc][Tt]0*[1-9]\\d{0,7}$"
        examples:
          example1:
            value:
            - "NCT04852770"
            - "NCT01728545"
            - "NCT02109302"
      - name: "postFilter.advanced"
        in: "query"
        description: "Filter by query in [Essie expression syntax](/find-studies/constructing-complex-search-queries)"
        required: false
        schema:
          type: "string"
        examples:
          example1:
            value: "AREA[StartDate]2022"
          example2:
            value: "AREA[MinimumAge]RANGE[MIN, 16 years] AND AREA[MaximumAge]RANGE[16\
              \ years, MAX]"
      - name: "postFilter.synonyms"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by comma- or pipe-separated list of `area`:`synonym_id`\
          \ pairs"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
        examples:
          example1:
            value:
            - "ConditionSearch:1651367"
            - "BasicSearch:2013558"
      - name: "aggFilters"
        in: "query"
        description: "Apply aggregation filters, aggregation counts will not be provided.\n\
          The value is comma- or pipe-separated list of pairs `filter_id`:`space-separated\
          \ list of option keys` for the checked options."
        required: false
        schema:
          type: "string"
        examples:
          example1:
            value: "results:with,status:com"
          example2:
            value: "status:not rec,sex:f,healthy:y"
      - name: "geoDecay"
        in: "query"
        description: "Set proximity factor by distance from `filter.geo` location\
          \ to the closest [LocationGeoPoint](/data-api/about-api/study-data-structure#LocationGeoPoint)\
          \ of a study.\nIgnored, if `filter.geo` parameter is not set or response\
          \ contains more than 10,000 studies."
        required: false
        schema:
          type: "string"
          pattern: "^func:(gauss|exp|linear),scale:(\\d+(\\.\\d+)?(km|mi)),offset:(\\\
            d+(\\.\\d+)?(km|mi)),decay:(\\d+(\\.\\d+)?)$"
          default: "func:exp,scale:300mi,offset:0mi,decay:0.5"
        examples:
          example1:
            value: "func:linear,scale:100km,offset:10km,decay:0.1"
          example2:
            value: "func:gauss,scale:500mi,offset:0mi,decay:0.3"
      - name: "fields"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "If specified, must be non-empty comma- or pipe-separated list\
          \ of fields to return. If unspecified, all fields will be returned.\nOrder\
          \ of the fields does not matter.\n\nFor `csv` format, specify list of columns.\
          \ The column names are available on [CSV Download](/data-api/about-api/csv-download).\n\
          \nFor `json` format, every list item is either area name, piece name, field\
          \ name, or special name.\nIf a piece or a field is a branch node, all descendant\
          \ fields will be included.\nAll area names are available on [Search Areas](/data-api/about-api/search-areas),\n\
          the piece and field names — on [Data Structure](/data-api/about-api/study-data-structure)\
          \ and also can be retrieved at `/studies/metadata` endpoint.\nThere is a\
          \ special name, `@query`, which expands to all fields queried by search."
        required: false
        schema:
          type: "array"
          minItems: 1
          items:
            type: "string"
            pattern: "^([a-zA-Z][a-zA-Z0-9\\-. ]*)|(@query)$"
        examples:
          example1:
            value:
            - "NCTId"
            - "BriefTitle"
            - "OverallStatus"
            - "HasResults"
          example2:
            value: "ProtocolSection"
      - name: "sort"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Comma- or pipe-separated list of sorting options of the studies.\
          \ The returning studies are not sorted by default for a performance reason.\n\
          Every list item contains a field/piece name and an optional sort direction\
          \ (`asc` for ascending or `desc` for descending)\nafter colon character.\n\
          \nAll piece and field names can be found on [Data Structure](/data-api/about-api/study-data-structure)\
          \ and also can be retrieved\nat `/studies/metadata` endpoint. Currently,\
          \ only date and numeric fields are allowed for sorting.\nThere is a special\
          \ \"field\" `@relevance` to sort by relevance to a search query.\n\nStudies\
          \ missing sort field are always last. Default sort direction:\n* Date field\
          \ - `desc`\n* Numeric field - `asc`\n* `@relevance` - `desc`"
        required: false
        schema:
          type: "array"
          maxItems: 2
          default: []
          items:
            type: "string"
            pattern: "^(([a-zA-Z][a-zA-Z0-9\\-. ]*)|(@relevance))(:(asc|desc))?$"
        examples:
          example1:
            value:
            - "@relevance"
          example2:
            value:
            - "LastUpdatePostDate"
          example3:
            value:
            - "EnrollmentCount:desc"
            - "NumArmGroups"
      - name: "countTotal"
        in: "query"
        description: "Count total number of studies in all pages and return `totalCount`\
          \ field with first page, if `true`.\nFor CSV, the result can be found in\
          \ `x-total-count` response header.\nThe parameter is ignored for the subsequent\
          \ pages."
        required: false
        schema:
          type: "boolean"
          default: false
      - name: "pageSize"
        in: "query"
        description: "Page size is maximum number of studies to return in response.\
          \ It does not have to be the same for every page.\nIf not specified or set\
          \ to 0, the default value will be used. It will be coerced down to  1,000,\
          \ if greater than that."
        required: false
        schema:
          type: "integer"
          format: "int32"
          minimum: 0
          default: 10
        examples:
          example1:
            value: 2
          example2:
            value: 100
      - name: "pageToken"
        in: "query"
        description: "Token to get next page. Set it to a `nextPageToken` value returned\
          \ with the previous page in JSON format.\nFor CSV, it can be found in `x-next-page-token`\
          \ response header.\nDo not specify it for first page."
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedStudies"
              example:
                totalCount: 438897
                studies:
                - protocolSection:
                    identificationModule:
                      nctId: "NCT03540771"
                      briefTitle: "Introducing Palliative Care (PC) Within the Treatment\
                        \ of End Stage Liver Disease (ESLD)"
                    statusModule:
                      overallStatus: "RECRUITING"
                  hasResults: false
                - protocolSection:
                    identificationModule:
                      nctId: "NCT03630471"
                      briefTitle: "Effectiveness of a Problem-solving Intervention\
                        \ for Common Adolescent Mental Health Problems in India"
                    statusModule:
                      overallStatus: "COMPLETED"
                  hasResults: false
                - protocolSection:
                    identificationModule:
                      nctId: "NCT00587795"
                      briefTitle: "Orthopedic Study of the Aircast StabilAir Wrist\
                        \ Fracture Brace"
                    statusModule:
                      overallStatus: "TERMINATED"
                  hasResults: true
                nextPageToken: "abracadabra"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /studies/{nctId}:
    get:
      summary: "Single Study"
      description: "Returns data of a single study."
      tags:
      - "Studies"
      operationId: "fetchStudy"
      parameters:
      - name: "nctId"
        in: "path"
        description: "NCT Number of a study. If found in [NCTIdAlias](data-api/about-api/study-data-structure#NCTIdAlias)\
          \ field,\n301 HTTP redirect to the actual study will be returned."
        required: true
        schema:
          type: "string"
          pattern: "^[Nn][Cc][Tt]0*[1-9]\\d{0,7}$"
        examples:
          example1:
            value: "NCT00841061"
          example2:
            value: "NCT04000165"
      - name: "format"
        in: "query"
        description: "Must be one of the following:\n* `csv`- return CSV table; available\
          \ fields are listed on [CSV Download](/data-api/about-api/csv-download)\n\
          * `json`- return JSON object; format of `markup` fields depends on `markupFormat`\
          \ parameter\n* `json.zip`- put JSON object into a .json file and download\
          \ it as zip archive; field values of type `markup` are in [markdown](https://spec.commonmark.org/0.28/)\
          \ format\n* `fhir.json` - return FHIR JSON; fields are not customizable;\
          \ see [Access Data in FHIR](/data-api/fhir)\n* `ris`- return RIS record;\
          \ available tags are listed on [RIS Download](/data-api/about-api/ris-download)"
        required: false
        schema:
          type: "string"
          enum:
          - "csv"
          - "json"
          - "json.zip"
          - "fhir.json"
          - "ris"
          default: "json"
      - name: "markupFormat"
        in: "query"
        description: "Format of `markup` type fields:\n* `markdown`- [markdown](https://spec.commonmark.org/0.28/)\
          \ format\n* `legacy`- compatible with classic PRS\n\nApplicable only to\
          \ `json` format."
        required: false
        schema:
          type: "string"
          enum:
          - "markdown"
          - "legacy"
          default: "markdown"
      - name: "fields"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "If specified, must be non-empty comma- or pipe-separated list\
          \ of fields to return. If unspecified, all fields will be returned.\nOrder\
          \ of the fields does not matter.\n\nFor `csv` format, specify list of columns.\
          \ The column names are available on [CSV Download](/data-api/about-api/csv-download).\n\
          \nFor `json` and `json.zip` formats, every list item is either area name,\
          \ piece name, or field name.\nIf a piece or a field is a branch node, all\
          \ descendant fields will be included.\nAll area names are available on [Search\
          \ Areas](/data-api/about-api/search-areas),\nthe piece and field names -\
          \ on [Data Structure](/data-api/about-api/study-data-structure) and also\
          \ can be retrieved at `/studies/metadata` endpoint.\n\nFor `fhir.json` format,\
          \ all available fields are returned and this parameter must be unspecified.\n\
          \nFor `ris` format, specify list of tags. The tag names are available on\
          \ [RIS Download](/data-api/about-api/ris-download)."
        required: false
        schema:
          type: "array"
          minItems: 1
          items:
            type: "string"
            pattern: "^[a-zA-Z][a-zA-Z0-9\\-. ]*$"
        examples:
          example1:
            value:
            - "NCTId"
            - "BriefTitle"
            - "Reference"
          example2:
            value:
            - "ConditionsModule"
            - "EligibilityModule"
      responses:
        "200":
          description: "OK"
          content:
            text/csv:
              schema:
                $ref: "#/components/schemas/StudiesCsv"
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
            application/zip:
              schema:
                $ref: "#/components/schemas/StudiesZip"
            application/fhir+json:
              schema:
                $ref: "#/components/schemas/StudyFhir"
        "301":
          description: "Moved Permanently"
          content: {}
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /studies/metadata:
    get:
      summary: "Data Model Fields"
      description: "Returns study data model fields."
      tags:
      - "Studies"
      operationId: "studiesMetadata"
      parameters:
      - name: "includeIndexedOnly"
        in: "query"
        description: "Include indexed-only fields, if `true`"
        required: false
        schema:
          type: "boolean"
          default: false
      - name: "includeHistoricOnly"
        in: "query"
        description: "Include fields available only in historic data, if `true`"
        required: false
        schema:
          type: "boolean"
          default: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldNodeList"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /studies/search-areas:
    get:
      summary: "Search Areas"
      description: "Search Docs and their Search Areas."
      tags:
      - "Studies"
      operationId: "searchAreas"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDocumentList"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /studies/enums:
    get:
      summary: "Enums"
      description: "Returns enumeration types and their values.\n\nEvery item of the\
        \ returning array represents enum type and contains the following properties:\n\
        * `type` - enum type name\n* `pieces` - array of names of all data pieces\
        \ having the enum type\n* `values` - all available values of the enum; every\
        \ item contains the following properties:\n  * `value` - data value\n  * `legacyValue`\
        \ - data value in legacy API\n  * `exceptions` - map from data piece name\
        \ to legacy value when different from `legacyValue`\n    (some data pieces\
        \ had special enum values in legacy API)"
      tags:
      - "Studies"
      operationId: "enums"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnumInfoList"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /stats/size:
    get:
      summary: "Study Sizes"
      description: "Statistics of study JSON sizes."
      tags:
      - "Stats"
      operationId: "sizeStats"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GzipStats"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /stats/field/values:
    get:
      summary: "Field Values"
      description: "Value statistics of the study leaf fields."
      tags:
      - "Stats"
      operationId: "fieldValuesStats"
      parameters:
      - name: "types"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by field types"
        required: false
        schema:
          type: "array"
          default: []
          items:
            $ref: "#/components/schemas/FieldStatsType"
        examples:
          example1:
            value:
            - "ENUM"
            - "BOOLEAN"
          example2:
            value:
            - "INTEGER"
            - "NUMBER"
      - name: "fields"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by piece names or field paths of leaf fields.\nSee [Data\
          \ Structure](/data-api/about-api/study-data-structure) for the available\
          \ values.\n\nIf specified, must be non-empty comma- or pipe-separated list\
          \ of fields to return."
        required: false
        schema:
          type: "array"
          minItems: 1
          items:
            type: "string"
            pattern: "^[a-zA-Z][a-zA-Z0-9\\-. ]*$"
        examples:
          example1:
            value:
            - "Phase"
          example2:
            value:
            - "Condition"
            - "InterventionName"
          example3:
            value:
            - "protocolSection.armsInterventionsModule.armGroups.interventionNames"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldValuesStatsList"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /stats/field/sizes:
    get:
      summary: "List Field Sizes"
      description: "Sizes of list/array fields.\n\nTo search studies by a list field\
        \ size, use `AREA[FieldName:size]` search operator.\nFor example, [AREA\\\
        [Phase:size\\] 2](https://clinicaltrials.gov/search?term=AREA%5BPhase:size%5D%202)\n\
        query finds studies with 2 phases."
      tags:
      - "Stats"
      operationId: "listFieldSizesStats"
      parameters:
      - name: "fields"
        in: "query"
        style: "pipeDelimited"
        explode: false
        description: "Filter by piece names or field paths of leaf fields.\nSee [Data\
          \ Structure](/data-api/about-api/study-data-structure) for the available\
          \ values.\n\nIf specified, must be non-empty comma- or pipe-separated list\
          \ of fields to return.\nIf unspecified, all available stats will be returned."
        required: false
        schema:
          type: "array"
          items:
            type: "string"
            pattern: "^[a-zA-Z][a-zA-Z0-9\\-. ]*$"
            minLength: 1
        examples:
          example1:
            value:
            - "Phase"
          example2:
            value:
            - "Condition"
            - "Intervention"
          example3:
            value:
            - "protocolSection.armsInterventionsModule.armGroups.interventionNames"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSizesList"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
  /version:
    get:
      summary: "Version"
      description: "API and data versions.\n\nAPI version follows [Semantic Versioning\
        \ 2.0.0 Schema](https://semver.org/spec/v2.0.0.html).\nData version is UTC\
        \ timestamp in `yyyy-MM-dd'T'HH:mm:ss` format."
      tags:
      - "Version"
      operationId: "version"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/errorMessage"
components:
  schemas:
    FieldNode:
      type: "object"
      properties:
        altPieceNames:
          type: "array"
          items:
            type: "string"
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/FieldNode"
        dedLink:
          $ref: "#/components/schemas/WebLink"
        description:
          type: "string"
        historicOnly:
          type: "boolean"
        indexedOnly:
          type: "boolean"
        isEnum:
          type: "boolean"
        maxChars:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        nested:
          type: "boolean"
        piece:
          type: "string"
        rules:
          type: "string"
        sourceType:
          type: "string"
        synonyms:
          type: "boolean"
        title:
          type: "string"
        type:
          type: "string"
      additionalProperties: false
      required:
      - "name"
      - "piece"
      - "sourceType"
      - "type"
    WebLink:
      type: "object"
      properties:
        label:
          type: "string"
        url:
          type: "string"
      additionalProperties: false
      required:
      - "label"
      - "url"
    FieldNodeList:
      type: "array"
      items:
        $ref: "#/components/schemas/FieldNode"
    SearchDocument:
      type: "object"
      properties:
        areas:
          type: "array"
          items:
            $ref: "#/components/schemas/SearchArea"
        name:
          type: "string"
      additionalProperties: false
      required:
      - "areas"
      - "name"
    SearchArea:
      type: "object"
      properties:
        name:
          type: "string"
        param:
          type: "string"
        parts:
          type: "array"
          items:
            $ref: "#/components/schemas/SearchPart"
        uiLabel:
          type: "string"
      additionalProperties: false
      required:
      - "name"
      - "parts"
    SearchPart:
      type: "object"
      properties:
        isEnum:
          type: "boolean"
        isSynonyms:
          type: "boolean"
        pieces:
          type: "array"
          items:
            type: "string"
        type:
          type: "string"
        weight:
          type: "number"
          format: "float"
      additionalProperties: false
      required:
      - "isEnum"
      - "isSynonyms"
      - "pieces"
      - "type"
      - "weight"
    SearchDocumentList:
      type: "array"
      items:
        $ref: "#/components/schemas/SearchDocument"
    EnumInfo:
      type: "object"
      properties:
        pieces:
          type: "array"
          items:
            type: "string"
        type:
          type: "string"
        values:
          type: "array"
          items:
            $ref: "#/components/schemas/EnumItem"
      additionalProperties: false
      required:
      - "pieces"
      - "type"
      - "values"
    EnumItem:
      type: "object"
      properties:
        exceptions:
          type: "object"
        legacyValue:
          type: "string"
        value:
          type: "string"
      additionalProperties: false
      required:
      - "legacyValue"
      - "value"
    EnumInfoList:
      type: "array"
      items:
        $ref: "#/components/schemas/EnumInfo"
    GzipStats:
      type: "object"
      properties:
        averageSizeBytes:
          type: "integer"
          format: "int32"
        largestStudies:
          type: "array"
          items:
            $ref: "#/components/schemas/StudySize"
        percentiles:
          type: "object"
        ranges:
          type: "array"
          items:
            $ref: "#/components/schemas/DistItem"
        totalStudies:
          type: "integer"
          format: "int32"
      additionalProperties: false
      required:
      - "averageSizeBytes"
      - "largestStudies"
      - "percentiles"
      - "ranges"
      - "totalStudies"
    StudySize:
      type: "object"
      properties:
        id:
          type: "string"
        sizeBytes:
          type: "integer"
          format: "int32"
      additionalProperties: false
      required:
      - "id"
      - "sizeBytes"
    DistItem:
      type: "object"
      properties:
        sizeRange:
          type: "string"
        studiesCount:
          type: "integer"
          format: "int32"
      additionalProperties: false
      required:
      - "sizeRange"
      - "studiesCount"
    ListSizes:
      type: "object"
      properties:
        field:
          type: "string"
        maxSize:
          type: "integer"
        minSize:
          type: "integer"
        piece:
          type: "string"
        topSizes:
          type: "array"
          items:
            $ref: "#/components/schemas/ListSize"
        uniqueSizesCount:
          type: "integer"
          format: "int64"
      additionalProperties: false
      required:
      - "field"
      - "piece"
      - "uniqueSizesCount"
    ListSize:
      type: "object"
      properties:
        size:
          type: "integer"
        studiesCount:
          type: "integer"
          format: "int32"
      additionalProperties: false
      required:
      - "size"
      - "studiesCount"
    ListSizesList:
      type: "array"
      items:
        $ref: "#/components/schemas/ListSizes"
    EnumStats:
      type: "object"
      properties:
        field:
          type: "string"
        missingStudiesCount:
          type: "integer"
          format: "int32"
        piece:
          type: "string"
        topValues:
          type: "array"
          items:
            $ref: "#/components/schemas/ValueCount"
        type:
          $ref: "#/components/schemas/FieldStatsType"
        uniqueValuesCount:
          type: "integer"
          format: "int64"
      additionalProperties: false
      required:
      - "field"
      - "missingStudiesCount"
      - "piece"
      - "type"
      - "uniqueValuesCount"
    ValueCount:
      type: "object"
      properties:
        studiesCount:
          type: "integer"
          format: "int32"
        value:
          type: "string"
      additionalProperties: false
      required:
      - "studiesCount"
      - "value"
    FieldStatsType:
      type: "string"
      enum:
      - "ENUM"
      - "STRING"
      - "DATE"
      - "INTEGER"
      - "NUMBER"
      - "BOOLEAN"
    StringStats:
      type: "object"
      properties:
        field:
          type: "string"
        longest:
          $ref: "#/components/schemas/LongestString"
        missingStudiesCount:
          type: "integer"
          format: "int32"
        piece:
          type: "string"
        topValues:
          type: "array"
          items:
            $ref: "#/components/schemas/ValueCount"
        type:
          $ref: "#/components/schemas/FieldStatsType"
        uniqueValuesCount:
          type: "integer"
          format: "int64"
      additionalProperties: false
      required:
      - "field"
      - "missingStudiesCount"
      - "piece"
      - "type"
      - "uniqueValuesCount"
    LongestString:
      type: "object"
      properties:
        length:
          type: "integer"
          format: "int32"
        nctId:
          type: "string"
        value:
          type: "string"
      additionalProperties: false
      required:
      - "length"
      - "nctId"
      - "value"
    DateStats:
      type: "object"
      properties:
        field:
          type: "string"
        formats:
          type: "array"
          items:
            type: "string"
        max:
          type: "string"
        min:
          type: "string"
        missingStudiesCount:
          type: "integer"
          format: "int32"
        piece:
          type: "string"
        type:
          $ref: "#/components/schemas/FieldStatsType"
      additionalProperties: false
      required:
      - "field"
      - "formats"
      - "missingStudiesCount"
      - "piece"
      - "type"
    IntegerStats:
      type: "object"
      properties:
        avg:
          type: "number"
          format: "double"
        field:
          type: "string"
        max:
          type: "integer"
          format: "int64"
        min:
          type: "integer"
          format: "int64"
        missingStudiesCount:
          type: "integer"
          format: "int32"
        piece:
          type: "string"
        type:
          $ref: "#/components/schemas/FieldStatsType"
      additionalProperties: false
      required:
      - "field"
      - "missingStudiesCount"
      - "piece"
      - "type"
    NumberStats:
      type: "object"
      properties:
        avg:
          type: "number"
          format: "double"
        field:
          type: "string"
        max:
          type: "number"
          format: "double"
        min:
          type: "number"
          format: "double"
        missingStudiesCount:
          type: "integer"
          format: "int32"
        piece:
          type: "string"
        type:
          $ref: "#/components/schemas/FieldStatsType"
      additionalProperties: false
      required:
      - "field"
      - "missingStudiesCount"
      - "piece"
      - "type"
    BooleanStats:
      type: "object"
      properties:
        falseCount:
          type: "integer"
          format: "int32"
        field:
          type: "string"
        missingStudiesCount:
          type: "integer"
          format: "int32"
        piece:
          type: "string"
        trueCount:
          type: "integer"
          format: "int32"
        type:
          $ref: "#/components/schemas/FieldStatsType"
      additionalProperties: false
      required:
      - "falseCount"
      - "field"
      - "missingStudiesCount"
      - "piece"
      - "trueCount"
      - "type"
    Version:
      type: "object"
      properties:
        apiVersion:
          type: "string"
        dataTimestamp:
          type: "string"
      additionalProperties: false
      required:
      - "apiVersion"
    PagedStudies:
      type: "object"
      properties:
        nextPageToken:
          type: "string"
        studies:
          $ref: "#/components/schemas/StudyList"
        totalCount:
          type: "integer"
          format: "int32"
      additionalProperties: false
      required:
      - "studies"
    Study:
      type: "object"
      properties:
        protocolSection:
          $ref: "#/components/schemas/ProtocolSection"
        resultsSection:
          $ref: "#/components/schemas/ResultsSection"
        annotationSection:
          $ref: "#/components/schemas/AnnotationSection"
        documentSection:
          $ref: "#/components/schemas/DocumentSection"
        derivedSection:
          $ref: "#/components/schemas/DerivedSection"
        hasResults:
          type: "boolean"
    ProtocolSection:
      type: "object"
      properties:
        identificationModule:
          $ref: "#/components/schemas/IdentificationModule"
        statusModule:
          $ref: "#/components/schemas/StatusModule"
        sponsorCollaboratorsModule:
          $ref: "#/components/schemas/SponsorCollaboratorsModule"
        oversightModule:
          $ref: "#/components/schemas/OversightModule"
        descriptionModule:
          $ref: "#/components/schemas/DescriptionModule"
        conditionsModule:
          $ref: "#/components/schemas/ConditionsModule"
        designModule:
          $ref: "#/components/schemas/DesignModule"
        armsInterventionsModule:
          $ref: "#/components/schemas/ArmsInterventionsModule"
        outcomesModule:
          $ref: "#/components/schemas/OutcomesModule"
        eligibilityModule:
          $ref: "#/components/schemas/EligibilityModule"
        contactsLocationsModule:
          $ref: "#/components/schemas/ContactsLocationsModule"
        referencesModule:
          $ref: "#/components/schemas/ReferencesModule"
        ipdSharingStatementModule:
          $ref: "#/components/schemas/IpdSharingStatementModule"
    ResultsSection:
      type: "object"
      properties:
        participantFlowModule:
          $ref: "#/components/schemas/ParticipantFlowModule"
        baselineCharacteristicsModule:
          $ref: "#/components/schemas/BaselineCharacteristicsModule"
        outcomeMeasuresModule:
          $ref: "#/components/schemas/OutcomeMeasuresModule"
        adverseEventsModule:
          $ref: "#/components/schemas/AdverseEventsModule"
        moreInfoModule:
          $ref: "#/components/schemas/MoreInfoModule"
    AnnotationSection:
      type: "object"
      properties:
        annotationModule:
          $ref: "#/components/schemas/AnnotationModule"
    DocumentSection:
      type: "object"
      properties:
        largeDocumentModule:
          $ref: "#/components/schemas/LargeDocumentModule"
    DerivedSection:
      type: "object"
      properties:
        miscInfoModule:
          $ref: "#/components/schemas/MiscInfoModule"
        conditionBrowseModule:
          $ref: "#/components/schemas/BrowseModule"
        interventionBrowseModule:
          $ref: "#/components/schemas/BrowseModule"
    IdentificationModule:
      type: "object"
      properties:
        nctId:
          type: "string"
        nctIdAliases:
          type: "array"
          items:
            type: "string"
        orgStudyIdInfo:
          $ref: "#/components/schemas/OrgStudyIdInfo"
        secondaryIdInfos:
          type: "array"
          items:
            $ref: "#/components/schemas/SecondaryIdInfo"
        briefTitle:
          type: "string"
        officialTitle:
          type: "string"
        acronym:
          type: "string"
        organization:
          $ref: "#/components/schemas/Organization"
    StatusModule:
      type: "object"
      properties:
        statusVerifiedDate:
          $ref: "#/components/schemas/PartialDate"
        overallStatus:
          $ref: "#/components/schemas/Status"
        lastKnownStatus:
          $ref: "#/components/schemas/Status"
        delayedPosting:
          type: "boolean"
        whyStopped:
          type: "string"
        expandedAccessInfo:
          $ref: "#/components/schemas/ExpandedAccessInfo"
        startDateStruct:
          $ref: "#/components/schemas/PartialDateStruct"
        primaryCompletionDateStruct:
          $ref: "#/components/schemas/PartialDateStruct"
        completionDateStruct:
          $ref: "#/components/schemas/PartialDateStruct"
        studyFirstSubmitDate:
          type: "string"
          format: "date"
        studyFirstSubmitQcDate:
          type: "string"
          format: "date"
        studyFirstPostDateStruct:
          $ref: "#/components/schemas/DateStruct"
        resultsWaived:
          type: "boolean"
        resultsFirstSubmitDate:
          type: "string"
          format: "date"
        resultsFirstSubmitQcDate:
          type: "string"
          format: "date"
        resultsFirstPostDateStruct:
          $ref: "#/components/schemas/DateStruct"
        dispFirstSubmitDate:
          type: "string"
          format: "date"
        dispFirstSubmitQcDate:
          type: "string"
          format: "date"
        dispFirstPostDateStruct:
          $ref: "#/components/schemas/DateStruct"
        lastUpdateSubmitDate:
          type: "string"
          format: "date"
        lastUpdatePostDateStruct:
          $ref: "#/components/schemas/DateStruct"
    SponsorCollaboratorsModule:
      type: "object"
      properties:
        responsibleParty:
          $ref: "#/components/schemas/ResponsibleParty"
        leadSponsor:
          $ref: "#/components/schemas/Sponsor"
        collaborators:
          type: "array"
          items:
            $ref: "#/components/schemas/Sponsor"
    OversightModule:
      type: "object"
      properties:
        oversightHasDmc:
          type: "boolean"
        isFdaRegulatedDrug:
          type: "boolean"
        isFdaRegulatedDevice:
          type: "boolean"
        isUnapprovedDevice:
          type: "boolean"
        isPpsd:
          type: "boolean"
        isUsExport:
          type: "boolean"
        fdaaa801Violation:
          type: "boolean"
    DescriptionModule:
      type: "object"
      properties:
        briefSummary:
          type: "string"
        detailedDescription:
          type: "string"
    ConditionsModule:
      type: "object"
      properties:
        conditions:
          type: "array"
          items:
            type: "string"
        keywords:
          type: "array"
          items:
            type: "string"
    DesignModule:
      type: "object"
      properties:
        studyType:
          $ref: "#/components/schemas/StudyType"
        nPtrsToThisExpAccNctId:
          type: "number"
        expandedAccessTypes:
          $ref: "#/components/schemas/ExpandedAccessTypes"
        patientRegistry:
          type: "boolean"
        targetDuration:
          type: "string"
          pattern: "^\\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$"
        phases:
          type: "array"
          items:
            $ref: "#/components/schemas/Phase"
        designInfo:
          $ref: "#/components/schemas/DesignInfo"
        bioSpec:
          $ref: "#/components/schemas/BioSpec"
        enrollmentInfo:
          $ref: "#/components/schemas/EnrollmentInfo"
    ArmsInterventionsModule:
      type: "object"
      properties:
        armGroups:
          type: "array"
          items:
            $ref: "#/components/schemas/ArmGroup"
        interventions:
          type: "array"
          items:
            $ref: "#/components/schemas/Intervention"
    OutcomesModule:
      type: "object"
      properties:
        primaryOutcomes:
          type: "array"
          items:
            $ref: "#/components/schemas/Outcome"
        secondaryOutcomes:
          type: "array"
          items:
            $ref: "#/components/schemas/Outcome"
        otherOutcomes:
          type: "array"
          items:
            $ref: "#/components/schemas/Outcome"
    EligibilityModule:
      type: "object"
      properties:
        eligibilityCriteria:
          type: "string"
        healthyVolunteers:
          type: "boolean"
        sex:
          $ref: "#/components/schemas/Sex"
        genderBased:
          type: "boolean"
        genderDescription:
          type: "string"
        minimumAge:
          type: "string"
          pattern: "^\\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$"
        maximumAge:
          type: "string"
          pattern: "^\\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$"
        stdAges:
          type: "array"
          items:
            $ref: "#/components/schemas/StandardAge"
        studyPopulation:
          type: "string"
        samplingMethod:
          $ref: "#/components/schemas/SamplingMethod"
    ContactsLocationsModule:
      type: "object"
      properties:
        centralContacts:
          type: "array"
          items:
            $ref: "#/components/schemas/Contact"
        overallOfficials:
          type: "array"
          items:
            $ref: "#/components/schemas/Official"
        locations:
          type: "array"
          items:
            $ref: "#/components/schemas/Location"
    ReferencesModule:
      type: "object"
      properties:
        references:
          type: "array"
          items:
            $ref: "#/components/schemas/Reference"
        seeAlsoLinks:
          type: "array"
          items:
            $ref: "#/components/schemas/SeeAlsoLink"
        availIpds:
          type: "array"
          items:
            $ref: "#/components/schemas/AvailIpd"
    OutcomeMeasuresModule:
      type: "object"
      properties:
        outcomeMeasures:
          type: "array"
          items:
            $ref: "#/components/schemas/OutcomeMeasure"
    MoreInfoModule:
      type: "object"
      properties:
        limitationsAndCaveats:
          $ref: "#/components/schemas/LimitationsAndCaveats"
        certainAgreement:
          $ref: "#/components/schemas/CertainAgreement"
        pointOfContact:
          $ref: "#/components/schemas/PointOfContact"
    AnnotationModule:
      type: "object"
      properties:
        unpostedAnnotation:
          $ref: "#/components/schemas/UnpostedAnnotation"
        violationAnnotation:
          $ref: "#/components/schemas/ViolationAnnotation"
    MiscInfoModule:
      type: "object"
      properties:
        versionHolder:
          type: "string"
          format: "date"
        removedCountries:
          type: "array"
          items:
            type: "string"
        submissionTracking:
          $ref: "#/components/schemas/SubmissionTracking"
    UnpostedAnnotation:
      type: "object"
      properties:
        unpostedResponsibleParty:
          type: "string"
        unpostedEvents:
          type: "array"
          items:
            $ref: "#/components/schemas/UnpostedEvent"
    ViolationAnnotation:
      type: "object"
      properties:
        violationEvents:
          type: "array"
          items:
            $ref: "#/components/schemas/ViolationEvent"
    SubmissionTracking:
      type: "object"
      properties:
        estimatedResultsFirstSubmitDate:
          type: "string"
          format: "date"
        firstMcpInfo:
          $ref: "#/components/schemas/FirstMcpInfo"
        submissionInfos:
          type: "array"
          items:
            $ref: "#/components/schemas/SubmissionInfo"
    ModelPredictions:
      type: "object"
    BmiLimits:
      type: "object"
    EnrollmentInfo:
      type: "object"
      properties:
        count:
          type: "integer"
        type:
          $ref: "#/components/schemas/EnrollmentType"
    BioSpec:
      type: "object"
      properties:
        retention:
          $ref: "#/components/schemas/BioSpecRetention"
        description:
          type: "string"
    SeeAlsoLink:
      type: "object"
      properties:
        label:
          type: "string"
        url:
          type: "string"
    FirstMcpInfo:
      type: "object"
      properties:
        postDateStruct:
          $ref: "#/components/schemas/DateStruct"
    ExpandedAccessTypes:
      type: "object"
      properties:
        individual:
          type: "boolean"
        intermediate:
          type: "boolean"
        treatment:
          type: "boolean"
    Intervention:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/InterventionType"
        name:
          type: "string"
        description:
          type: "string"
        armGroupLabels:
          type: "array"
          items:
            type: "string"
        otherNames:
          type: "array"
          items:
            type: "string"
    SecondaryIdInfo:
      type: "object"
      properties:
        id:
          type: "string"
        type:
          $ref: "#/components/schemas/SecondaryIdType"
        domain:
          type: "string"
        link:
          type: "string"
    AvailIpd:
      type: "object"
      properties:
        id:
          type: "string"
        type:
          type: "string"
        url:
          type: "string"
        comment:
          type: "string"
    LimitationsAndCaveats:
      type: "object"
      properties:
        description:
          type: "string"
    DateStruct:
      type: "object"
      properties:
        date:
          type: "string"
          format: "date"
        type:
          $ref: "#/components/schemas/DateType"
    SubmissionInfo:
      type: "object"
      properties:
        releaseDate:
          type: "string"
          format: "date"
        unreleaseDate:
          type: "string"
          format: "date"
        unreleaseDateUnknown:
          type: "boolean"
        resetDate:
          type: "string"
          format: "date"
        mcpReleaseN:
          type: "integer"
    ExpandedAccessInfo:
      type: "object"
      properties:
        hasExpandedAccess:
          type: "boolean"
        nctId:
          type: "string"
        statusForNctId:
          $ref: "#/components/schemas/ExpandedAccessStatus"
    AdverseEventsModule:
      type: "object"
      properties:
        frequencyThreshold:
          type: "string"
        timeFrame:
          type: "string"
        description:
          type: "string"
        allCauseMortalityComment:
          type: "string"
        eventGroups:
          type: "array"
          items:
            $ref: "#/components/schemas/EventGroup"
        seriousEvents:
          type: "array"
          items:
            $ref: "#/components/schemas/AdverseEvent"
        otherEvents:
          type: "array"
          items:
            $ref: "#/components/schemas/AdverseEvent"
    ViolationEvent:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/ViolationEventType"
        description:
          type: "string"
        creationDate:
          type: "string"
          format: "date"
        issuedDate:
          type: "string"
          format: "date"
        releaseDate:
          type: "string"
          format: "date"
        postedDate:
          type: "string"
          format: "date"
    ArmGroup:
      type: "object"
      properties:
        label:
          type: "string"
        type:
          $ref: "#/components/schemas/ArmGroupType"
        description:
          type: "string"
        interventionNames:
          type: "array"
          items:
            type: "string"
    DesignInfo:
      type: "object"
      properties:
        allocation:
          $ref: "#/components/schemas/DesignAllocation"
        interventionModel:
          $ref: "#/components/schemas/InterventionalAssignment"
        interventionModelDescription:
          type: "string"
        primaryPurpose:
          $ref: "#/components/schemas/PrimaryPurpose"
        observationalModel:
          $ref: "#/components/schemas/ObservationalModel"
        timePerspective:
          $ref: "#/components/schemas/DesignTimePerspective"
        maskingInfo:
          $ref: "#/components/schemas/MaskingBlock"
    Organization:
      type: "object"
      properties:
        fullName:
          type: "string"
        class:
          $ref: "#/components/schemas/AgencyClass"
    PointOfContact:
      type: "object"
      properties:
        title:
          type: "string"
        organization:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        phoneExt:
          type: "string"
    IpdSharingStatementModule:
      type: "object"
      properties:
        ipdSharing:
          $ref: "#/components/schemas/IpdSharing"
        description:
          type: "string"
        infoTypes:
          type: "array"
          items:
            $ref: "#/components/schemas/IpdSharingInfoType"
        timeFrame:
          type: "string"
        accessCriteria:
          type: "string"
        url:
          type: "string"
    OrgStudyIdInfo:
      type: "object"
      properties:
        id:
          type: "string"
        type:
          $ref: "#/components/schemas/OrgStudyIdType"
        link:
          type: "string"
    ResponsibleParty:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/ResponsiblePartyType"
        investigatorFullName:
          type: "string"
        investigatorTitle:
          type: "string"
        investigatorAffiliation:
          type: "string"
        oldNameTitle:
          type: "string"
        oldOrganization:
          type: "string"
    CertainAgreement:
      type: "object"
      properties:
        piSponsorEmployee:
          type: "boolean"
        restrictionType:
          $ref: "#/components/schemas/AgreementRestrictionType"
        restrictiveAgreement:
          type: "boolean"
        otherDetails:
          type: "string"
    UnpostedEvent:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/UnpostedEventType"
        date:
          type: "string"
          format: "date"
        dateUnknown:
          type: "boolean"
    Contact:
      type: "object"
      properties:
        name:
          type: "string"
        role:
          $ref: "#/components/schemas/ContactRole"
        phone:
          type: "string"
        phoneExt:
          type: "string"
        email:
          type: "string"
    PartialDateStruct:
      type: "object"
      properties:
        date:
          $ref: "#/components/schemas/PartialDate"
        type:
          $ref: "#/components/schemas/DateType"
    Outcome:
      type: "object"
      properties:
        measure:
          type: "string"
        description:
          type: "string"
        timeFrame:
          type: "string"
    OutcomeMeasure:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/OutcomeMeasureType"
        title:
          type: "string"
        description:
          type: "string"
        populationDescription:
          type: "string"
        reportingStatus:
          $ref: "#/components/schemas/ReportingStatus"
        anticipatedPostingDate:
          $ref: "#/components/schemas/PartialDate"
        paramType:
          $ref: "#/components/schemas/MeasureParam"
        dispersionType:
          type: "string"
        unitOfMeasure:
          type: "string"
        calculatePct:
          type: "boolean"
        timeFrame:
          type: "string"
        typeUnitsAnalyzed:
          type: "string"
        denomUnitsSelected:
          type: "string"
        groups:
          type: "array"
          items:
            $ref: "#/components/schemas/MeasureGroup"
        denoms:
          type: "array"
          items:
            $ref: "#/components/schemas/Denom"
        classes:
          type: "array"
          items:
            $ref: "#/components/schemas/MeasureClass"
        analyses:
          type: "array"
          items:
            $ref: "#/components/schemas/MeasureAnalysis"
    BaselineCharacteristicsModule:
      type: "object"
      properties:
        populationDescription:
          type: "string"
        typeUnitsAnalyzed:
          type: "string"
        groups:
          type: "array"
          items:
            $ref: "#/components/schemas/MeasureGroup"
        denoms:
          type: "array"
          items:
            $ref: "#/components/schemas/Denom"
        measures:
          type: "array"
          items:
            $ref: "#/components/schemas/BaselineMeasure"
    Reference:
      type: "object"
      properties:
        pmid:
          type: "string"
        type:
          $ref: "#/components/schemas/ReferenceType"
        citation:
          type: "string"
        retractions:
          type: "array"
          items:
            $ref: "#/components/schemas/Retraction"
    ParticipantFlowModule:
      type: "object"
      properties:
        preAssignmentDetails:
          type: "string"
        recruitmentDetails:
          type: "string"
        typeUnitsAnalyzed:
          type: "string"
        groups:
          type: "array"
          items:
            $ref: "#/components/schemas/FlowGroup"
        periods:
          type: "array"
          items:
            $ref: "#/components/schemas/FlowPeriod"
    LargeDocumentModule:
      type: "object"
      properties:
        noSap:
          type: "boolean"
        largeDocs:
          type: "array"
          items:
            $ref: "#/components/schemas/LargeDoc"
    Location:
      type: "object"
      properties:
        facility:
          type: "string"
        status:
          $ref: "#/components/schemas/RecruitmentStatus"
        city:
          type: "string"
        state:
          type: "string"
        zip:
          type: "string"
        country:
          type: "string"
        contacts:
          type: "array"
          items:
            $ref: "#/components/schemas/Contact"
        countryCode:
          type: "string"
        geoPoint:
          $ref: "#/components/schemas/GeoPoint"
    Sponsor:
      type: "object"
      properties:
        name:
          type: "string"
        class:
          $ref: "#/components/schemas/AgencyClass"
    BrowseModule:
      type: "object"
      properties:
        meshes:
          type: "array"
          items:
            $ref: "#/components/schemas/Mesh"
        ancestors:
          type: "array"
          items:
            $ref: "#/components/schemas/Mesh"
        browseLeaves:
          type: "array"
          items:
            $ref: "#/components/schemas/BrowseLeaf"
        browseBranches:
          type: "array"
          items:
            $ref: "#/components/schemas/BrowseBranch"
    Official:
      type: "object"
      properties:
        name:
          type: "string"
        affiliation:
          type: "string"
        role:
          $ref: "#/components/schemas/OfficialRole"
    BrowseLeaf:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        asFound:
          type: "string"
        relevance:
          $ref: "#/components/schemas/BrowseLeafRelevance"
    MaskingBlock:
      type: "object"
      properties:
        masking:
          $ref: "#/components/schemas/DesignMasking"
        maskingDescription:
          type: "string"
        whoMasked:
          type: "array"
          items:
            $ref: "#/components/schemas/WhoMasked"
    EventGroup:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        deathsNumAffected:
          type: "integer"
        deathsNumAtRisk:
          type: "integer"
        seriousNumAffected:
          type: "integer"
        seriousNumAtRisk:
          type: "integer"
        otherNumAffected:
          type: "integer"
        otherNumAtRisk:
          type: "integer"
    Mesh:
      type: "object"
      properties:
        id:
          type: "string"
        term:
          type: "string"
    FlowGroup:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
    MeasureAnalysis:
      type: "object"
      properties:
        paramType:
          type: "string"
        paramValue:
          type: "string"
        dispersionType:
          $ref: "#/components/schemas/AnalysisDispersionType"
        dispersionValue:
          type: "string"
        statisticalMethod:
          type: "string"
        statisticalComment:
          type: "string"
        pValue:
          type: "string"
        pValueComment:
          type: "string"
        ciNumSides:
          $ref: "#/components/schemas/ConfidenceIntervalNumSides"
        ciPctValue:
          type: "string"
        ciLowerLimit:
          type: "string"
        ciUpperLimit:
          type: "string"
        ciLowerLimitComment:
          type: "string"
        ciUpperLimitComment:
          type: "string"
        estimateComment:
          type: "string"
        testedNonInferiority:
          type: "boolean"
        nonInferiorityType:
          $ref: "#/components/schemas/NonInferiorityType"
        nonInferiorityComment:
          type: "string"
        otherAnalysisDescription:
          type: "string"
        groupDescription:
          type: "string"
        groupIds:
          type: "array"
          items:
            type: "string"
    AdverseEvent:
      type: "object"
      properties:
        term:
          type: "string"
        organSystem:
          type: "string"
        sourceVocabulary:
          type: "string"
        assessmentType:
          $ref: "#/components/schemas/EventAssessment"
        notes:
          type: "string"
        stats:
          type: "array"
          items:
            $ref: "#/components/schemas/EventStats"
    Retraction:
      type: "object"
      properties:
        pmid:
          type: "string"
        source:
          type: "string"
    Denom:
      type: "object"
      properties:
        units:
          type: "string"
        counts:
          type: "array"
          items:
            $ref: "#/components/schemas/DenomCount"
    FlowPeriod:
      type: "object"
      properties:
        title:
          type: "string"
        milestones:
          type: "array"
          items:
            $ref: "#/components/schemas/FlowMilestone"
        dropWithdraws:
          type: "array"
          items:
            $ref: "#/components/schemas/DropWithdraw"
    MeasureGroup:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
    MeasureClass:
      type: "object"
      properties:
        title:
          type: "string"
        denoms:
          type: "array"
          items:
            $ref: "#/components/schemas/Denom"
        categories:
          type: "array"
          items:
            $ref: "#/components/schemas/MeasureCategory"
    BrowseBranch:
      type: "object"
      properties:
        abbrev:
          type: "string"
        name:
          type: "string"
    BaselineMeasure:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
        populationDescription:
          type: "string"
        paramType:
          $ref: "#/components/schemas/MeasureParam"
        dispersionType:
          $ref: "#/components/schemas/MeasureDispersionType"
        unitOfMeasure:
          type: "string"
        calculatePct:
          type: "boolean"
        denomUnitsSelected:
          type: "string"
        denoms:
          type: "array"
          items:
            $ref: "#/components/schemas/Denom"
        classes:
          type: "array"
          items:
            $ref: "#/components/schemas/MeasureClass"
    LargeDoc:
      type: "object"
      properties:
        typeAbbrev:
          type: "string"
        hasProtocol:
          type: "boolean"
        hasSap:
          type: "boolean"
        hasIcf:
          type: "boolean"
        label:
          type: "string"
        date:
          type: "string"
          format: "date"
        uploadDate:
          $ref: "#/components/schemas/DateTimeMinutes"
        filename:
          type: "string"
        size:
          type: "integer"
    DropWithdraw:
      type: "object"
      properties:
        type:
          type: "string"
        comment:
          type: "string"
        reasons:
          type: "array"
          items:
            $ref: "#/components/schemas/FlowStats"
    DenomCount:
      type: "object"
      properties:
        groupId:
          type: "string"
        value:
          type: "string"
    EventStats:
      type: "object"
      properties:
        groupId:
          type: "string"
        numEvents:
          type: "integer"
        numAffected:
          type: "integer"
        numAtRisk:
          type: "integer"
    MeasureCategory:
      type: "object"
      properties:
        title:
          type: "string"
        measurements:
          type: "array"
          items:
            $ref: "#/components/schemas/Measurement"
    FlowMilestone:
      type: "object"
      properties:
        type:
          type: "string"
        comment:
          type: "string"
        achievements:
          type: "array"
          items:
            $ref: "#/components/schemas/FlowStats"
    FlowStats:
      type: "object"
      properties:
        groupId:
          type: "string"
        comment:
          type: "string"
        numSubjects:
          type: "string"
        numUnits:
          type: "string"
    Measurement:
      type: "object"
      properties:
        groupId:
          type: "string"
        value:
          type: "string"
        spread:
          type: "string"
        lowerLimit:
          type: "string"
        upperLimit:
          type: "string"
        comment:
          type: "string"
    Status:
      type: "string"
      enum:
      - "ACTIVE_NOT_RECRUITING"
      - "COMPLETED"
      - "ENROLLING_BY_INVITATION"
      - "NOT_YET_RECRUITING"
      - "RECRUITING"
      - "SUSPENDED"
      - "TERMINATED"
      - "WITHDRAWN"
      - "AVAILABLE"
      - "NO_LONGER_AVAILABLE"
      - "TEMPORARILY_NOT_AVAILABLE"
      - "APPROVED_FOR_MARKETING"
      - "WITHHELD"
      - "UNKNOWN"
    StudyType:
      type: "string"
      enum:
      - "EXPANDED_ACCESS"
      - "INTERVENTIONAL"
      - "OBSERVATIONAL"
    Phase:
      type: "string"
      enum:
      - "NA"
      - "EARLY_PHASE1"
      - "PHASE1"
      - "PHASE2"
      - "PHASE3"
      - "PHASE4"
    Sex:
      type: "string"
      enum:
      - "FEMALE"
      - "MALE"
      - "ALL"
    StandardAge:
      type: "string"
      enum:
      - "CHILD"
      - "ADULT"
      - "OLDER_ADULT"
    SamplingMethod:
      type: "string"
      enum:
      - "PROBABILITY_SAMPLE"
      - "NON_PROBABILITY_SAMPLE"
    IpdSharing:
      type: "string"
      enum:
      - "YES"
      - "NO"
      - "UNDECIDED"
    IpdSharingInfoType:
      type: "string"
      enum:
      - "STUDY_PROTOCOL"
      - "SAP"
      - "ICF"
      - "CSR"
      - "ANALYTIC_CODE"
    OrgStudyIdType:
      type: "string"
      enum:
      - "NIH"
      - "FDA"
      - "VA"
      - "CDC"
      - "AHRQ"
      - "SAMHSA"
    SecondaryIdType:
      type: "string"
      enum:
      - "NIH"
      - "FDA"
      - "VA"
      - "CDC"
      - "AHRQ"
      - "SAMHSA"
      - "OTHER_GRANT"
      - "EUDRACT_NUMBER"
      - "CTIS"
      - "REGISTRY"
      - "OTHER"
    AgencyClass:
      type: "string"
      enum:
      - "NIH"
      - "FED"
      - "OTHER_GOV"
      - "INDIV"
      - "INDUSTRY"
      - "NETWORK"
      - "AMBIG"
      - "OTHER"
      - "UNKNOWN"
    ExpandedAccessStatus:
      type: "string"
      enum:
      - "AVAILABLE"
      - "NO_LONGER_AVAILABLE"
      - "TEMPORARILY_NOT_AVAILABLE"
      - "APPROVED_FOR_MARKETING"
    DateType:
      type: "string"
      enum:
      - "ACTUAL"
      - "ESTIMATED"
    ResponsiblePartyType:
      type: "string"
      enum:
      - "SPONSOR"
      - "PRINCIPAL_INVESTIGATOR"
      - "SPONSOR_INVESTIGATOR"
    DesignAllocation:
      type: "string"
      enum:
      - "RANDOMIZED"
      - "NON_RANDOMIZED"
      - "NA"
    InterventionalAssignment:
      type: "string"
      enum:
      - "SINGLE_GROUP"
      - "PARALLEL"
      - "CROSSOVER"
      - "FACTORIAL"
      - "SEQUENTIAL"
    PrimaryPurpose:
      type: "string"
      enum:
      - "TREATMENT"
      - "PREVENTION"
      - "DIAGNOSTIC"
      - "ECT"
      - "SUPPORTIVE_CARE"
      - "SCREENING"
      - "HEALTH_SERVICES_RESEARCH"
      - "BASIC_SCIENCE"
      - "DEVICE_FEASIBILITY"
      - "OTHER"
    ObservationalModel:
      type: "string"
      enum:
      - "COHORT"
      - "CASE_CONTROL"
      - "CASE_ONLY"
      - "CASE_CROSSOVER"
      - "ECOLOGIC_OR_COMMUNITY"
      - "FAMILY_BASED"
      - "DEFINED_POPULATION"
      - "NATURAL_HISTORY"
      - "OTHER"
    DesignTimePerspective:
      type: "string"
      enum:
      - "RETROSPECTIVE"
      - "PROSPECTIVE"
      - "CROSS_SECTIONAL"
      - "OTHER"
    BioSpecRetention:
      type: "string"
      enum:
      - "NONE_RETAINED"
      - "SAMPLES_WITH_DNA"
      - "SAMPLES_WITHOUT_DNA"
    EnrollmentType:
      type: "string"
      enum:
      - "ACTUAL"
      - "ESTIMATED"
    ArmGroupType:
      type: "string"
      enum:
      - "EXPERIMENTAL"
      - "ACTIVE_COMPARATOR"
      - "PLACEBO_COMPARATOR"
      - "SHAM_COMPARATOR"
      - "NO_INTERVENTION"
      - "OTHER"
    InterventionType:
      type: "string"
      enum:
      - "BEHAVIORAL"
      - "BIOLOGICAL"
      - "COMBINATION_PRODUCT"
      - "DEVICE"
      - "DIAGNOSTIC_TEST"
      - "DIETARY_SUPPLEMENT"
      - "DRUG"
      - "GENETIC"
      - "PROCEDURE"
      - "RADIATION"
      - "OTHER"
    ContactRole:
      type: "string"
      enum:
      - "STUDY_CHAIR"
      - "STUDY_DIRECTOR"
      - "PRINCIPAL_INVESTIGATOR"
      - "SUB_INVESTIGATOR"
      - "CONTACT"
    OfficialRole:
      type: "string"
      enum:
      - "STUDY_CHAIR"
      - "STUDY_DIRECTOR"
      - "PRINCIPAL_INVESTIGATOR"
      - "SUB_INVESTIGATOR"
    RecruitmentStatus:
      type: "string"
      enum:
      - "ACTIVE_NOT_RECRUITING"
      - "COMPLETED"
      - "ENROLLING_BY_INVITATION"
      - "NOT_YET_RECRUITING"
      - "RECRUITING"
      - "SUSPENDED"
      - "TERMINATED"
      - "WITHDRAWN"
      - "AVAILABLE"
    ReferenceType:
      type: "string"
      enum:
      - "BACKGROUND"
      - "RESULT"
      - "DERIVED"
    MeasureParam:
      type: "string"
      enum:
      - "GEOMETRIC_MEAN"
      - "GEOMETRIC_LEAST_SQUARES_MEAN"
      - "LEAST_SQUARES_MEAN"
      - "LOG_MEAN"
      - "MEAN"
      - "MEDIAN"
      - "NUMBER"
      - "COUNT_OF_PARTICIPANTS"
      - "COUNT_OF_UNITS"
    MeasureDispersionType:
      type: "string"
      enum:
      - "NA"
      - "STANDARD_DEVIATION"
      - "STANDARD_ERROR"
      - "INTER_QUARTILE_RANGE"
      - "FULL_RANGE"
      - "CONFIDENCE_80"
      - "CONFIDENCE_90"
      - "CONFIDENCE_95"
      - "CONFIDENCE_975"
      - "CONFIDENCE_99"
      - "CONFIDENCE_OTHER"
      - "GEOMETRIC_COEFFICIENT"
    OutcomeMeasureType:
      type: "string"
      enum:
      - "PRIMARY"
      - "SECONDARY"
      - "OTHER_PRE_SPECIFIED"
      - "POST_HOC"
    ReportingStatus:
      type: "string"
      enum:
      - "NOT_POSTED"
      - "POSTED"
    EventAssessment:
      type: "string"
      enum:
      - "NON_SYSTEMATIC_ASSESSMENT"
      - "SYSTEMATIC_ASSESSMENT"
    AgreementRestrictionType:
      type: "string"
      enum:
      - "LTE60"
      - "GT60"
      - "OTHER"
    BrowseLeafRelevance:
      type: "string"
      enum:
      - "LOW"
      - "HIGH"
    DesignMasking:
      type: "string"
      enum:
      - "NONE"
      - "SINGLE"
      - "DOUBLE"
      - "TRIPLE"
      - "QUADRUPLE"
    WhoMasked:
      type: "string"
      enum:
      - "PARTICIPANT"
      - "CARE_PROVIDER"
      - "INVESTIGATOR"
      - "OUTCOMES_ASSESSOR"
    AnalysisDispersionType:
      type: "string"
      enum:
      - "STANDARD_DEVIATION"
      - "STANDARD_ERROR_OF_MEAN"
    ConfidenceIntervalNumSides:
      type: "string"
      enum:
      - "ONE_SIDED"
      - "TWO_SIDED"
    NonInferiorityType:
      type: "string"
      enum:
      - "SUPERIORITY"
      - "NON_INFERIORITY"
      - "EQUIVALENCE"
      - "OTHER"
      - "NON_INFERIORITY_OR_EQUIVALENCE"
      - "SUPERIORITY_OR_OTHER"
      - "NON_INFERIORITY_OR_EQUIVALENCE_LEGACY"
      - "SUPERIORITY_OR_OTHER_LEGACY"
    UnpostedEventType:
      type: "string"
      enum:
      - "RESET"
      - "RELEASE"
      - "UNRELEASE"
    ViolationEventType:
      type: "string"
      enum:
      - "VIOLATION_IDENTIFIED"
      - "CORRECTION_CONFIRMED"
      - "PENALTY_IMPOSED"
      - "ISSUES_IN_LETTER_ADDRESSED_CONFIRMED"
    GeoPoint:
      type: "object"
      properties:
        lat:
          type: "number"
        lon:
          type: "number"
      required:
      - "lat"
      - "lon"
    FieldValuesStatsList:
      type: "array"
      items:
        $ref: "#/components/schemas/FieldValuesStats"
    FieldValuesStats:
      anyOf:
      - $ref: "#/components/schemas/EnumStats"
      - $ref: "#/components/schemas/StringStats"
      - $ref: "#/components/schemas/DateStats"
      - $ref: "#/components/schemas/IntegerStats"
      - $ref: "#/components/schemas/NumberStats"
      - $ref: "#/components/schemas/BooleanStats"
    StudyList:
      title: "Array of studies"
      description: "`study` field values of type `markup` are in markdown format.\n"
      type: "array"
      items:
        $ref: "#/components/schemas/Study"
    StudiesCsv:
      description: "Study objects in csv file"
      type: "string"
    StudiesZip:
      description: "Study objects as files in zip archive"
      type: "string"
    StudyFhir:
      description: "Study in FHIR JSON format"
      type: "object"
    PartialDate:
      type: "string"
      description: "Date in `yyyy`, `yyyy-MM`, or `yyyy-MM-dd` format"
    DateTimeMinutes:
      type: "string"
      description: "Date and time in `yyyy-MM-dd'T'HH:mm` format"
    errorMessage:
      type: "string"
      description: "A text message describing an error"
externalDocs:
  description: "Introduction on clinicaltrials.gov"
  url: "https://clinicaltrials.gov/data-about-studies/learn-about-api"


←
OpenAPI Initiative

OpenAPI Specification v3.0.3
Version 3.0.3
20 February 2020

More details about this document
This version:
https://spec.openapis.org/oas/v3.0.3.html
Latest published version:
https://spec.openapis.org/oas/latest.html
Latest editor's draft:
https://github.com/OAI/OpenAPI-Specification/
Editors:
Darrel Miller
Jeremy Whitlock
Marsh Gardiner
Mike Ralphson
Ron Ratovsky
Uri Sarid
Former editors:
Jason Harmon
Tony Tam
Participate
GitHub OAI/OpenAPI-Specification
File a bug
Commit history
Pull requests
Copyright © 2020 the Linux Foundation

What is the OpenAPI Specification?
The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service.
Status of This Document
The source-of-truth for this specification is the HTML file referenced above as This version.
Table of Contents
1.OpenAPI Specification
1.1Version 3.0.3
2.Introduction
3.Definitions
3.1OpenAPI Document
3.2Path Templating
3.3Media Types
3.4HTTP Status Codes
4.Specification
4.1Versions
4.2Format
4.3Document Structure
4.4Data Types
4.5Rich Text Formatting
4.6Relative References in URLs
4.7Schema
4.7.1OpenAPI Object
4.7.1.1Fixed Fields
4.7.2Info Object
4.7.2.1Fixed Fields
4.7.2.2Info Object Example
4.7.3Contact Object
4.7.3.1Fixed Fields
4.7.3.2Contact Object Example
4.7.4License Object
4.7.4.1Fixed Fields
4.7.4.2License Object Example
4.7.5Server Object
4.7.5.1Fixed Fields
4.7.5.2Server Object Example
4.7.6Server Variable Object
4.7.6.1Fixed Fields
4.7.7Components Object
4.7.7.1Fixed Fields
4.7.7.2Components Object Example
4.7.8Paths Object
4.7.8.1Patterned Fields
4.7.8.2Path Templating Matching
4.7.8.3Paths Object Example
4.7.9Path Item Object
4.7.9.1Fixed Fields
4.7.9.2Path Item Object Example
4.7.10Operation Object
4.7.10.1Fixed Fields
4.7.10.2Operation Object Example
4.7.11External Documentation Object
4.7.11.1Fixed Fields
4.7.11.2External Documentation Object Example
4.7.12Parameter Object
4.7.12.1Parameter Locations
4.7.12.2Fixed Fields
4.7.12.3Style Values
4.7.12.4Style Examples
4.7.12.5Parameter Object Examples
4.7.13Request Body Object
4.7.13.1Fixed Fields
4.7.13.2Request Body Examples
4.7.14Media Type Object
4.7.14.1Fixed Fields
4.7.14.2Media Type Examples
4.7.14.3Considerations for File Uploads
4.7.14.4Support for x-www-form-urlencoded Request Bodies
4.7.14.5Special Considerations for multipart Content
4.7.15Encoding Object
4.7.15.1Fixed Fields
4.7.15.2Encoding Object Example
4.7.16Responses Object
4.7.16.1Fixed Fields
4.7.16.2Patterned Fields
4.7.16.3Responses Object Example
4.7.17Response Object
4.7.17.1Fixed Fields
4.7.17.2Response Object Examples
4.7.18Callback Object
4.7.18.1Patterned Fields
4.7.18.2Key Expression
4.7.18.3Callback Object Examples
4.7.19Example Object
4.7.19.1Fixed Fields
4.7.19.2Example Object Examples
4.7.20Link Object
4.7.20.1Fixed Fields
4.7.20.2Examples
4.7.20.3OperationRef Examples
4.7.20.4Runtime Expressions
4.7.20.5Examples
4.7.21Header Object
4.7.21.1Header Object Example
4.7.22Tag Object
4.7.22.1Fixed Fields
4.7.22.2Tag Object Example
4.7.23Reference Object
4.7.23.1Fixed Fields
4.7.23.2Reference Object Example
4.7.23.3Relative Schema Document Example
4.7.23.4Relative Documents With Embedded Schema Example
4.7.24Schema Object
4.7.24.1Properties
4.7.24.2Fixed Fields
4.7.24.2.1Composition and Inheritance (Polymorphism)
4.7.24.2.2XML Modeling
4.7.24.3Schema Object Examples
4.7.24.3.1Primitive Sample
4.7.24.3.2Simple Model
4.7.24.3.3Model with Map/Dictionary Properties
4.7.24.3.4Model with Example
4.7.24.3.5Models with Composition
4.7.24.3.6Models with Polymorphism Support
4.7.25Discriminator Object
4.7.25.1Fixed Fields
4.7.26XML Object
4.7.26.1Fixed Fields
4.7.26.2XML Object Examples
4.7.26.2.1No XML Element
4.7.26.2.2XML Name Replacement
4.7.26.2.3XML Attribute, Prefix and Namespace
4.7.26.2.4XML Arrays
4.7.27Security Scheme Object
4.7.27.1Fixed Fields
4.7.27.2Security Scheme Object Example
4.7.27.2.1Basic Authentication Sample
4.7.27.2.2API Key Sample
4.7.27.2.3JWT Bearer Sample
4.7.27.2.4Implicit OAuth2 Sample
4.7.28OAuth Flows Object
4.7.28.1Fixed Fields
4.7.29OAuth Flow Object
4.7.29.1Fixed Fields
4.7.29.2OAuth Flow Object Examples
4.7.30Security Requirement Object
4.7.30.1Patterned Fields
4.7.30.2Security Requirement Object Examples
4.7.30.2.1Non-OAuth2 Security Requirement
4.7.30.2.2OAuth2 Security Requirement
4.7.30.2.3Optional OAuth2 Security
4.8Specification Extensions
4.9Security Filtering
A.Appendix A: Revision History
B.References
B.1Normative references
1. OpenAPI Specification
1.1 Version 3.0.3
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.

This document is licensed under The Apache License, Version 2.0.

2. Introduction
The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.

An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases.

3. Definitions
3.1 OpenAPI Document
A document (or set of documents) that defines or describes an API. An OpenAPI definition uses and conforms to the OpenAPI Specification.

3.2 Path Templating
Path templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.

Each template expression in the path MUST correspond to a path parameter that is included in the Path Item itself and/or in each of the Path Item’s Operations.

3.3 Media Types
Media type definitions are spread across several resources. The media type definitions SHOULD be in compliance with [RFC6838].

Some examples of possible media type definitions:

  text/plain; charset=utf-8
  application/json
  application/vnd.github+json
  application/vnd.github.v3+json
  application/vnd.github.v3.raw+json
  application/vnd.github.v3.text+json
  application/vnd.github.v3.html+json
  application/vnd.github.v3.full+json
  application/vnd.github.v3.diff
  application/vnd.github.v3.patch
3.4 HTTP Status Codes
The HTTP Status Codes are used to indicate the status of the executed operation. The available status codes are defined by [RFC7231] Section 6 and registered status codes are listed in the IANA Status Code Registry.

4. Specification
4.1 Versions
The OpenAPI Specification is versioned using Semantic Versioning 2.0.0 (semver) and follows the semver specification.

The major.minor portion of the semver (for example 3.0) SHALL designate the OAS feature set. Typically, .patch versions address errors in this document, not the feature set. Tooling which supports OAS 3.0 SHOULD be compatible with all OAS 3.0.* versions. The patch version SHOULD NOT be considered by tooling, making no distinction between 3.0.0 and 3.0.1 for example.

Each new minor version of the OpenAPI Specification SHALL allow any OpenAPI document that is valid against any previous minor version of the Specification, within the same major version, to be updated to the new Specification version with equivalent semantics. Such an update MUST only require changing the openapi property to the new minor version.

For example, a valid OpenAPI 3.0.2 document, upon changing its openapi property to 3.1.0, SHALL be a valid OpenAPI 3.1.0 document, semantically equivalent to the original OpenAPI 3.0.2 document. New minor versions of the OpenAPI Specification MUST be written to ensure this form of backward compatibility.

An OpenAPI document compatible with OAS 3.*.* contains a required openapi field which designates the semantic version of the OAS that it uses. (OAS 2.0 documents contain a top-level version field named swagger and value "2.0".)

4.2 Format
An OpenAPI document that conforms to the OpenAPI Specification is itself a JSON object, which may be represented either in JSON or YAML format.

For example, if a field has an array value, the JSON array representation will be used:

{
   "field": [ 1, 2, 3 ]
}
All field names in the specification are case sensitive. This includes all fields that are used as keys in a map, except where explicitly noted that keys are case insensitive.

The schema exposes two types of fields: Fixed fields, which have a declared name, and Patterned fields, which declare a regex pattern for the field name.

Patterned fields MUST have unique names within the containing object.

In order to preserve the ability to round-trip between YAML and JSON formats, YAML version 1.2 is RECOMMENDED along with some additional constraints:

Tags MUST be limited to those allowed by the JSON Schema ruleset.
Keys used in YAML maps MUST be limited to a scalar string, as defined by the YAML Failsafe schema ruleset.
Note: While APIs may be defined by OpenAPI documents in either YAML or JSON format, the API request and response bodies and other content are not required to be JSON or YAML.

4.3 Document Structure
An OpenAPI document MAY be made up of a single document or be divided into multiple, connected parts at the discretion of the user. In the latter case, $ref fields MUST be used in the specification to reference those parts as follows from the JSON Schema definitions.

It is RECOMMENDED that the root OpenAPI document be named: openapi.json or openapi.yaml.

4.4 Data Types
Primitive data types in the OAS are based on the types supported by the JSON Schema Specification Wright Draft 00. Note that integer as a type is also supported and is defined as a JSON number without a fraction or exponent part. null is not supported as a type (see nullable for an alternative solution). Models are defined using the Schema Object, which is an extended subset of JSON Schema Specification Wright Draft 00.

Primitives have an optional modifier property: format. OAS uses several known formats to define in fine detail the data type being used. However, to support documentation needs, the format property is an open string-valued property, and can have any value. Formats such as "email", "uuid", and so on, MAY be used even though undefined by this specification. Types that are not accompanied by a format property follow the type definition in the JSON Schema. Tools that do not recognize a specific format MAY default back to the type alone, as if the format is not specified.

The formats defined by the OAS are:

type	format	Comments
integer	int32	signed 32 bits
integer	int64	signed 64 bits (a.k.a long)
number	float	
number	double	
string		
string	byte	base64 encoded characters
string	binary	any sequence of octets
boolean		
string	date	As defined by full-date - [RFC3339] Section 5.6
string	date-time	As defined by date-time - [RFC3339] Section 5.6
string	password	A hint to UIs to obscure input.
4.5 Rich Text Formatting
Throughout the specification description fields are noted as supporting [CommonMark] markdown formatting. Where OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by [CommonMark-0.27]. Tooling MAY choose to ignore some CommonMark features to address security concerns.

4.6 Relative References in URLs
Unless specified otherwise, all properties that are URLs MAY be relative references as defined by [RFC3986] Section 4.2. Relative references are resolved using the URLs defined in the Server Object as a Base URI.

Relative references used in $ref are processed as per JSON Reference, using the URL of the current document as the base URI. See also the Reference Object.

4.7 Schema
In the following description, if a field is not explicitly REQUIRED or described with a MUST or SHALL, it can be considered OPTIONAL.

4.7.1 OpenAPI Object
This is the root document object of the OpenAPI document.

4.7.1.1 Fixed Fields
Field Name	Type	Description
openapi	string	REQUIRED. This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document uses. The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is not related to the API info.version string.
info	Info Object	REQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.
servers	[Server Object]	An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.
paths	Paths Object	REQUIRED. The available paths and operations for the API.
components	Components Object	An element to hold various schemas for the specification.
security	[Security Requirement Object]	A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.
tags	[Tag Object]	A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools’ logic. Each tag name in the list MUST be unique.
externalDocs	External Documentation Object	Additional external documentation.
This object MAY be extended with Specification Extensions.

4.7.2 Info Object
The object provides metadata about the API. The metadata MAY be used by the clients if needed, and MAY be presented in editing or documentation generation tools for convenience.

4.7.2.1 Fixed Fields
Field Name	Type	Description
title	string	REQUIRED. The title of the API.
description	string	A short description of the API. [CommonMark] syntax MAY be used for rich text representation.
termsOfService	string	A URL to the Terms of Service for the API. MUST be in the format of a URL.
contact	Contact Object	The contact information for the exposed API.
license	License Object	The license information for the exposed API.
version	string	REQUIRED. The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).
This object MAY be extended with Specification Extensions.

4.7.2.2 Info Object Example
{
  "title": "Sample Pet Store App",
  "description": "This is a sample server for a pet store.",
  "termsOfService": "http://example.com/terms/",
  "contact": {
    "name": "API Support",
    "url": "http://www.example.com/support",
    "email": "support@example.com"
  },
  "license": {
    "name": "Apache 2.0",
    "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
  },
  "version": "1.0.1"
}
title: Sample Pet Store App
description: This is a sample server for a pet store.
termsOfService: http://example.com/terms/
contact:
  name: API Support
  url: http://www.example.com/support
  email: support@example.com
license:
  name: Apache 2.0
  url: https://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.1
4.7.3 Contact Object
Contact information for the exposed API.

4.7.3.1 Fixed Fields
Field Name	Type	Description
name	string	The identifying name of the contact person/organization.
url	string	The URL pointing to the contact information. MUST be in the format of a URL.
email	string	The email address of the contact person/organization. MUST be in the format of an email address.
This object MAY be extended with Specification Extensions.

4.7.3.2 Contact Object Example
{
  "name": "API Support",
  "url": "http://www.example.com/support",
  "email": "support@example.com"
}
name: API Support
url: http://www.example.com/support
email: support@example.com
4.7.4 License Object
License information for the exposed API.

4.7.4.1 Fixed Fields
Field Name	Type	Description
name	string	REQUIRED. The license name used for the API.
url	string	A URL to the license used for the API. MUST be in the format of a URL.
This object MAY be extended with Specification Extensions.

4.7.4.2 License Object Example
{
  "name": "Apache 2.0",
  "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
}
name: Apache 2.0
url: https://www.apache.org/licenses/LICENSE-2.0.html
4.7.5 Server Object
An object representing a Server.

4.7.5.1 Fixed Fields
Field Name	Type	Description
url	string	REQUIRED. A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.
description	string	An optional string describing the host designated by the URL. [CommonMark] syntax MAY be used for rich text representation.
variables	Map[string, Server Variable Object]	A map between a variable name and its value. The value is used for substitution in the server’s URL template.
This object MAY be extended with Specification Extensions.

4.7.5.2 Server Object Example
A single server would be described as:

{
  "url": "https://development.gigantic-server.com/v1",
  "description": "Development server"
}
url: https://development.gigantic-server.com/v1
description: Development server
The following shows how multiple servers can be described, for example, at the OpenAPI Object’s servers:

{
  "servers": [
    {
      "url": "https://development.gigantic-server.com/v1",
      "description": "Development server"
    },
    {
      "url": "https://staging.gigantic-server.com/v1",
      "description": "Staging server"
    },
    {
      "url": "https://api.gigantic-server.com/v1",
      "description": "Production server"
    }
  ]
}
servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://api.gigantic-server.com/v1
  description: Production server
The following shows how variables can be used for a server configuration:

{
  "servers": [
    {
      "url": "https://{username}.gigantic-server.com:{port}/{basePath}",
      "description": "The production API server",
      "variables": {
        "username": {
          "default": "demo",
          "description": "this value is assigned by the service provider, in this example `gigantic-server.com`"
        },
        "port": {
          "enum": [
            "8443",
            "443"
          ],
          "default": "8443"
        },
        "basePath": {
          "default": "v2"
        }
      }
    }
  ]
}
servers:
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      # note! no enum here means it is an open value
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    basePath:
      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
      default: v2
4.7.6 Server Variable Object
An object representing a Server Variable for server URL template substitution.

4.7.6.1 Fixed Fields
Field Name	Type	Description
enum	[string]	An enumeration of string values to be used if the substitution options are from a limited set. The array SHOULD NOT be empty.
default	string	REQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object’s treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value SHOULD exist in the enum’s values.
description	string	An optional description for the server variable. [CommonMark] syntax MAY be used for rich text representation.
This object MAY be extended with Specification Extensions.

4.7.7 Components Object
Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.

4.7.7.1 Fixed Fields
Field Name	Type	Description
schemas	Map[string, Schema Object | Reference Object]	An object to hold reusable Schema Objects.
responses	Map[string, Response Object | Reference Object]	An object to hold reusable Response Objects.
parameters	Map[string, Parameter Object | Reference Object]	An object to hold reusable Parameter Objects.
examples	Map[string, Example Object | Reference Object]	An object to hold reusable Example Objects.
requestBodies	Map[string, Request Body Object | Reference Object]	An object to hold reusable Request Body Objects.
headers	Map[string, Header Object | Reference Object]	An object to hold reusable Header Objects.
securitySchemes	Map[string, Security Scheme Object | Reference Object]	An object to hold reusable Security Scheme Objects.
links	Map[string, Link Object | Reference Object]	An object to hold reusable Link Objects.
callbacks	Map[string, Callback Object | Reference Object]	An object to hold reusable Callback Objects.
This object MAY be extended with Specification Extensions.

All the fixed fields declared above are objects that MUST use keys that match the regular expression: ^[a-zA-Z0-9\.\-_]+$.

Field Name Examples:

User
User_1
User_Name
user-name
my.org.User
4.7.7.2 Components Object Example
"components": {
  "schemas": {
    "GeneralError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "skipParam": {
      "name": "skip",
      "in": "query",
      "description": "number of items to skip",
      "required": true,
      "schema": {
        "type": "integer",
        "format": "int32"
      }
    },
    "limitParam": {
      "name": "limit",
      "in": "query",
      "description": "max records to return",
      "required": true,
      "schema" : {
        "type": "integer",
        "format": "int32"
      }
    }
  },
  "responses": {
    "NotFound": {
      "description": "Entity not found."
    },
    "IllegalInput": {
      "description": "Illegal input for operation."
    },
    "GeneralError": {
      "description": "General Error",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/GeneralError"
          }
        }
      }
    }
  },
  "securitySchemes": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "flows": {
        "implicit": {
          "authorizationUrl": "http://example.org/api/oauth/dialog",
          "scopes": {
            "write:pets": "modify pets in your account",
            "read:pets": "read your pets"
          }
        }
      }
    }
  }
}
components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
4.7.8 Paths Object
Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the Server Object in order to construct the full URL. The Paths MAY be empty, due to ACL constraints.

4.7.8.1 Patterned Fields
Field Pattern	Type	Description
/{path}	Path Item Object	A relative path to an individual endpoint. The field name MUST begin with a forward slash (/). The path is appended (no relative URL resolution) to the expanded URL from the Server Object’s url field in order to construct the full URL. Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it’s up to the tooling to decide which one to use.
This object MAY be extended with Specification Extensions.

4.7.8.2 Path Templating Matching
Assuming the following paths, the concrete definition, /pets/mine, will be matched first if used:

  /pets/{petId}
  /pets/mine
The following paths are considered identical and invalid:

  /pets/{petId}
  /pets/{name}
The following may lead to ambiguous resolution:

  /{entity}/me
  /books/{id}
4.7.8.3 Paths Object Example
{
  "/pets": {
    "get": {
      "description": "Returns all pets from the system that the user has access to",
      "responses": {
        "200": {         
          "description": "A list of pets.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/pet"
                }
              }
            }
          }
        }
      }
    }
  }
}
/pets:
  get:
    description: Returns all pets from the system that the user has access to
    responses:
      '200':
        description: A list of pets.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/pet'
4.7.9 Path Item Object
Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.

4.7.9.1 Fixed Fields
Field Name	Type	Description
$ref	string	Allows for an external definition of this path item. The referenced structure MUST be in the format of a Path Item Object. In case a Path Item Object field appears both in the defined object and the referenced object, the behavior is undefined.
summary	string	An optional, string summary, intended to apply to all operations in this path.
description	string	An optional, string description, intended to apply to all operations in this path. [CommonMark] syntax MAY be used for rich text representation.
get	Operation Object	A definition of a GET operation on this path.
put	Operation Object	A definition of a PUT operation on this path.
post	Operation Object	A definition of a POST operation on this path.
delete	Operation Object	A definition of a DELETE operation on this path.
options	Operation Object	A definition of a OPTIONS operation on this path.
head	Operation Object	A definition of a HEAD operation on this path.
patch	Operation Object	A definition of a PATCH operation on this path.
trace	Operation Object	A definition of a TRACE operation on this path.
servers	[Server Object]	An alternative server array to service all operations in this path.
parameters	[Parameter Object | Reference Object]	A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object’s components/parameters.
This object MAY be extended with Specification Extensions.

4.7.9.2 Path Item Object Example
{
  "get": {
    "description": "Returns pets based on ID",
    "summary": "Find pets by ID",
    "operationId": "getPetsById",
    "responses": {
      "200": {
        "description": "pet response",
        "content": {
          "*/*": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          }
        }
      },
      "default": {
        "description": "error payload",
        "content": {
          "text/html": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      }
    }
  },
  "parameters": [
    {
      "name": "id",
      "in": "path",
      "description": "ID of pet to use",
      "required": true,
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "style": "simple"
    }
  ]
}
get:
  description: Returns pets based on ID
  summary: Find pets by ID
  operationId: getPetsById
  responses:
    '200':
      description: pet response
      content:
        '*/*' :
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
    default:
      description: error payload
      content:
        'text/html':
          schema:
            $ref: '#/components/schemas/ErrorModel'
parameters:
- name: id
  in: path
  description: ID of pet to use
  required: true
  schema:
    type: array
    items:
      type: string 
  style: simple
4.7.10 Operation Object
Describes a single API operation on a path.

4.7.10.1 Fixed Fields
Field Name	Type	Description
tags	[string]	A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.
summary	string	A short summary of what the operation does.
description	string	A verbose explanation of the operation behavior. [CommonMark] syntax MAY be used for rich text representation.
externalDocs	External Documentation Object	Additional external documentation for this operation.
operationId	string	Unique string used to identify the operation. The id MUST be unique among all operations described in the API. The operationId value is case-sensitive. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is RECOMMENDED to follow common programming naming conventions.
parameters	[Parameter Object | Reference Object]	A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location. The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object’s components/parameters.
requestBody	Request Body Object | Reference Object	The request body applicable for this operation. The requestBody is only supported in HTTP methods where the HTTP 1.1 specification [RFC7231] Section 4.3.1 has explicitly defined semantics for request bodies. In other cases where the HTTP spec is vague, requestBody SHALL be ignored by consumers.
responses	Responses Object	REQUIRED. The list of possible responses as they are returned from executing this operation.
callbacks	Map[string, Callback Object | Reference Object]	A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses.
deprecated	boolean	Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is false.
security	[Security Requirement Object]	A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.
servers	[Server Object]	An alternative server array to service this operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value.
This object MAY be extended with Specification Extensions.

4.7.10.2 Operation Object Example
{
  "tags": [
    "pet"
  ],
  "summary": "Updates a pet in the store with form data",
  "operationId": "updatePetWithForm",
  "parameters": [
    {
      "name": "petId",
      "in": "path",
      "description": "ID of pet that needs to be updated",
      "required": true,
      "schema": {
        "type": "string"
      }
    }
  ],
  "requestBody": {
    "content": {
      "application/x-www-form-urlencoded": {
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "description": "Updated name of the pet",
              "type": "string"
            },
            "status": {
              "description": "Updated status of the pet",
              "type": "string"
            }
          },
          "required": ["status"]
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Pet updated.",
      "content": {
        "application/json": {},
        "application/xml": {}
      }
    },
    "405": {
      "description": "Method Not Allowed",
      "content": {
        "application/json": {},
        "application/xml": {}
      }
    }
  },
  "security": [
    {
      "petstore_auth": [
        "write:pets",
        "read:pets"
      ]
    }
  ]
}
tags:
- pet
summary: Updates a pet in the store with form data
operationId: updatePetWithForm
parameters:
- name: petId
  in: path
  description: ID of pet that needs to be updated
  required: true
  schema:
    type: string
requestBody:
  content:
    'application/x-www-form-urlencoded':
      schema:
       properties:
          name:
            description: Updated name of the pet
            type: string
          status:
            description: Updated status of the pet
            type: string
       required:
         - status
responses:
  '200':
    description: Pet updated.
    content:
      'application/json': {}
      'application/xml': {}
  '405':
    description: Method Not Allowed
    content:
      'application/json': {}
      'application/xml': {}
security:
- petstore_auth:
  - write:pets
  - read:pets
4.7.11 External Documentation Object
Allows referencing an external resource for extended documentation.

4.7.11.1 Fixed Fields
Field Name	Type	Description
description	string	A short description of the target documentation. [CommonMark] syntax MAY be used for rich text representation.
url	string	REQUIRED. The URL for the target documentation. Value MUST be in the format of a URL.
This object MAY be extended with Specification Extensions.

4.7.11.2 External Documentation Object Example
{
  "description": "Find more info here",
  "url": "https://example.com"
}
description: Find more info here
url: https://example.com
4.7.12 Parameter Object
Describes a single operation parameter.

A unique parameter is defined by a combination of a name and location.

4.7.12.1 Parameter Locations
There are four possible parameter locations specified by the in field:

path - Used together with Path Templating, where the parameter value is actually part of the operation’s URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.
query - Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.
header - Custom headers that are expected as part of the request. Note that [RFC7230] Page 22 states header names are case insensitive.
cookie - Used to pass a specific cookie value to the API.
4.7.12.2 Fixed Fields
Field Name	Type	Description
name	string	REQUIRED. The name of the parameter. Parameter names are case sensitive.
If in is "path", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.
If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition SHALL be ignored.
For all other cases, the name corresponds to the parameter name used by the in property.
in	string	REQUIRED. The location of the parameter. Possible values are "query", "header", "path" or "cookie".
description	string	A brief description of the parameter. This could contain examples of use. [CommonMark] syntax MAY be used for rich text representation.
required	boolean	Determines whether this parameter is mandatory. If the parameter location is "path", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.
deprecated	boolean	Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.
allowEmptyValue	boolean	Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is false. If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.
The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a schema and style can describe the structure and syntax of the parameter.

Field Name	Type	Description
style	string	Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.
explode	boolean	When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.
allowReserved	boolean	Determines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986] Section 2.2 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false.
schema	Schema Object | Reference Object	The schema defining the type used for the parameter.
example	Any	Example of the parameter’s potential value. The example SHOULD match the specified schema and encoding properties if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema that contains an example, the example value SHALL override the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary.
examples	Map[ string, Example Object | Reference Object]	Examples of the parameter’s potential value. Each example SHOULD contain a value in the correct format as specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema that contains an example, the examples value SHALL override the example provided by the schema.
For more complex scenarios, the content property can define the media type and schema of the parameter. A parameter MUST contain either a schema property, or a content property, but not both. When example or examples are provided in conjunction with the schema object, the example MUST follow the prescribed serialization strategy for the parameter.

Field Name	Type	Description
content	Map[string, Media Type Object]	A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry.
4.7.12.3 Style Values
In order to support common ways of serializing simple parameters, a set of style values are defined.

style	type	in	Comments
matrix	primitive, array, object	path	Path-style parameters defined by [RFC6570] Section 3.2.7
label	primitive, array, object	path	Label style parameters defined by [RFC6570] Section 3.2.5
form	primitive, array, object	query, cookie	Form style parameters defined by [RFC6570] Section 3.2.8. This option replaces collectionFormat with a csv (when explode is false) or multi (when explode is true) value from OpenAPI 2.0.
simple	array	path, header	Simple style parameters defined by [RFC6570] Section 3.2.2. This option replaces collectionFormat with a csv value from OpenAPI 2.0.
spaceDelimited	array	query	Space separated array values. This option replaces collectionFormat equal to ssv from OpenAPI 2.0.
pipeDelimited	array	query	Pipe separated array values. This option replaces collectionFormat equal to pipes from OpenAPI 2.0.
deepObject	object	query	Provides a simple way of rendering nested objects using form parameters.
4.7.12.4 Style Examples
Assume a parameter named color has one of the following values:

   string -> "blue"
   array -> ["blue","black","brown"]
   object -> { "R": 100, "G": 200, "B": 150 }
The following table shows examples of rendering differences for each value.

style	explode	empty	string	array	object
matrix	false	;color	;color=blue	;color=blue,black,brown	;color=R,100,G,200,B,150
matrix	true	;color	;color=blue	;color=blue;color=black;color=brown	;R=100;G=200;B=150
label	false	.	.blue	.blue.black.brown	.R.100.G.200.B.150
label	true	.	.blue	.blue.black.brown	.R=100.G=200.B=150
form	false	color=	color=blue	color=blue,black,brown	color=R,100,G,200,B,150
form	true	color=	color=blue	color=blue&color=black&color=brown	R=100&G=200&B=150
simple	false	n/a	blue	blue,black,brown	R,100,G,200,B,150
simple	true	n/a	blue	blue,black,brown	R=100,G=200,B=150
spaceDelimited	false	n/a	n/a	blue%20black%20brown	R%20100%20G%20200%20B%20150
pipeDelimited	false	n/a	n/a	blue|black|brown	R|100|G|200|B|150
deepObject	true	n/a	n/a	n/a	color[R]=100&color[G]=200&color[B]=150
This object MAY be extended with Specification Extensions.

4.7.12.5 Parameter Object Examples
A header parameter with an array of 64 bit integer numbers:

{
  "name": "token",
  "in": "header",
  "description": "token to be passed as a header",
  "required": true,
  "schema": {
    "type": "array",
    "items": {
      "type": "integer",
      "format": "int64"
    }
  },
  "style": "simple"
}
name: token
in: header
description: token to be passed as a header
required: true
schema:
  type: array
  items:
    type: integer
    format: int64
style: simple
A path parameter of a string value:

{
  "name": "username",
  "in": "path",
  "description": "username to fetch",
  "required": true,
  "schema": {
    "type": "string"
  }
}
name: username
in: path
description: username to fetch
required: true
schema:
  type: string
An optional query parameter of a string value, allowing multiple values by repeating the query parameter:

{
  "name": "id",
  "in": "query",
  "description": "ID of the object to fetch",
  "required": false,
  "schema": {
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "style": "form",
  "explode": true
}
name: id
in: query
description: ID of the object to fetch
required: false
schema:
  type: array
  items:
    type: string
style: form
explode: true
A free-form query parameter, allowing undefined parameters of a specific type:

{
  "in": "query",
  "name": "freeForm",
  "schema": {
    "type": "object",
    "additionalProperties": {
      "type": "integer"
    },
  },
  "style": "form"
}
in: query
name: freeForm
schema:
  type: object
  additionalProperties:
    type: integer
style: form
A complex parameter using content to define serialization:

{
  "in": "query",
  "name": "coordinates",
  "content": {
    "application/json": {
      "schema": {
        "type": "object",
        "required": [
          "lat",
          "long"
        ],
        "properties": {
          "lat": {
            "type": "number"
          },
          "long": {
            "type": "number"
          }
        }
      }
    }
  }
}
in: query
name: coordinates
content:
  application/json:
    schema:
      type: object
      required:
        - lat
        - long
      properties:
        lat:
          type: number
        long:
          type: number
4.7.13 Request Body Object
Describes a single request body.

4.7.13.1 Fixed Fields
Field Name	Type	Description
description	string	A brief description of the request body. This could contain examples of use. [CommonMark] syntax MAY be used for rich text representation.
content	Map[string, Media Type Object]	REQUIRED. The content of the request body. The key is a media type or media type range, see [RFC7231] Appendix D, and the value describes it. For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*
required	boolean	Determines if the request body is required in the request. Defaults to false.
This object MAY be extended with Specification Extensions.

4.7.13.2 Request Body Examples
A request body with a referenced model definition.

{
  "description": "user to add to the system",
  "content": {
    "application/json": {
      "schema": {
        "$ref": "#/components/schemas/User"
      },
      "examples": {
          "user" : {
            "summary": "User Example",
            "externalValue": "http://foo.bar/examples/user-example.json"
          }
        }
    },
    "application/xml": {
      "schema": {
        "$ref": "#/components/schemas/User"
      },
      "examples": {
          "user" : {
            "summary": "User example in XML",
            "externalValue": "http://foo.bar/examples/user-example.xml"
          }
        }
    },
    "text/plain": {
      "examples": {
        "user" : {
            "summary": "User example in Plain text",
            "externalValue": "http://foo.bar/examples/user-example.txt"
        }
      }
    },
    "*/*": {
      "examples": {
        "user" : {
            "summary": "User example in other format",
            "externalValue": "http://foo.bar/examples/user-example.whatever"
        }
      }
    }
  }
}
description: user to add to the system
content:
  'application/json':
    schema:
      $ref: '#/components/schemas/User'
    examples:
      user:
        summary: User Example
        externalValue: 'http://foo.bar/examples/user-example.json'
  'application/xml':
    schema:
      $ref: '#/components/schemas/User'
    examples:
      user:
        summary: User Example in XML
        externalValue: 'http://foo.bar/examples/user-example.xml'
  'text/plain':
    examples:
      user:
        summary: User example in text plain format
        externalValue: 'http://foo.bar/examples/user-example.txt'
  '*/*':
    examples:
      user:
        summary: User example in other format
        externalValue: 'http://foo.bar/examples/user-example.whatever'
A body parameter that is an array of string values:

{
  "description": "user to add to the system",
  "content": {
    "text/plain": {
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    }
  }
}
description: user to add to the system
required: true
content:
  text/plain:
    schema:
      type: array
      items:
        type: string
4.7.14 Media Type Object
Each Media Type Object provides schema and examples for the media type identified by its key.

4.7.14.1 Fixed Fields
Field Name	Type	Description
schema	Schema Object | Reference Object	The schema defining the content of the request, response, or parameter.
example	Any	Example of the media type. The example object SHOULD be in the correct format as specified by the media type. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.
examples	Map[ string, Example Object | Reference Object]	Examples of the media type. Each example object SHOULD match the media type and specified schema if present. The examples field is mutually exclusive of the example field. Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.
encoding	Map[string, Encoding Object]	A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.
This object MAY be extended with Specification Extensions.

4.7.14.2 Media Type Examples
{
  "application/json": {
    "schema": {
         "$ref": "#/components/schemas/Pet"
    },
    "examples": {
      "cat" : {
        "summary": "An example of a cat",
        "value":
          {
            "name": "Fluffy",
            "petType": "Cat",
            "color": "White",
            "gender": "male",
            "breed": "Persian"
          }
      },
      "dog": {
        "summary": "An example of a dog with a cat's name",
        "value" :  {
          "name": "Puma",
          "petType": "Dog",
          "color": "Black",
          "gender": "Female",
          "breed": "Mixed"
        },
      "frog": {
          "$ref": "#/components/examples/frog-example"
        }
      }
    }
  }
}
application/json:
  schema:
    $ref: "#/components/schemas/Pet"
  examples:
    cat:
      summary: An example of a cat
      value:
        name: Fluffy
        petType: Cat
        color: White
        gender: male
        breed: Persian
    dog:
      summary: An example of a dog with a cat's name
      value:
        name: Puma
        petType: Dog
        color: Black
        gender: Female
        breed: Mixed
    frog:
      $ref: "#/components/examples/frog-example"
4.7.14.3 Considerations for File Uploads
In contrast with the 2.0 specification, file input/output content in OpenAPI is described with the same semantics as any other schema type. Specifically:

# content transferred with base64 encoding
schema:
  type: string
  format: base64
# content transferred in binary (octet-stream):
schema:
  type: string
  format: binary
These examples apply to either input payloads of file uploads or response payloads.

A requestBody for submitting a file in a POST operation may look like the following example:

requestBody:
  content:
    application/octet-stream:
      schema:
        # a binary file of any type
        type: string
        format: binary
In addition, specific media types MAY be specified:

# multiple, specific media types may be specified:
requestBody:
  content:
      # a binary file of type png or jpeg
    'image/jpeg':
      schema:
        type: string
        format: binary
    'image/png':
      schema:
        type: string
        format: binary       
To upload multiple files, a multipart media type MUST be used:

requestBody:
  content:
    multipart/form-data:
      schema:
        properties:
          # The property name 'file' will be used for all files.
          file:
            type: array
            items:
              type: string
              format: binary

4.7.14.4 Support for x-www-form-urlencoded Request Bodies
To submit content using form url encoding via [RFC1866], the following definition may be used:

requestBody:
  content:
    application/x-www-form-urlencoded:
      schema:
        type: object
        properties:
          id:
            type: string
            format: uuid
          address:
            # complex types are stringified to support RFC 1866
            type: object
            properties: {}
In this example, the contents in the requestBody MUST be stringified per [RFC1866] when passed to the server. In addition, the address field complex object will be stringified.

When passing complex objects in the application/x-www-form-urlencoded content type, the default serialization strategy of such properties is described in the Encoding Object’s style property as form.

4.7.14.5 Special Considerations for multipart Content
It is common to use multipart/form-data as a Content-Type when transferring request bodies to operations. In contrast to 2.0, a schema is REQUIRED to define the input parameters to the operation when using multipart content. This supports complex structures as well as supporting mechanisms for multiple file uploads.

When passing in multipart types, boundaries MAY be used to separate sections of the content being transferred — thus, the following default Content-Types are defined for multipart:

If the property is a primitive, or an array of primitive values, the default Content-Type is text/plain
If the property is complex, or an array of complex values, the default Content-Type is application/json
If the property is a type: string with format: binary or format: base64 (aka a file object), the default Content-Type is application/octet-stream
Examples:

requestBody:
  content:
    multipart/form-data:
      schema:
        type: object
        properties:
          id:
            type: string
            format: uuid
          address:
            # default Content-Type for objects is `application/json`
            type: object
            properties: {}
          profileImage:
            # default Content-Type for string/binary is `application/octet-stream`
            type: string
            format: binary
          children:
            # default Content-Type for arrays is based on the `inner` type (text/plain here)
            type: array
            items:
              type: string
          addresses:
            # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)
            type: array
            items:
              type: '#/components/schemas/Address'
An encoding attribute is introduced to give you control over the serialization of parts of multipart request bodies. This attribute is only applicable to multipart and application/x-www-form-urlencoded request bodies.

4.7.15 Encoding Object
A single encoding definition applied to a single schema property.

4.7.15.1 Fixed Fields
Field Name	Type	Description
contentType	string	The Content-Type for encoding a specific property. Default value depends on the property type: for string with format being binary – application/octet-stream; for other primitive types – text/plain; for object - application/json; for array – the default is defined based on the inner type. The value can be a specific media type (e.g. application/json), a wildcard media type (e.g. image/*), or a comma-separated list of the two types.
headers	Map[string, Header Object | Reference Object]	A map allowing additional information to be provided as headers, for example Content-Disposition. Content-Type is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a multipart.
style	string	Describes how a specific property value will be serialized depending on its type. See Parameter Object for details on the style property. The behavior follows the same values as query parameters, including default values. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded.
explode	boolean	When this is true, property values of type array or object generate separate parameters for each value of the array, or key-value-pair of the map. For other types of properties this property has no effect. When style is form, the default value is true. For all other styles, the default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded.
allowReserved	boolean	Determines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986] Section 2.2 :/?#[]@!$&'()*+,;= to be included without percent-encoding. The default value is false. This property SHALL be ignored if the request body media type is not application/x-www-form-urlencoded.
This object MAY be extended with Specification Extensions.

4.7.15.2 Encoding Object Example
requestBody:
  content:
    multipart/mixed:
      schema:
        type: object
        properties:
          id:
            # default is text/plain
            type: string
            format: uuid
          address:
            # default is application/json
            type: object
            properties: {}
          historyMetadata:
            # need to declare XML format!
            description: metadata in XML format
            type: object
            properties: {}
          profileImage:
            # default is application/octet-stream, need to declare an image type only!
            type: string
            format: binary
      encoding:
        historyMetadata:
          # require XML Content-Type in utf-8 encoding
          contentType: application/xml; charset=utf-8
        profileImage:
          # only accept png/jpeg
          contentType: image/png, image/jpeg
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
4.7.16 Responses Object
A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.

The documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance. However, documentation is expected to cover a successful operation response and any known errors.

The default MAY be used as a default response object for all HTTP codes that are not covered individually by the specification.

The Responses Object MUST contain at least one response code, and it SHOULD be the response for a successful operation call.

4.7.16.1 Fixed Fields
Field Name	Type	Description
default	Response Object | Reference Object	The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A Reference Object can link to a response that the OpenAPI Object’s components/responses section defines.
4.7.16.2 Patterned Fields
Field Pattern	Type	Description
HTTP Status Code	Response Object | Reference Object	Any HTTP status code can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code. A Reference Object can link to a response that is defined in the OpenAPI Object’s components/responses section. This field MUST be enclosed in quotation marks (for example, “200”) for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character X. For example, 2XX represents all response codes between [200-299]. Only the following range definitions are allowed: 1XX, 2XX, 3XX, 4XX, and 5XX. If a response is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.
This object MAY be extended with Specification Extensions.

4.7.16.3 Responses Object Example
A 200 response for a successful operation and a default response for others (implying an error):

{
  "200": {
    "description": "a pet to be returned",
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/Pet"
        }
      }
    }
  },
  "default": {
    "description": "Unexpected error",
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/ErrorModel"
        }
      }
    }
  }
}
'200':
  description: a pet to be returned
  content:
    application/json:
      schema:
        $ref: '#/components/schemas/Pet'
default:
  description: Unexpected error
  content:
    application/json:
      schema:
        $ref: '#/components/schemas/ErrorModel'
4.7.17 Response Object
Describes a single response from an API Operation, including design-time, static links to operations based on the response.

4.7.17.1 Fixed Fields
Field Name	Type	Description
description	string	REQUIRED. A short description of the response. [CommonMark] syntax MAY be used for rich text representation.
headers	Map[string, Header Object | Reference Object]	Maps a header name to its definition. [RFC7230] Page 22 states header names are case insensitive. If a response header is defined with the name "Content-Type", it SHALL be ignored.
content	Map[string, Media Type Object]	A map containing descriptions of potential response payloads. The key is a media type or media type range, see [RFC7231] Appendix D, and the value describes it. For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*
links	Map[string, Link Object | Reference Object]	A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for Component Objects.
This object MAY be extended with Specification Extensions.

4.7.17.2 Response Object Examples
Response of an array of a complex type:

{
  "description": "A complex object array response",
  "content": {
    "application/json": {
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/VeryComplexType"
        }
      }
    }
  }
}
description: A complex object array response
content:
  application/json:
    schema:
      type: array
      items:
        $ref: '#/components/schemas/VeryComplexType'
Response with a string type:

{
  "description": "A simple string response",
  "content": {
    "text/plain": {
      "schema": {
        "type": "string"
      }
    }
  }

}
description: A simple string response
content:
  text/plain:
    schema:
      type: string
Plain text response with headers:

{
  "description": "A simple string response",
  "content": {
    "text/plain": {
      "schema": {
        "type": "string",
        "example": "whoa!"
      }
    }
  },
  "headers": {
    "X-Rate-Limit-Limit": {
      "description": "The number of allowed requests in the current period",
      "schema": {
        "type": "integer"
      }
    },
    "X-Rate-Limit-Remaining": {
      "description": "The number of remaining requests in the current period",
      "schema": {
        "type": "integer"
      }
    },
    "X-Rate-Limit-Reset": {
      "description": "The number of seconds left in the current period",
      "schema": {
        "type": "integer"
      }
    }
  }
}
description: A simple string response
content:
  text/plain:
    schema:
      type: string
    example: 'whoa!'
headers:
  X-Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    schema:
      type: integer
  X-Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    schema:
      type: integer
  X-Rate-Limit-Reset:
    description: The number of seconds left in the current period
    schema:
      type: integer
Response with no return value:

{
  "description": "object created"
}
description: object created
4.7.18 Callback Object
A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the path item object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.

4.7.18.1 Patterned Fields
Field Pattern	Type	Description
{expression}	Path Item Object	A Path Item Object used to define a callback request and expected responses. A complete example is available.
This object MAY be extended with Specification Extensions.

4.7.18.2 Key Expression
The key that identifies the Path Item Object is a runtime expression that can be evaluated in the context of a runtime HTTP request/response to identify the URL to be used for the callback request. A simple example might be $request.body#/url. However, using a runtime expression the complete HTTP message can be accessed. This includes accessing any part of a body that a JSON Pointer [RFC6901] can reference.

For example, given the following HTTP request:

POST /subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning HTTP/1.1
Host: example.org
Content-Type: application/json
Content-Length: 187

{
  "failedUrl" : "http://clientdomain.com/failed",
  "successUrls" : [
    "http://clientdomain.com/fast",
    "http://clientdomain.com/medium",
    "http://clientdomain.com/slow"
  ]
}

201 Created
Location: http://example.org/subscription/1
The following examples show how the various expressions evaluate, assuming the callback operation has a path parameter named eventType and a query parameter named queryUrl.

Expression	Value
$url	http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning
$method	POST
$request.path.eventType	myevent
$request.query.queryUrl	http://clientdomain.com/stillrunning
$request.header.content-Type	application/json
$request.body#/failedUrl	http://clientdomain.com/failed
$request.body#/successUrls/2	http://clientdomain.com/medium
$response.header.Location	http://example.org/subscription/1
4.7.18.3 Callback Object Examples
The following example uses the user provided queryUrl query string parameter to define the callback URL. This is an example of how to use a callback object to describe a WebHook callback that goes with the subscription operation to enable registering for the WebHook.

myCallback:
  '{$request.query.queryUrl}':
    post:
      requestBody:
        description: Callback payload
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SomePayload'
      responses:
        '200':
          description: callback successfully processed
The following example shows a callback where the server is hard-coded, but the query string parameters are populated from the id and email property in the request body.

transactionCallback:
  'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}':
    post:
      requestBody:
        description: Callback payload
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SomePayload'
      responses:
        '200':
          description: callback successfully processed
4.7.19 Example Object
4.7.19.1 Fixed Fields
Field Name	Type	Description
summary	string	Short description for the example.
description	string	Long description for the example. [CommonMark] syntax MAY be used for rich text representation.
value	Any	Embedded literal example. The value field and externalValue field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary.
externalValue	string	A URL that points to the literal example. This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. The value field and externalValue field are mutually exclusive.
This object MAY be extended with Specification Extensions.

In all cases, the example value is expected to be compatible with the type schema of its associated value. Tooling implementations MAY choose to validate compatibility automatically, and reject the example value(s) if incompatible.

4.7.19.2 Example Object Examples
In a request body:

requestBody:
  content:
    'application/json':
      schema:
        $ref: '#/components/schemas/Address'
      examples:
        foo:
          summary: A foo example
          value: {"foo": "bar"}
        bar:
          summary: A bar example
          value: {"bar": "baz"}
    'application/xml':
      examples:
        xmlExample:
          summary: This is an example in XML
          externalValue: 'http://example.org/examples/address-example.xml'
    'text/plain':
      examples:
        textExample:
          summary: This is a text example
          externalValue: 'http://foo.bar/examples/address-example.txt'
In a parameter:

parameters:
  - name: 'zipCode'
    in: 'query'
    schema:
      type: 'string'
      format: 'zip-code'
    examples:
      zip-example:
        $ref: '#/components/examples/zip-example'
In a response:

responses:
  '200':
    description: your car appointment has been booked
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/SuccessResponse'
        examples:
          confirmation-success:
            $ref: '#/components/examples/confirmation-success'
4.7.20 Link Object
The Link object represents a possible design-time link for a response. The presence of a link does not guarantee the caller’s ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.

Unlike dynamic links (i.e. links provided in the response payload), the OAS linking mechanism does not require link information in the runtime response.

For computing links, and providing instructions to execute them, a runtime expression is used for accessing values in an operation and using them as parameters while invoking the linked operation.

4.7.20.1 Fixed Fields
Field Name	Type	Description
operationRef	string	A relative or absolute URI reference to an OAS operation. This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition.
operationId	string	The name of an existing, resolvable OAS operation, as defined with a unique operationId. This field is mutually exclusive of the operationRef field.
parameters	Map[string, Any | {expression}]	A map representing parameters to pass to an operation as specified with operationId or identified via operationRef. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).
requestBody	Any | {expression}	A literal value or {expression} to use as a request body when calling the target operation.
description	string	A description of the link. [CommonMark] syntax MAY be used for rich text representation.
server	Server Object	A server object to be used by the target operation.
This object MAY be extended with Specification Extensions.

A linked operation MUST be identified using either an operationRef or operationId. In the case of an operationId, it MUST be unique and resolved in the scope of the OAS document. Because of the potential for name clashes, the operationRef syntax is preferred for specifications with external references.

4.7.20.2 Examples
Computing a link from a request operation where the $request.path.id is used to pass a request parameter to the linked operation.

paths:
  /users/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: the user identifier, as userId
      schema:
        type: string
    get:
      responses:
        '200':
          description: the user being returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid: # the unique user id
                    type: string
                    format: uuid
          links:
            address:
              # the target link operationId
              operationId: getUserAddress
              parameters:
                # get the `id` field from the request path parameter named `id`
                userId: $request.path.id
  # the path item of the linked operation
  /users/{userid}/address:
    parameters:
    - name: userid
      in: path
      required: true
      description: the user identifier, as userId
      schema:
        type: string
    # linked operation
    get:
      operationId: getUserAddress
      responses:
        '200':
          description: the user's address
When a runtime expression fails to evaluate, no parameter value is passed to the target operation.

Values from the response body can be used to drive a linked operation.

links:
  address:
    operationId: getUserAddressByUUID
    parameters:
      # get the `uuid` field from the `uuid` field in the response body
      userUuid: $response.body#/uuid
Clients follow all links at their discretion. Neither permissions, nor the capability to make a successful call to that link, is guaranteed solely by the existence of a relationship.

4.7.20.3 OperationRef Examples
As references to operationId MAY NOT be possible (the operationId is an optional field in an Operation Object), references MAY also be made through a relative operationRef:

links:
  UserRepositories:
    # returns array of '#/components/schemas/repository'
    operationRef: '#/paths/~12.0~1repositories~1{username}/get'
    parameters:
      username: $response.body#/username
or an absolute operationRef:

links:
  UserRepositories:
    # returns array of '#/components/schemas/repository'
    operationRef: 'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1{username}/get'
    parameters:
      username: $response.body#/username
Note that in the use of operationRef, the escaped forward-slash is necessary when using JSON references.

4.7.20.4 Runtime Expressions
Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call. This mechanism is used by Link Objects and Callback Objects.

The runtime expression is defined by the following [ABNF] syntax

      expression = ( "$url" / "$method" / "$statusCode" / "$request." source / "$response." source )
      source = ( header-reference / query-reference / path-reference / body-reference )
      header-reference = "header." token
      query-reference = "query." name 
      path-reference = "path." name
      body-reference = "body" ["#" json-pointer ]
      json-pointer    = *( "/" reference-token )
      reference-token = *( unescaped / escaped )
      unescaped       = %x00-2E / %x30-7D / %x7F-10FFFF
         ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'
      escaped         = "~" ( "0" / "1" )
        ; representing '~' and '/', respectively
      name = *( CHAR )
      token = 1*tchar
      tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
        "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
Here, json-pointer is taken from [RFC6901], char from [RFC7159] Section 7 and token from [RFC7230] Section 3.2.6.

The name identifier is case-sensitive, whereas token is not.

The table below provides examples of runtime expressions and examples of their use in a value:

4.7.20.5 Examples
Source Location	example expression	notes
HTTP Method	$method	The allowable values for the $method will be those for the HTTP operation.
Requested media type	$request.header.accept	
Request parameter	$request.path.id	Request parameters MUST be declared in the parameters section of the parent operation or they cannot be evaluated. This includes request headers.
Request body property	$request.body#/user/uuid	In operations which accept payloads, references may be made to portions of the requestBody or the entire body.
Request URL	$url	
Response value	$response.body#/status	In operations which return payloads, references may be made to portions of the response body or the entire body.
Response header	$response.header.Server	Single header values only are available
Runtime expressions preserve the type of the referenced value. Expressions can be embedded into string values by surrounding the expression with {} curly braces.

4.7.21 Header Object
The Header Object follows the structure of the Parameter Object with the following changes:

name MUST NOT be specified, it is given in the corresponding headers map.
in MUST NOT be specified, it is implicitly in header.
All traits that are affected by the location MUST be applicable to a location of header (for example, style).
4.7.21.1 Header Object Example
A simple header of type integer:

{
  "description": "The number of allowed requests in the current period",
  "schema": {
    "type": "integer"
  }
}
description: The number of allowed requests in the current period
schema:
  type: integer
4.7.22 Tag Object
Adds metadata to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.

4.7.22.1 Fixed Fields
Field Name	Type	Description
name	string	REQUIRED. The name of the tag.
description	string	A short description for the tag. [CommonMark] syntax MAY be used for rich text representation.
externalDocs	External Documentation Object	Additional external documentation for this tag.
This object MAY be extended with Specification Extensions.

4.7.22.2 Tag Object Example
{
	"name": "pet",
	"description": "Pets operations"
}
name: pet
description: Pets operations
4.7.23 Reference Object
A simple object to allow referencing other components in the specification, internally and externally.

The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.

For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.

4.7.23.1 Fixed Fields
Field Name	Type	Description
$ref	string	REQUIRED. The reference string.
This object cannot be extended with additional properties and any properties added SHALL be ignored.

4.7.23.2 Reference Object Example
{
	"$ref": "#/components/schemas/Pet"
}
$ref: '#/components/schemas/Pet'
4.7.23.3 Relative Schema Document Example
{
  "$ref": "Pet.json"
}
$ref: Pet.yaml
4.7.23.4 Relative Documents With Embedded Schema Example
{
  "$ref": "definitions.json#/Pet"
}
$ref: definitions.yaml#/Pet
4.7.24 Schema Object
The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.

For more information about the properties, see JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema.

4.7.24.1 Properties
The following properties are taken directly from the JSON Schema definition and follow the same specifications:

title
multipleOf
maximum
exclusiveMaximum
minimum
exclusiveMinimum
maxLength
minLength
pattern (This string SHOULD be a valid regular expression, according to the Ecma-262 Edition 5.1 regular expression dialect)
maxItems
minItems
uniqueItems
maxProperties
minProperties
required
enum
The following properties are taken from the JSON Schema definition but their definitions were adjusted to the OpenAPI Specification.

type - Value MUST be a string. Multiple types via an array are not supported.
allOf - Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.
oneOf - Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.
anyOf - Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.
not - Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.
items - Value MUST be an object and not an array. Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema. items MUST be present if the type is array.
properties - Property definitions MUST be a Schema Object and not a standard JSON Schema (inline or referenced).
additionalProperties - Value can be boolean or object. Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema. Consistent with JSON Schema, additionalProperties defaults to true.
description - [CommonMark] syntax MAY be used for rich text representation.
format - See Data Type Formats for further details. While relying on JSON Schema’s defined formats, the OAS offers a few additional predefined formats.
default - The default value represents what would be assumed by the consumer of the input as the value of the schema if one is not provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object defined at the same level. For example, if type is string, then default can be "foo" but cannot be 1.
Alternatively, any time a Schema Object can be used, a Reference Object can be used in its place. This allows referencing definitions instead of defining them inline.

Additional properties defined by the JSON Schema specification that are not mentioned here are strictly unsupported.

Other than the JSON Schema subset fields, the following fields MAY be used for further schema documentation:

4.7.24.2 Fixed Fields
Field Name	Type	Description
nullable	boolean	A true value adds "null" to the allowed type specified by the type keyword, only if type is explicitly defined within the same Schema Object. Other Schema Object constraints retain their defined behavior, and therefore may disallow the use of null as a value. A false value leaves the specified or default type unmodified. The default value is false.
discriminator	Discriminator Object	Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See Composition and Inheritance for more details.
readOnly	boolean	Relevant only for Schema "properties" definitions. Declares the property as “read only”. This means that it MAY be sent as part of a response but SHOULD NOT be sent as part of the request. If the property is marked as readOnly being true and is in the required list, the required will take effect on the response only. A property MUST NOT be marked as both readOnly and writeOnly being true. Default value is false.
writeOnly	boolean	Relevant only for Schema "properties" definitions. Declares the property as “write only”. Therefore, it MAY be sent as part of a request but SHOULD NOT be sent as part of the response. If the property is marked as writeOnly being true and is in the required list, the required will take effect on the request only. A property MUST NOT be marked as both readOnly and writeOnly being true. Default value is false.
xml	XML Object	This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.
externalDocs	External Documentation Object	Additional external documentation for this schema.
example	Any	A free-form property to include an example of an instance for this schema. To represent examples that cannot be naturally represented in JSON or YAML, a string value can be used to contain the example with escaping where necessary.
deprecated	boolean	Specifies that a schema is deprecated and SHOULD be transitioned out of usage. Default value is false.
This object MAY be extended with Specification Extensions.

4.7.24.2.1 Composition and Inheritance (Polymorphism)
The OpenAPI Specification allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition. allOf takes an array of object definitions that are validated independently but together compose a single object.

While composition offers model extensibility, it does not imply a hierarchy between the models. To support polymorphism, the OpenAPI Specification adds the discriminator field. When used, the discriminator will be the name of the property that decides which schema definition validates the structure of the model. As such, the discriminator field MUST be a required field. There are two ways to define the value of a discriminator for an inheriting instance.

Use the schema name.
Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name. As such, inline schema definitions, which do not have a given id, cannot be used in polymorphism.
4.7.24.2.2 XML Modeling
The xml property allows extra definitions when translating the JSON definition to XML. The XML Object contains additional information about the available options.

4.7.24.3 Schema Object Examples
4.7.24.3.1 Primitive Sample
{
  "type": "string",
  "format": "email"
}
type: string
format: email
4.7.24.3.2 Simple Model
{
  "type": "object",
  "required": [
    "name"
  ],
  "properties": {
    "name": {
      "type": "string"
    },
    "address": {
      "$ref": "#/components/schemas/Address"
    },
    "age": {
      "type": "integer",
      "format": "int32",
      "minimum": 0
    }
  }
}
type: object
required:
- name
properties:
  name:
    type: string
  address:
    $ref: '#/components/schemas/Address'
  age:
    type: integer
    format: int32
    minimum: 0
4.7.24.3.3 Model with Map/Dictionary Properties
For a simple string to string mapping:

{
  "type": "object",
  "additionalProperties": {
    "type": "string"
  }
}
type: object
additionalProperties:
  type: string
For a string to model mapping:

{
  "type": "object",
  "additionalProperties": {
    "$ref": "#/components/schemas/ComplexModel"
  }
}
type: object
additionalProperties:
  $ref: '#/components/schemas/ComplexModel'
4.7.24.3.4 Model with Example
{
  "type": "object",
  "properties": {
    "id": {
      "type": "integer",
      "format": "int64"
    },
    "name": {
      "type": "string"
    }
  },
  "required": [
    "name"
  ],
  "example": {
    "name": "Puma",
    "id": 1
  }
}
type: object
properties:
  id:
    type: integer
    format: int64
  name:
    type: string
required:
- name
example:
  name: Puma
  id: 1
4.7.24.3.5 Models with Composition
{
  "components": {
    "schemas": {
      "ErrorModel": {
        "type": "object",
        "required": [
          "message",
          "code"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "minimum": 100,
            "maximum": 600
          }
        }
      },
      "ExtendedErrorModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorModel"
          },
          {
            "type": "object",
            "required": [
              "rootCause"
            ],
            "properties": {
              "rootCause": {
                "type": "string"
              }
            }
          }
        ]
      }
    }
  }
}
components:
  schemas:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    ExtendedErrorModel:
      allOf:
      - $ref: '#/components/schemas/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
4.7.24.3.6 Models with Polymorphism Support
{
  "components": {
    "schemas": {
      "Pet": {
        "type": "object",
        "discriminator": {
          "propertyName": "petType"
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "petType": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "petType"
        ]
      },
      "Cat": {
        "description": "A representation of a cat. Note that `Cat` will be used as the discriminator value.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "properties": {
              "huntingSkill": {
                "type": "string",
                "description": "The measured skill for hunting",
                "default": "lazy",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive"
                ]
              }
            },
            "required": [
              "huntingSkill"
            ]
          }
        ]
      },
      "Dog": {
        "description": "A representation of a dog. Note that `Dog` will be used as the discriminator value.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "properties": {
              "packSize": {
                "type": "integer",
                "format": "int32",
                "description": "the size of the pack the dog is from",
                "default": 0,
                "minimum": 0
              }
            },
            "required": [
              "packSize"
            ]
          }
        ]
      }
    }
  }
}
components:
  schemas:
    Pet:
      type: object
      discriminator:
        propertyName: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:  ## "Cat" will be used as the discriminator value
      description: A representation of a cat
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        properties:
          huntingSkill:
            type: string
            description: The measured skill for hunting
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:  ## "Dog" will be used as the discriminator value
      description: A representation of a dog
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        properties:
          packSize:
            type: integer
            format: int32
            description: the size of the pack the dog is from
            default: 0
            minimum: 0
        required:
        - packSize
4.7.25 Discriminator Object
When request bodies or response payloads may be one of a number of different schemas, a discriminator object can be used to aid in serialization, deserialization, and validation. The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.

When using the discriminator, inline schemas will not be considered.

4.7.25.1 Fixed Fields
Field Name	Type	Description
propertyName	string	REQUIRED. The name of the property in the payload that will hold the discriminator value.
mapping	Map[string, string]	An object to hold mappings between payload values and schema names or references.
The discriminator object is legal only when using one of the composite keywords oneOf, anyOf, allOf.

In OAS 3.0, a response payload MAY be described to be exactly one of any number of types:

MyResponseType:
  oneOf:
  - $ref: '#/components/schemas/Cat'
  - $ref: '#/components/schemas/Dog'
  - $ref: '#/components/schemas/Lizard'
which means the payload MUST, by validation, match exactly one of the schemas described by Cat, Dog, or Lizard. In this case, a discriminator MAY act as a “hint” to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:

MyResponseType:
  oneOf:
  - $ref: '#/components/schemas/Cat'
  - $ref: '#/components/schemas/Dog'
  - $ref: '#/components/schemas/Lizard'
  discriminator:
    propertyName: petType
The expectation now is that a property with name petType MUST be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document. Thus the response payload:

{
  "id": 12345,
  "petType": "Cat"
}
Will indicate that the Cat schema be used in conjunction with this payload.

In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional mapping definition MAY be used:

MyResponseType:
  oneOf:
  - $ref: '#/components/schemas/Cat'
  - $ref: '#/components/schemas/Dog'
  - $ref: '#/components/schemas/Lizard'
  - $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'
  discriminator:
    propertyName: petType
    mapping:
      dog: '#/components/schemas/Dog'
      monster: 'https://gigantic-server.com/schemas/Monster/schema.json'
Here the discriminator value of dog will map to the schema #/components/schemas/Dog, rather than the default (implicit) value of Dog. If the discriminator value does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.

When used in conjunction with the anyOf construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.

In both the oneOf and anyOf use cases, all possible schemas MUST be listed explicitly. To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an allOf construct may be used as an alternate schema.

For example:

components:
  schemas:
    Pet:
      type: object
      required:
      - petType
      properties:
        petType:
          type: string
      discriminator:
        propertyName: petType
        mapping:
          dog: Dog
    Cat:
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        # all other properties specific to a `Cat`
        properties:
          name:
            type: string
    Dog:
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        # all other properties specific to a `Dog`
        properties:
          bark:
            type: string
    Lizard:
      allOf:
      - $ref: '#/components/schemas/Pet'
      - type: object
        # all other properties specific to a `Lizard`
        properties:
          lovesRocks:
            type: boolean
a payload like this:

{
  "petType": "Cat",
  "name": "misty"
}
will indicate that the Cat schema be used. Likewise this schema:

{
  "petType": "dog",
  "bark": "soft"
}
will map to Dog because of the definition in the mappings element.

4.7.26 XML Object
A metadata object that allows for more fine-tuned XML model definitions.

When using arrays, XML element names are not inferred (for singular/plural forms) and the name property SHOULD be used to add that information. See examples for expected behavior.

4.7.26.1 Fixed Fields
Field Name	Type	Description
name	string	Replaces the name of the element/attribute used for the described schema property. When defined within items, it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true. If wrapped is false, it will be ignored.
namespace	string	The URI of the namespace definition. Value MUST be in the form of an absolute URI.
prefix	string	The prefix to be used for the name.
attribute	boolean	Declares whether the property definition translates to an attribute instead of an element. Default value is false.
wrapped	boolean	MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books>) or unwrapped (<book/><book/>). Default value is false. The definition takes effect only when defined alongside type being array (outside the items).
This object MAY be extended with Specification Extensions.

4.7.26.2 XML Object Examples
The examples of the XML object definitions are included inside a property definition of a Schema Object with a sample of the XML representation of it.

4.7.26.2.1 No XML Element
Basic string property:

{
    "animals": {
        "type": "string"
    }
}
animals:
  type: string
<animals>...</animals>
Basic string array property (wrapped is false by default):

{
    "animals": {
        "type": "array",
        "items": {
            "type": "string"
        }
    }
}
animals:
  type: array
  items:
    type: string
<animals>...</animals>
<animals>...</animals>
<animals>...</animals>
4.7.26.2.2 XML Name Replacement
{
  "animals": {
    "type": "string",
    "xml": {
      "name": "animal"
    }
  }
}
animals:
  type: string
  xml:
    name: animal
<animal>...</animal>
4.7.26.2.3 XML Attribute, Prefix and Namespace
In this example, a full model definition is shown.

{
  "Person": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer",
        "format": "int32",
        "xml": {
          "attribute": true
        }
      },
      "name": {
        "type": "string",
        "xml": {
          "namespace": "http://example.com/schema/sample",
          "prefix": "sample"
        }
      }
    }
  }
}
Person:
  type: object
  properties:
    id:
      type: integer
      format: int32
      xml:
        attribute: true
    name:
      type: string
      xml:
        namespace: http://example.com/schema/sample
        prefix: sample
<Person id="123">
    <sample:name xmlns:sample="http://example.com/schema/sample">example</sample:name>
</Person>
4.7.26.2.4 XML Arrays
Changing the element names:

{
  "animals": {
    "type": "array",
    "items": {
      "type": "string",
      "xml": {
        "name": "animal"
      }
    }
  }
}
animals:
  type: array
  items:
    type: string
    xml:
      name: animal
<animal>value</animal>
<animal>value</animal>
The external name property has no effect on the XML:

{
  "animals": {
    "type": "array",
    "items": {
      "type": "string",
      "xml": {
        "name": "animal"
      }
    },
    "xml": {
      "name": "aliens"
    }
  }
}
animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
<animal>value</animal>
<animal>value</animal>
Even when the array is wrapped, if a name is not explicitly defined, the same name will be used both internally and externally:

{
  "animals": {
    "type": "array",
    "items": {
      "type": "string"
    },
    "xml": {
      "wrapped": true
    }
  }
}
animals:
  type: array
  items:
    type: string
  xml:
    wrapped: true
<animals>
  <animals>value</animals>
  <animals>value</animals>
</animals>
To overcome the naming problem in the example above, the following definition can be used:

{
  "animals": {
    "type": "array",
    "items": {
      "type": "string",
      "xml": {
        "name": "animal"
      }
    },
    "xml": {
      "wrapped": true
    }
  }
}
animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    wrapped: true
<animals>
  <animal>value</animal>
  <animal>value</animal>
</animals>
Affecting both internal and external names:

{
  "animals": {
    "type": "array",
    "items": {
      "type": "string",
      "xml": {
        "name": "animal"
      }
    },
    "xml": {
      "name": "aliens",
      "wrapped": true
    }
  }
}
animals:
  type: array
  items:
    type: string
    xml:
      name: animal
  xml:
    name: aliens
    wrapped: true
<aliens>
  <animal>value</animal>
  <animal>value</animal>
</aliens>
If we change the external element but not the internal ones:

{
  "animals": {
    "type": "array",
    "items": {
      "type": "string"
    },
    "xml": {
      "name": "aliens",
      "wrapped": true
    }
  }
}
animals:
  type: array
  items:
    type: string
  xml:
    name: aliens
    wrapped: true
<aliens>
  <aliens>value</aliens>
  <aliens>value</aliens>
</aliens>
4.7.27 Security Scheme Object
Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), OAuth2’s common flows (implicit, password, client credentials and authorization code) as defined in [RFC6749], and OpenID Connect Discovery.

4.7.27.1 Fixed Fields
Field Name	Type	Applies To	Description
type	string	Any	REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
description	string	Any	A short description for security scheme. [CommonMark] syntax MAY be used for rich text representation.
name	string	apiKey	REQUIRED. The name of the header, query or cookie parameter to be used.
in	string	apiKey	REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
scheme	string	http	REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235] Section 5.1. The values used SHOULD be registered in the IANA Authentication Scheme registry.
bearerFormat	string	http ("bearer")	A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
flows	OAuth Flows Object	oauth2	REQUIRED. An object containing configuration information for the flow types supported.
openIdConnectUrl	string	openIdConnect	REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
This object MAY be extended with Specification Extensions.

4.7.27.2 Security Scheme Object Example
4.7.27.2.1 Basic Authentication Sample
{
  "type": "http",
  "scheme": "basic"
}
type: http
scheme: basic
4.7.27.2.2 API Key Sample
{
  "type": "apiKey",
  "name": "api_key",
  "in": "header"
}
type: apiKey
name: api_key
in: header
4.7.27.2.3 JWT Bearer Sample
{
  "type": "http",
  "scheme": "bearer",
  "bearerFormat": "JWT",
}
type: http
scheme: bearer
bearerFormat: JWT
4.7.27.2.4 Implicit OAuth2 Sample
{
  "type": "oauth2",
  "flows": {
    "implicit": {
      "authorizationUrl": "https://example.com/api/oauth/dialog",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    }
  }
}
type: oauth2
flows:
  implicit:
    authorizationUrl: https://example.com/api/oauth/dialog
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
4.7.28 OAuth Flows Object
Allows configuration of the supported OAuth Flows.

4.7.28.1 Fixed Fields
Field Name	Type	Description
implicit	OAuth Flow Object	Configuration for the OAuth Implicit flow
password	OAuth Flow Object	Configuration for the OAuth Resource Owner Password flow
clientCredentials	OAuth Flow Object	Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.
authorizationCode	OAuth Flow Object	Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.
This object MAY be extended with Specification Extensions.

4.7.29 OAuth Flow Object
Configuration details for a supported OAuth Flow

4.7.29.1 Fixed Fields
Field Name	Type	Applies To	Description
authorizationUrl	string	oauth2 ("implicit", "authorizationCode")	REQUIRED. The authorization URL to be used for this flow. This MUST be in the form of a URL.
tokenUrl	string	oauth2 ("password", "clientCredentials", "authorizationCode")	REQUIRED. The token URL to be used for this flow. This MUST be in the form of a URL.
refreshUrl	string	oauth2	The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.
scopes	Map[string, string]	oauth2	REQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.
This object MAY be extended with Specification Extensions.

4.7.29.2 OAuth Flow Object Examples
{
  "type": "oauth2",
  "flows": {
    "implicit": {
      "authorizationUrl": "https://example.com/api/oauth/dialog",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "authorizationCode": {
      "authorizationUrl": "https://example.com/api/oauth/dialog",
      "tokenUrl": "https://example.com/api/oauth/token",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    }
  }
}
type: oauth2
flows:
  implicit:
    authorizationUrl: https://example.com/api/oauth/dialog
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  authorizationCode:
    authorizationUrl: https://example.com/api/oauth/dialog
    tokenUrl: https://example.com/api/oauth/token
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
4.7.30 Security Requirement Object
Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.

Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.

When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.

4.7.30.1 Patterned Fields
Field Pattern	Type	Description
{name}	[string]	Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type "oauth2" or "openIdConnect", then the value is a list of scope names required for the execution, and the list MAY be empty if authorization does not require a specified scope. For other security scheme types, the array MUST be empty.
4.7.30.2 Security Requirement Object Examples
4.7.30.2.1 Non-OAuth2 Security Requirement
{
  "api_key": []
}
api_key: []
4.7.30.2.2 OAuth2 Security Requirement
{
  "petstore_auth": [
    "write:pets",
    "read:pets"
  ]
}
petstore_auth:
- write:pets
- read:pets
4.7.30.2.3 Optional OAuth2 Security
Optional OAuth2 security as would be defined in an OpenAPI Object or an Operation Object:

{
  "security": [
    {},
    {
      "petstore_auth": [
        "write:pets",
        "read:pets"
      ]
    }
  ]
}
security:
  - {}
  - petstore_auth:
    - write:pets
    - read:pets
4.8 Specification Extensions
While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.

The extensions properties are implemented as patterned fields that are always prefixed by "x-".

Field Pattern	Type	Description
^x-	Any	Allows extensions to the OpenAPI Schema. The field name MUST begin with x-, for example, x-internal-id. The value can be null, a primitive, an array or an object. Can have any valid JSON format value.
The extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).

4.9 Security Filtering
Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation.

The reasoning is to allow an additional layer of access control over the documentation. While not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.

Two examples of this:

The Paths Object MAY be empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can’t access any documentation. They’d still have access to the Info Object which may contain additional information regarding authentication.
The Path Item Object MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different from hiding the path itself from the Paths Object, because the user will be aware of its existence. This allows the documentation provider to finely control what the viewer can see.
A. Appendix A: Revision History
Version	Date	Notes
3.0.3	2020-02-20	Patch release of the OpenAPI Specification 3.0.3
3.0.2	2018-10-08	Patch release of the OpenAPI Specification 3.0.2
3.0.1	2017-12-06	Patch release of the OpenAPI Specification 3.0.1
3.0.0	2017-07-26	Release of the OpenAPI Specification 3.0.0
3.0.0-rc2	2017-06-16	rc2 of the 3.0 specification
3.0.0-rc1	2017-04-27	rc1 of the 3.0 specification
3.0.0-rc0	2017-02-28	Implementer’s Draft of the 3.0 specification
2.0	2015-12-31	Donation of Swagger 2.0 to the OpenAPI Initiative
2.0	2014-09-08	Release of Swagger 2.0
1.2	2014-03-14	Initial release of the formal document.
1.1	2012-08-22	Release of Swagger 1.1
1.0	2011-08-10	First release of the Swagger Specification
B. References
B.1 Normative references
[ABNF]
Augmented BNF for Syntax Specifications: ABNF. D. Crocker, Ed.; P. Overell. IETF. January 2008. Internet Standard. URL: https://www.rfc-editor.org/rfc/rfc5234
[CommonMark]
CommonMark Spec. URL: https://spec.commonmark.org/
[CommonMark-0.27]
CommonMark Spec, Version 0.27. John MacFarlane. 18 November 2016. URL: https://spec.commonmark.org/0.27/
[IANA-HTTP-AUTHSCHEMES]
Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry. IANA. URL: https://www.iana.org/assignments/http-authschemes/
[IANA-HTTP-STATUS-CODES]
Hypertext Transfer Protocol (HTTP) Status Code Registry. IANA. URL: https://www.iana.org/assignments/http-status-codes/
[JSON-Reference]
JSON Reference. Paul Bryan; Kris Zyp. Internet Engineering Task Force (IETF). 16 September 2012. Internet-Draft. URL: https://datatracker.ietf.org/doc/html/draft-pbryan-zyp-json-ref-03
[JSON-Schema-05]
JSON Schema: A Media Type for Describing JSON Documents. Draft 5. Austin Wright. Internet Engineering Task Force (IETF). 13 October 2016. Internet-Draft. URL: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-00
[JSON-Schema-Validation-05]
JSON Schema Validation: A Vocabulary for Structural Validation of JSON. Draft 5. Austin Wright; G. Luff. Internet Engineering Task Force (IETF). 13 October 2016. Internet-Draft. URL: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00
[RFC1866]
Hypertext Markup Language - 2.0. T. Berners-Lee; D. Connolly. IETF. November 1995. Historic. URL: https://www.rfc-editor.org/rfc/rfc1866
[RFC2119]
Key words for use in RFCs to Indicate Requirement Levels. S. Bradner. IETF. March 1997. Best Current Practice. URL: https://www.rfc-editor.org/rfc/rfc2119
[RFC3339]
Date and Time on the Internet: Timestamps. G. Klyne; C. Newman. IETF. July 2002. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc3339
[RFC3986]
Uniform Resource Identifier (URI): Generic Syntax. T. Berners-Lee; R. Fielding; L. Masinter. IETF. January 2005. Internet Standard. URL: https://www.rfc-editor.org/rfc/rfc3986
[RFC6570]
URI Template. J. Gregorio; R. Fielding; M. Hadley; M. Nottingham; D. Orchard. IETF. March 2012. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc6570
[RFC6749]
The OAuth 2.0 Authorization Framework. D. Hardt, Ed.. IETF. October 2012. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc6749
[RFC6838]
Media Type Specifications and Registration Procedures. N. Freed; J. Klensin; T. Hansen. IETF. January 2013. Best Current Practice. URL: https://www.rfc-editor.org/rfc/rfc6838
[RFC6901]
JavaScript Object Notation (JSON) Pointer. P. Bryan, Ed.; K. Zyp; M. Nottingham, Ed.. IETF. April 2013. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc6901
[RFC7159]
The JavaScript Object Notation (JSON) Data Interchange Format. T. Bray, Ed.. IETF. March 2014. Proposed Standard. URL: https://www.rfc-editor.org/rfc/rfc7159
[RFC7230]
Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://httpwg.org/specs/rfc7230.html
[RFC7231]
Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://httpwg.org/specs/rfc7231.html
[RFC7235]
Hypertext Transfer Protocol (HTTP/1.1): Authentication. R. Fielding, Ed.; J. Reschke, Ed.. IETF. June 2014. Proposed Standard. URL: https://httpwg.org/specs/rfc7235.html
[RFC8174]
Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words. B. Leiba. IETF. May 2017. Best Current Practice. URL: https://www.rfc-editor.org/rfc/rfc8174
[YAML]
YAML Ain’t Markup Language (YAML™) Version 1.2. Oren Ben-Kiki; Clark Evans; Ingy döt Net. 1 October 2009. URL: http://yaml.org/spec/1.2/spec.html
↑

OpenAPI.Tools
Stay up to date with a community-driven list of high-quality, modern tools for OpenAPI. An open source project from APIs You Won't Hate.

Is there a tool missing that you think should be on the list?
Submit a Pull Request on GitHub apisyouwonthate/openapi.tools


Sponsored by Zudoku - Open-source, OpenAPI powered, highly customizable API documentation.
Tool Types
We've organised everything into categories so you can jump to the section you're interested in.

Auto Generators: Tools that will take your code and turn it into an OpenAPI Specification document
Converters: Various tools to convert to and from OpenAPI and other API description formats.
Data Validators: Check to see if API requests and responses are lining up with the API description.
Description Validators: Check your API description to see if it is valid OpenAPI.
Documentation: Render API Description as HTML (or maybe a PDF) so slightly less technical people can figure out how to work with the API.
DSL: Writing YAML by hand is no fun, and maybe you don't want a GUI, so use a Domain Specific Language to write OpenAPI in your language of choice.
Gateways: API Gateways and related tools that have integrated support for OpenAPI.
GUI Editors: Visual editors help you design APIs without needing to memorize the entire OpenAPI specification.
Learning: Whether you're trying to get documentation for a third party API based on traffic, or are trying to switch to design-first at an organization with no OpenAPI at all, learning can help you move your API spec forward and keep it up to date.
Miscellaneous: Anything else that does stuff with OpenAPI but hasn't quite got enough to warrant its own category.
Mock Servers: Fake servers that take description document as input, then route incoming HTTP requests to example responses or dynamically generates examples.
Monitoring: Monitoring tools let you know what is going on in your API.
Parsers: Loads and read OpenAPI descriptions, so you can work with them programmatically.
SDK Generators: Generate code to give to consumers, to help them avoid interacting at a HTTP level.
Security: By poking around your OpenAPI description, some tools can look out for attack vectors you might not have noticed.
Server Implementations: Easily create and implement resources and routes for your APIs.
Testing: Quickly execute API requests and validate responses on the fly through command line or GUI interfaces.
Text Editors: Text editors give you visual feedback whilst you write OpenAPI, so you can see what docs might look like.
Auto Generators
Tools that will take your code and turn it into an OpenAPI Specification document

Name	Language	v3.1	v3.0	v2.0	GitHub
Fuego - Golang Fuego - web & API framework generating OpenAPI 3 spec from source code	Go	❌	✅	❌	github octocat
GranthAi - NodeJs OpenAPI 3 based documentation generator which sits between server APIs and anyone calling the APIs	Javascript	❌	✅	❌	github octocat
har-to-openapi - Automatically generate OpenAPI 3.0 Spec by using network requests captured in one or more HAR files	TypeScript	❌	✅	❌	github octocat
har2openapi - Automatically generate OpenAPI 3.0 Spec by using network requests captured in one or more HAR files	TypeScript	❌	✅	❌	github octocat
Huma - A modern, simple, fast & flexible micro framework for building HTTP REST/RPC APIs in Go backed by OpenAPI 3 and JSON Schema.	Go	✅	✅	❌	github octocat
mitmproxy2swagger - A tool for automatically converting mitmproxy captures to OpenAPI 3.0 specifications. Automatically reverse-engineer REST APIs by just running the apps and capturing the traffic.	Python	❌	✅	❌	github octocat
OpenAPI AutoSpec - Proxy server that generates API descriptions for any app or website on localhost.	JavaScript	❌	✅	❌	github octocat
OpenAPI DevTools - Browser extension that generates API specs for any app or website	TypeScript	✅	✅	❌	github octocat
OpenApiSpecGeneratorPlugin - Built-in plugin for open-source DevProxy that automatically generates OpenAPI 3.0 Spec from captured network requests	C#	❌	✅	❌	github octocat
Scramble - Modern Laravel OpenAPI documentation generator. No PHPDoc annotations required.	PHP	✅	❌	❌	github octocat
TypeSpec - Emit OpenAPI specifications from API descriptions defined in the generic, interoperable, and extensible TypeSpec language.	TypeScript	❌	✅	❌	github octocat
Converters
Various tools to convert to and from OpenAPI and other API description formats.

Name	Language	v3.1	v3.0	v2.0	GitHub
@hey-api/openapi-ts - Turn your OpenAPI description into a beautiful TypeScript client.	TypeScript	✅	✅	✅	github octocat
allof-merge - Simplify your JsonSchema by combining allOf safely	TypeScript	✅	✅	❌	github octocat
api - Magical SDK generation from an OpenAPI definition	JavaScript, TypeScript	✅	✅	✅	github octocat
api-ref-bundler - Bundle all external $ref in Json based API document into single document	TypeScript	✅	✅	✅	github octocat
APIMatic Transformer - Transform API Descriptions to and from RAML, API Blueprint, OAI v2/v3, WSDL, etc.	SaaS	✅	✅	✅	
avantation - Generate OpenAPI 3.x specification from HAR.	TypeScript	👷	✅	❌	github octocat
docs - A modern alternative to `go-swagger`. Offers generation and parsing of OpenAPI Specs, depending on the usage.		✅	✅	❌	github octocat
go-swagger - Unmaintained v2.0 only project seeking new maintainer, or probably a fork. Parser, validator, generates descriptions from code, or code from descriptions!	Go	❌	❌	✅	github octocat
Google Gnostic - Compile OpenAPI descriptions into equivalent Protocol Buffer representations	Go	❌	✅	✅	github octocat
JSON Schema to OpenAPI Schema - Due to the OpenAPI v3.0 and JSON Schema discrepancy, you can use this JS library to convert JSON Schema objects to OpenAPI Schema.	TypeScript	❌	✅	❌	github octocat
Karate-IDE - Generates KarateDSL Tests and Mocks from OpenAPI 3.0 documents and so you can quickly test/explore your API.	VSCode Extension	❌	✅	❌	github octocat
laravel-openapi - Generate OpenAPI 3 specification for Laravel Applications.	PHP	❌	✅	❌	github octocat
OAS RAML Converter - Converts between OpenAPI and RAML API specifications	Node.js	❌	✅	✅	github octocat
oas-normalize - Comprehensive tooling for working with OpenAPI definitions.	JavaScript, TypeScript	✅	✅	✅	github octocat
OData OpenAPI - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter	Node.js / XSLT	✅	✅	✅	github octocat
OData.OpenAPI - Convert an Edm (Entity Data Model) to OpenAPI 3.0	.NET	❌	✅	❌	github octocat
OpenAPI Filter - Filter internal components from OpenAPI Descriptions	Node.js	✅	✅	✅	github octocat
OpenAPI Schema to JSON Schema - Due to the OpenAPI v3.0 and JSON Schema discrepancy, you can use this JS library to convert OpenAPI Schema objects to proper JSON Schema.	TypeScript	❌	✅	❌	github octocat
OpenAPI TypeScript - Convert static OpenAPI schemas to TypeScript types quickly using pure Node.js. Fast, lightweight, (almost) dependency-free, and no Java/node-gyp/running OpenAPI servers necessary.	TypeScript	✅	✅	✅	github octocat
openapi-format - A CLI to format an OpenAPI document by ordering fields in a hierarchical order, with the option to filter out flags, tags, methods, operationIDs; including the option to convert an OpenAPI 3.0 document to an OpenAPI version 3.1.	Node.js	✅	✅	❌	github octocat
openapi-merge - A simple tool to merge multiple independent OpenAPI description files into one file. Useful when you have a number of microservices and you decide to expose them through a gateway.	TypeScript	❌	✅	❌	github octocat
openapi-python-client - Generate modern Python clients from OpenAPI 3.0 documents.	Python	✅	✅	❌	github octocat
openapi-to-postman - Convert OpenAPI and Swagger specs to the Postman Collection (v2) format	JavaScript	✅	✅	✅	github octocat
portman - Port OpenAPI Spec to Postman Collection, with contract & variation tests included!	Node.js	❌	✅	❌	github octocat
Step CI - Open-source framework for API Quality Assurance. Generate multi-step test-scenarios from OpenAPI. Validate responses against description documents and more.	CLI, Node.js	❌	✅	❌	github octocat
swagger2openapi - Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file or respecting $refs. Part of oas-kit.	Node.js / CLI	❌	✅	✅	github octocat
typeconv - typeconv is an extremely fast silver bullet type conversion utility. It converts between any of its supported types, bidirectionally. typeconv lets you convert between type systems which have core-types converters, such as JSON Schema, TypeScript, GraphQL, Open API and SureType. This package can be used as an API programatically or as an application (installed in node_modules/.bin or by using e.g. npx).	typescript	❌	✅	❌	github octocat
Data Validators
Check to see if API requests and responses are lining up with the API description.

Name	Language	v3.1	v3.0	v2.0	GitHub
api-codegen-ts - Generates TypeScript models, response validators, and operation controllers from OpenAPI descriptions	TypeScript	❌	✅	✅	github octocat
APIFuzzer - Fuzz test your application using your OpenAPI definition without coding. Integrate into CI/CD, get Junit XML test result and JSON report of failures	Python	❌	✅	✅	github octocat
committee - Validation middleware for Rack server. This gem validates request and response using an OpenAPI Description. And convert parameter string to specific Ruby object (e.g. convert datetime string to DateTime class).	Ruby	❌	✅	✅	github octocat
django-contract-tester - Validate Django REST Framework (DRF) and Django Ninja APIs against their OpenAPI specification.	Python	✅	✅	✅	github octocat
express-openapi-validator - 🦋 Auto-validate API requests and responses in ExpressJS.	JavaScript	❌	✅	❌	github octocat
fastify-openapi-glue - A plugin for the Fastify webserver to autogenerate a Fastify configuration based on a OpenApi description.	Node.js	✅	✅	✅	github octocat
Fitting - Library add improve test log for RSpec and WebMock, validate its according to API Blueprint and Open API, show the documentation coverage with log.	Ruby	✅	✅	✅	github octocat
Fuego - Golang Fuego - web & API framework generating OpenAPI 3 spec from source code	Go	❌	✅	❌	github octocat
Hot Potato - A reverse proxy that validates responses against an OpenAPI description. It can be used as either a standalone .NET tool, or installed as NuGet packages for an ASP.NET Core integration testing project.	C#	❌	❌	❌	github octocat
Huma - A modern, simple, fast & flexible micro framework for building HTTP REST/RPC APIs in Go backed by OpenAPI 3 and JSON Schema.	Go	✅	✅	❌	github octocat
JSONSchema::Validator - A Perl library which validates request/response according to an OpenAPI specification	Perl	❌	✅	❌	github octocat
kin-openapi - OpenAPI 3.0 (and Swagger v2) implementation for Go (parsing, converting, validation, and more)	Go	❌	✅	❌	github octocat
Mayhem for API - Probe your REST API with an infinite stream of test cases generated automatically from your OpenAPI specification.	Any	✅	✅	✅	github octocat
oas-tools - NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description over Express servers, including security validations	Node.js	❌	✅	❌	github octocat
OpenAPI Enforcer - Validate your OpenAPI document, serialize, deserialize, and validate incoming requests and outgoing responses, and simplify response building. You can even produce mock data.	Node.js	❌	✅	✅	github octocat
OpenAPI HttpFoundation Testing - Validate your HttpFoundation requests and responses (Symfony, Laravel, Drupal...) against OpenAPI definitions	PHP	✅	✅	❌	github octocat
openapi-changes - The world's fastest, most beautiful, powerful and detailed OpenAPI change detection tool on earth. Explore every change in An OpenAPI spec. See changes over time, go back into history and see what changed with each commit. Identifies all breaking changes, Powered by libopenapi.	go	✅	✅	✅	github octocat
openapi-core - Validate your requests and responses against an OpenAPI 3 specification and get very verbose and human-readable descriptions of errors. You will receive a deserialized object along with validation result, so you won't need to deserialize it twice.	Python	✅	✅	❌	github octocat
openapi-data-validator - Validate API requests against an OpenAPI schema. Lightweight, focused, and integrates with any framework	Node.js/ Javascript	❌	✅	❌	github octocat
openapi-examples-validator - Validates embedded JSON-examples in OpenAPI-specs	JavaScript	❌	✅	✅	github octocat
openapi-psr7-validator - Using a PHP framework that supports PSR-7? Get free validation without writing a bunch of code, by registering this middleware and pointing it at your API description document.	PHP	✅	✅	❌	github octocat
openapi-request-response-validation - Runtime validation of requests and responses of your API according to the OpenAPI specs, returning (if any) the list of errors found. It is integrated via a simple REST API therefore usable by Java and non-Java applications and CI/CD.	Java	❌	✅	✅	github octocat
openapi-spring-webflux-validator - A friendly kotlin library to validate API endpoints against an OpenAPI description document.	Java/Kotlin	❌	✅	✅	github octocat
openapi-validator-bundle - Validates Request and Response using Symfony Framework	PHP	❌	✅	❌	github octocat
openapi-validator-middleware - Provides data validation within an Express, Koa or Fastify app according to a OpenAPI definition. It uses Ajv under the hood for validation.	Node.js	❌	✅	✅	github octocat
openapi.tanna.dev/go/validator - A Go library for making it easier to validate that your OpenAPI contracts match your HTTP request/responses used in your tests. Based on kin-openapi.	Go	❌	✅	❌	github octocat
OpenAPI::Modern - OpenAPI v3.1 validator and JSON Schema validator (draft7, draft2019-09, draft2020-12)	Perl	✅	❌	❌	github octocat
openapi_first - It validates requests and responses against your API description using rack middlewares or a low-level interface. It gives you access to request parameters that are parsed exactly as described in your API description and produces useful customizable error responses if request validation fails.	Ruby	✅	✅	❌	github octocat
openVALIDATION - Allows complex validation rules to be specified in openAPI spec files using natural language.	Java	❌	✅	❌	github octocat
Step CI - Open-source framework for API Quality Assurance. Generate multi-step test-scenarios from OpenAPI. Validate responses against description documents and more.	CLI, Node.js	❌	✅	❌	github octocat
vacuum - A blazing fast OpenAPI linter and validator that is compatible with Spectral rulesets, and designed for enterprise-grade speed and scale.	go	✅	✅	✅	github octocat
Wiremock - WireMock Cloud is a managed, hosted version of WireMock, developed by the same team who wrote the open-source project. It is built on the same technology that powers open source WireMock and is 100% compatible with the WireMock API, with additional features that make it quick and easy to mock any API you depend on. WireMock Cloud also introduces advanced capabilities such as chaos engineering, OpenAPI generation, validation and documentation as well as better collaboration and user management.	SaaS	✅	✅	✅	github octocat
wiretap - Wiretap is a feature packed OpenAPI compliance testing tool. Validate that a client and server are compliant with an OpenAPI spec. Rewrite paths, inject headers, and even host a UI locally to test an OpenAPI implementation.	go	✅	✅	✅	github octocat
Documentation
Render API Description as HTML (or maybe a PDF) so slightly less technical people can figure out how to work with the API.

Name	Language	v3.1	v3.0	v2.0	GitHub
🌿 Fern
Sponsored I'm a huge fan of Fern. It's a force multiplier for API teams - Mike Bifulco, APIs You Won't Hate cofounder
TypeScript, Java, Python, Go, Ruby, C#, PHP, Swift, and Rust	✅	✅	✅	github octocat
// Speakeasy - Generate & publish SDKs in 10+ languages, Terraform Providers, and docs from your OpenAPI
Sponsored
TypeScript, Python, Go, Java, Terraform, C#, PHP, Ruby, Swift, Unity	✅	✅	❌	github octocat
api-diff-viewer - React component to view the difference between two Json based API documents. Supported specifications: JsonSchema, OpenAPI 3.x, AsyncAPI 2.x.	TypeScript	✅	✅	✅	github octocat
APIGit - the native Git based collaboration platform for API design, document, mock, testing and share.	SaaS	✅	✅	✅	github octocat
APIMatic Developer Experience Portal - Customizable developer portals packed with language specific documentation, client libraries, code samples, an API console and much more.	SaaS	✅	✅	✅	
BlocklyAutomation - Input any OpenAPI document to have generated Blocks in Blockly form to test and generate documentation.	Javascript / .NET	✅	✅	❌	github octocat
Bump.sh - Bump.sh generates elegant documentation and changelogs from your OpenAPI specifications. Git diff, for your API. Integrates with CI and Slack.	SaaS	✅	✅	✅	github octocat
DeveloperHub - Collaboration platform for product and API documentation	SaaS	✅	✅	✅	
Docuo - Docuo is a lightweight platform that transforms your static contents into a modern developer hub, API reference, product guides, and more.	SaaS	✅	✅	❌	github octocat
Elements - Build beautiful, interactive API Docs with embeddable React or Web Components, powered by OpenAPI and Markdown	Javascript / Custom Element	✅	✅	✅	github octocat
Frevo - Keep track of changes in your OpenAPI specifications & generate API references ⛱️	SaaS	✅	✅	❌	
GranthAi - NodeJs OpenAPI 3 based documentation generator which sits between server APIs and anyone calling the APIs	Javascript	❌	✅	❌	github octocat
HopFront - HopFront automatically builds an user friendly UI from a collection of OpenAPI specifications. You can setup custom dashboard tailored to the way your interact with your APIs.	TypeScript	❌	✅	❌	github octocat
jekyll-openapi - An OpenAPI 3 documentation website generator built with Jekyll for use on GitHub Pages.	Jekyll	❌	✅	❌	
Kong Enterprise Edition - Highly customizable developer portal with developer onboarding, integrated with the Kong API Gateway	Lua	✅	✅	✅	
KrakenD API Gateway - KrakenD is a high-performance, stateless API Gateway, seamlessly integrated with OpenAPI. It facilitates automatic API documentation and provides the capability to import existing specifications for generating configuration and mock servers.	Golang	❌	✅	✅	
Kusk Gateway - Kusk-Gateway is an OpenAPI-driven API Gateway for Kubernetes. It empowers you to develop, validate, mock and deploy your APIs in a matter of minutes using both manual and automated GitOps/APIOps workflows.	Kubernetes	❌	✅	✅	github octocat
MkDocs Redoc Tag - A MkDocs plugin supports adding Redoc to the page.	Python	✅	✅	✅	github octocat
MkDocs Swagger UI Tag - A MkDocs plugin supports for add Swagger UI in page.	Python	✅	✅	✅	github octocat
MrinDoc - OpenAPI description document viewer.	Vue.JS	❌	✅	✅	github octocat
Nexmo OAS Renderer - Ruby OpenAPI docs rendering, use standalone or add to your Rails app	Ruby	❌	✅	❌	github octocat
oas-tools - NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description over Express servers, including security validations	Node.js	❌	✅	❌	github octocat
oas3-api-snippet-enricher - Enrich your existing description documents with generated code samples	JavaScript	❌	✅	❌	github octocat
OpenAPI AutoSpec - Proxy server that generates API descriptions for any app or website on localhost.	JavaScript	❌	✅	❌	github octocat
OpenAPI DevTools - Browser extension that generates API specs for any app or website	TypeScript	✅	✅	❌	github octocat
OpenAPI Explorer - Generate and render fully customizable API documentation, then explore and execute API requests via the integrated console.	Javascript/Custom Element	✅	✅	✅	github octocat
openapi-changes - The world's fastest, most beautiful, powerful and detailed OpenAPI change detection tool on earth. Explore every change in An OpenAPI spec. See changes over time, go back into history and see what changed with each commit. Identifies all breaking changes, Powered by libopenapi.	go	✅	✅	✅	github octocat
openapi-dev-tool - OpenAPI Dev Tool proposes to developers a unique tool to address development and industrialization needs!	JavaScript	✅	✅	✅	github octocat
OpenAPI-UI - Create simple and beautiful OpenAPI/Swagger documentation from OpenAPI files. Generate mock parameters and call APIs. Like Postman, but for OpenAPI specifications.	TypeScript	❌	✅	✅	github octocat
openapi-viewer - Browse and test a REST API described with the OpenAPI 3.0 Specification	Vue.js	❌	✅	❌	github octocat
OpenDocumenter - OpenDocumenter is a automatic documentation generator for OpenAPI v3 schemas. Simply provide your schema file in JSON or YAML, then sit back and enjoy the documentation.	Vue.js	👷	✅	✅	
RapiDoc - Custom Element to view OpenAPI descriptions.	Web Component	✅	✅	✅	github octocat
RapiPdf - Custom Element to generate PDF from OpenAPI descriptions.	Web Component	❌	✅	✅	github octocat
ReadMe - Interactive developer hubs that help users succeed with your APIs 🦉	SaaS	✅	✅	✅	github octocat
ReDoc - Open source API reference docs from OpenAPI descriptions	React.js	✅	✅	✅	github octocat
Redocly CLI - Bring versatile OpenAPI validation, linting & bundling to your command line with this open-source Swiss-army knife.	CLI & TypeScript	✅	✅	✅	github octocat
RestCase Docs - An API-first and security-first management platform. Design visually and we will create a beautiful API documentation for your APIs.	SaaS	❌	✅	✅	
Restish - A CLI for REST-ish APIs with HTTP/2, built-in auth, content negotiation, caching, and more that understands and can discover OpenAPI descriptions.	CLI / Go	✅	✅	❌	github octocat
Scalar - Beautiful Open-Source API references from Swagger/OAS files ✨	Vue.js	✅	✅	✅	github octocat
Scramble - Modern Laravel OpenAPI documentation generator. No PHPDoc annotations required.	PHP	✅	❌	❌	github octocat
Scribe - Generate API documentation for humans from your Laravel codebase.	PHP	❌	✅	❌	github octocat
Stoplight Docs - Create beautiful, customizable, interactive API documentation generated from OpenAPI, integrated with Stoplight Studio.	SaaS	✅	✅	✅	
Traefik Hub - Traefik Hub is a Kubernetes-native API Management solution for publishing, securing, and managing APIs. Configuration is driven by Kubernetes CRDs, labels, and selectors for effective GitOps.	Go	❌	✅	✅	github octocat
Treblle - Treblle is a lightweight SDK that helps Engineering and Product teams build, ship, and maintain REST based APIs faster.		✅	✅	❌	
VSCode OpenAPI Preview - Preview OpenAPI v3.0 & v3.1 documents in Visual Studio Code using Spotlight Elements.	TypeScript	✅	✅	❌	github octocat
VSCode OpenAPI Viewer - Preview and edit JSON or YAML OpenAPI specifications in Visual Studio Code using RapiDoc.	TypeScript	✅	✅	✅	github octocat
widdershins - Generate Slate/Shins markdown from OpenAPI 2.0/3.0.x	Node.js	❌	✅	✅	github octocat
Wiremock - WireMock Cloud is a managed, hosted version of WireMock, developed by the same team who wrote the open-source project. It is built on the same technology that powers open source WireMock and is 100% compatible with the WireMock API, with additional features that make it quick and easy to mock any API you depend on. WireMock Cloud also introduces advanced capabilities such as chaos engineering, OpenAPI generation, validation and documentation as well as better collaboration and user management.	SaaS	✅	✅	✅	github octocat
Zudoku - OpenAPI powered, highly customizable, API reference and documentation framework with CDN packaged and self-hosted options.	React	✅	✅	❌	github octocat
Zuplo (OpenAPI-based gateway and documentation) - Zuplo is an API gateway designed for developers. Natively powered by OpenAPI (3.1 or 3.0), zuplo offers an OpenAPI design surface, API documentation and a serverless, programmable edge gateway that includes request validation, auth, rate-limiting and more.	Web / SaaS	✅	✅	❌	
DSL
Writing YAML by hand is no fun, and maybe you don't want a GUI, so use a Domain Specific Language to write OpenAPI in your language of choice.

Name	Language	v3.1	v3.0	v2.0	GitHub
BOATS - BOATS allows for larger teams to contribute to multi-file OpenAPI definitions by writing Nunjucks tpl syntax in YAML with a few important helpers to ensure stricter consistency, eg operationId: <$ uniqueOpId() $>.	Node.js	❌	✅	✅	github octocat
CUE - CUE is an open source language, with a rich set of APIs and tooling, for defining, generating, and validating all kinds of data configuration, APIs, database schemas, code, etc. CUE currently supports generating OpenAPI through its API.	CUE	❌	✅	❌	
Goa - Goa provides a holistic approach for developing remote APIs and microservices in Go. implementers don't have to worry about the documentation getting out of sync as Goa takes care of generating OpenAPI specifications for HTTP based services and gRPC protocol buffer files for gRPC based services	Go	❌	✅	✅	
kotlin-openapi3-dsl - kotlin-openapi3-dsl is a DSL written in Kotlin to write OpenAPI descriptions in plain Kotlin.	Kotlin	❌	✅	❌	
Oxlip API Language - Oxlip is a high-level functional programming language for designing OpenAPI definitions. It defines algebraic abstractions over REST concepts to alleviate the pain of managing OpenAPI in JSON or YAML by hand and at scale.	OAL	❌	✅	❌	github octocat
rswag - Rswag extends rspec-rails request specs with a Swagger-based DSL for describing and testing API operations.	ruby	👷	✅	❌	github octocat
Spot - A concise, developer-friendly way to describe your API contract.	TypeScript	❌	✅	✅	github octocat
Supermodel - Model your data using JSON Schema, refer and remix the models freely, convert to various formats including OAS v2/v3.	SaaS	❌	✅	✅	
Text Editors
Text editors give you visual feedback whilst you write OpenAPI, so you can see what docs might look like.

Name	Language	v3.1	v3.0	v2.0	GitHub
42Crunch IntelliJ OpenAPI Editor - OpenAPI extension for Visual Studio Code - new file templates, navigation, intellisense, code snippets.	Any	❌	✅	✅	github octocat
draig-car - This is a REPL OpenAPI3 description document text editor. It provides both a CLI and and a REPL you can use to test your APIs, but you can also test database queries, start and stop database (containers), generate fake data automatically, start your test microservice and much more. You don't have to exit from your REPL! Or you can use the CLI to do the same if you want, giving you the option to automatize your contract-first based dev cycles.	TypeScript	❌	✅	❌	github octocat
Fix My OpenAPI - A VSCode Extension by APIMatic - APIMatic's VSCode extension helps you validate, lint, and auto-fix your OpenAPI files, along with other capabilities such as API transformations, API audit report generation, SDKs generation, and more.	Any	✅	✅	✅	
KaiZen-OpenAPI-Editor - Full-featured Eclipse editor for OpenAPI, also available on Eclipse Marketplace.	Java	❌	✅	✅	github octocat
Redocly VSCode Extension - Redocly OpenAPI is a Visual Studio Code extension that helps you write, validate, preview, and maintain your OpenAPI documents.	Node.js	✅	✅	✅	github octocat
Swagger Editor - Design, describe, and document your API on the first open source editor fully dedicated to OpenAPI-based APIs.	Node.js	❌	✅	✅	github octocat
SwaggerHub - API design and documentation platform to improve collaboration, standardize development workflow and centralize their API discovery and consumption.	SaaS/On-Premise NodeJS	❌	✅	✅	
VSCode OpenAPI Editor - OpenAPI extension for Visual Studio Code - new file templates, navigation, intellisense, code snippets.	Any	❌	✅	✅	github octocat
VSCode OpenAPI Snippets - OpenAPI Snippets for Visual Studio Code editor, includes split file validation	Any	❌	✅	❌	github octocat
VSCode OpenAPI Viewer - Preview and edit JSON or YAML OpenAPI specifications in Visual Studio Code using RapiDoc.	TypeScript	✅	✅	✅	github octocat
Xapi Platform - Xapi is an integrated platform that enables you to implement a streamlined API-first design strategy with standardized API artifacts and collaborative teams.	Saas	✅	❌	❌	
GUI Editors
Visual editors help you design APIs without needing to memorize the entire OpenAPI specification.

Name	Language	v3.1	v3.0	v2.0	GitHub
Api-Fiddle - Opinionated API design platform built for collaboration and exploration. Create API designs for technical documents, specifications, and reviews.	TypeScript / Saas	✅	❌	❌	
ApiBldr - Web-Based API Designer for OpenAPI (swagger) and AsyncAPI specifications.	Angular 9.0 / Saas	❌	✅	✅	
Apicurio Studio - Web-Based Open Source API Design via the OpenAPI specification.	Angular 7.0, Java / Saas	❌	✅	✅	github octocat
APIGit - the native Git based collaboration platform for API design, document, mock, testing and share.	SaaS	✅	✅	✅	github octocat
Flotiq - headless CMS with OpenAPI support - Visually define your Content Types, Flotiq automatically generates your own OpenAPI v3 compatible endpoints, SDKs and Postman collections.		❌	✅	❌	
Frogment Editor - A free openAPI spec editor and linter that breaks down your spec into fragments to make editing easier and more intuituve.	Desktop / SaaS	✅	✅	❌	
Hackolade - A visual editor for OpenAPI v2/v3, from the pioneer in data modeling for NoSQL databases.	ReactJS	✅	✅	✅	github octocat
JetBrains tools (IntelliJ IDEA, PyCharm etc.) - JetBrains development tools like IntelliJ IDEA, PyCharm and others come with a bundled *OpenAPI Specifications* plugin. The plugin allows you to write the OpenAPI specifications and supports you with validations, formatting, code-completion etc. It supports a *text view* as well as a rendered SwaggerUI-like *graphical interface*.	Java, Python	❌	✅	✅	
OAIE Sketch - Browser based OpenApi Integrated Editor with side-by side view of the yaml and an interactive graph.	Vue.js	❌	✅	❌	github octocat
OpenAPI Designer - OpenAPI Designer is an easy-to-use, free, web-based, codeless description document editor with JSON and YAML outputs.	SaaS	✅	✅	❌	
RestCase Designer - A design-first API managment platform with WYSIWYG API Designer for OpenAPI and AsyncAPI specifications.	Angular 9.0 / Saas	❌	✅	✅	
Stoplight Studio - Stoplight Studio is a powerful GUI/text editor with linting and mocking built right in. The desktop version has been discontinued, but it runs in the browser, powered by your existing GitHub, GitLab, or BitBucket repos.	SaaS	✅	✅	✅	
Xapi Platform - Xapi is an integrated platform that enables you to implement a streamlined API-first design strategy with standardized API artifacts and collaborative teams.	Saas	✅	❌	❌	
Zuplo (OpenAPI-based gateway and documentation) - Zuplo is an API gateway designed for developers. Natively powered by OpenAPI (3.1 or 3.0), zuplo offers an OpenAPI design surface, API documentation and a serverless, programmable edge gateway that includes request validation, auth, rate-limiting and more.	Web / SaaS	✅	✅	❌	
Learning
Whether you're trying to get documentation for a third party API based on traffic, or are trying to switch to design-first at an organization with no OpenAPI at all, learning can help you move your API spec forward and keep it up to date.

Name	Language	v3.1	v3.0	v2.0	GitHub
APIClarity - Reconstruct Open API Specifications from real-time workload traffic seamlessly.	Golang, JavaScript	❌	✅	✅	github octocat
Fitting - Library add improve test log for RSpec and WebMock, validate its according to API Blueprint and Open API, show the documentation coverage with log.	Ruby	✅	✅	✅	github octocat
InducOapi - A simple python module to generate OpenAPI Description Documents by supplying request/response bodies.	Python	✅	✅	❌	github octocat
optic - Build your first OpenAPI description from traffic. Use Optic to patch the OpenAPI every time it detects new API behavior.	cli	✅	✅	❌	github octocat
Response2Schema - Takes any JSON response and generates an OpenAPI definition document with the component schema and a default endpoint.	PHP	❌	✅	❌	
Mock Servers
Fake servers that take description document as input, then route incoming HTTP requests to example responses or dynamically generates examples.

Name	Language	v3.1	v3.0	v2.0	GitHub
APIGit - the native Git based collaboration platform for API design, document, mock, testing and share.	SaaS	✅	✅	✅	github octocat
Beeceptor - 🐝 An HTTP interceptor and rule-based mocking service for REST APIs. No coding required to create a mock endpoint. No sign-up required.	SaaS	❌	✅	❌	
Counterfact - Counterfact is a revolutionary free and open source mock server. If you have Node installed, all you have to do is run `npx counterfact@latest path-or-url-to-your-openapi-document`. Out of the box, you'll get a mock server that returns random data. With a TypeScript API that's optimized for mocking, you can add more realistic behavior. It supports mix and matching mocks with calls to the real API (sans CORS headaches). With hot reloading and a REPL, you can change things up on the fly.	TypeScript / Node	✅	✅	✅	github octocat
Fakeit - Create mock server from OpenAPI 3 specification with random response generation and request validation.	cli / Docker	❌	✅	❌	github octocat
Falcon Heavy - The framework for building app backends and microservices via the API design-first workflow.	Python	❌	✅	❌	github octocat
Karate-IDE - Generates KarateDSL Tests and Mocks from OpenAPI 3.0 documents and so you can quickly test/explore your API.	VSCode Extension	❌	✅	❌	github octocat
Kusk Gateway - Kusk-Gateway is an OpenAPI-driven API Gateway for Kubernetes. It empowers you to develop, validate, mock and deploy your APIs in a matter of minutes using both manual and automated GitOps/APIOps workflows.	Kubernetes	❌	✅	✅	github octocat
Meeshkan - Meeshkan is an automated testing and mocking tool. It offers first-class support for GraphQL APIs, but Meeshkan is also built to handle REST APIs and third-party dependencies.	SaaS	❌	✅	❌	
Microcks - Open source Kubernetes-native tool for API Mocking and Testing. Turn your OAI contract examples into ready-to-use mocks. Use examples to test and validate implementations according to spec and schema elements. Microcks is a Cloud Native Computing Sandbox project 🚀	Java	✅	✅	✅	github octocat
Mockintosh - Mocks for CloudNative Environments - Converts OpenAPI files to Mocks and use them to develop in isolated environments and test edge cases, Async call to queues such as Kafka or RabbitMQ or simulate performance & chaos testing	CLI / Docker	✅	✅	✅	
OpenAPI Mocker - Standalone nodejs based OpenAPI 3 mock server, docker-friendly with request validation and autoreload.	nodejs	❌	✅	❌	github octocat
openapi-data-mocker - Tiny library to generate basic OpenAPI Data Types. Consider it as extended Faker package. First version able to mock most of the data formats. It doesn't support polymorphism yet, but work in progress. May be useful for writing custom unit tests.	PHP	❌	✅	❌	github octocat
orval - orval is able to generate client with appropriate type-signatures (TypeScript) from any valid OpenAPI v3 or Swagger v2 specification, either in yaml or json formats. Generate, valid, cache and mock in your frontend applications all with your OpenAPI specification. 🍺	Typescript, React, Vue, Svelte, Angular	❌	✅	✅	github octocat
Prism - Turn any OAI file into an API server with mocking, transformations, validations, and more.	cli	✅	✅	✅	github octocat
Specmatic - Specmatic enables teams to practice Contract-Driven Development by leveraging OpenAPI specifications as Executable Contracts to reduce time-to-market by allowing teams to build, test and deploy their MicroServices and MicroFrontends independently and Shift-Left the identification of compatibility issues between Components / Services in complex interdependent systems such as those built with MicroServices architecture. In the process it reduces / removes the need for Integration Testing.	Any, CLI	❌	✅	❌	github octocat
Wiremock - WireMock Cloud is a managed, hosted version of WireMock, developed by the same team who wrote the open-source project. It is built on the same technology that powers open source WireMock and is 100% compatible with the WireMock API, with additional features that make it quick and easy to mock any API you depend on. WireMock Cloud also introduces advanced capabilities such as chaos engineering, OpenAPI generation, validation and documentation as well as better collaboration and user management.	SaaS	✅	✅	✅	github octocat
yii2-app-api - Generate Server side API code with routing, models, data validation and database schema from an OpenAPI description. Based on Yii Framework.	PHP	❌	✅	❌	github octocat
Description Validators
Check your API description to see if it is valid OpenAPI.

Name	Language	v3.1	v3.0	v2.0	GitHub
api - Magical SDK generation from an OpenAPI definition	JavaScript, TypeScript	✅	✅	✅	github octocat
API Insights - API Insights is a web application and native Mac application that allows you get real time insights into your API using your OpenAPI specification. Think of it like a static analysis tool for your API, using your OpenAPI Specification file.		❌	✅	❌	github octocat
Cherrybomb - A CLI tool that helps avoid undefined user behaviour by validating your API descriptions, to make sure key parts are not missing or vague.	Rust	✅	✅	❌	github octocat
express-openapi-validator - 🦋 Auto-validate API requests and responses in ExpressJS.	JavaScript	❌	✅	❌	github octocat
Fix My OpenAPI - A VSCode Extension by APIMatic - APIMatic's VSCode extension helps you validate, lint, and auto-fix your OpenAPI files, along with other capabilities such as API transformations, API audit report generation, SDKs generation, and more.	Any	✅	✅	✅	
Hot Potato - A reverse proxy that validates responses against an OpenAPI description. It can be used as either a standalone .NET tool, or installed as NuGet packages for an ASP.NET Core integration testing project.	C#	❌	❌	❌	github octocat
oas-normalize - Comprehensive tooling for working with OpenAPI definitions.	JavaScript, TypeScript	✅	✅	✅	github octocat
oas-tools - NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description over Express servers, including security validations	Node.js	❌	✅	❌	github octocat
OpenAPI Enforcer - Validate your OpenAPI document, serialize, deserialize, and validate incoming requests and outgoing responses, and simplify response building. You can even produce mock data.	Node.js	❌	✅	✅	github octocat
OpenAPI Style Validator - A customizable style validator to make sure your OpenAPI description follows your organization's standards.	Java, CLI	❌	✅	✅	github octocat
OpenAPI Validator - Configurable and extensible validator/linter for OpenAPI documents	Node.js	✅	✅	✅	github octocat
openapi-examples-validator - Validates embedded JSON-examples in OpenAPI-specs	JavaScript	❌	✅	✅	github octocat
openapi-schema-validator - OpenApi description validation	Javascript	✅	✅	✅	github octocat
openapi-spec-validator - OpenAPI Description validator	Python	✅	✅	✅	github octocat
openapi-spring-webflux-validator - A friendly kotlin library to validate API endpoints against an OpenAPI description document.	Java/Kotlin	❌	✅	✅	github octocat
openapi-validator-junit - A JUnit extension for validating a wide range of properties of a specification.	Kotlin	✅	✅	✅	github octocat
OpenAPI::Modern - OpenAPI v3.1 validator and JSON Schema validator (draft7, draft2019-09, draft2020-12)	Perl	✅	❌	❌	github octocat
openVALIDATION - Allows complex validation rules to be specified in openAPI spec files using natural language.	Java	❌	✅	❌	github octocat
php-openapi - A PHP library for manipulating and validating OpenAPI 3.0 Descriptions	PHP	👷	✅	❌	github octocat
Rate My OpenAPI - Free and open source OpenAPI automated review and validation tool.	Go	✅	✅	❌	github octocat
Redocly CLI - Bring versatile OpenAPI validation, linting & bundling to your command line with this open-source Swiss-army knife.	CLI & TypeScript	✅	✅	✅	github octocat
Spectral - A flexible OpenAPI/AsyncAPI API linter, which can help you build anything from automated API Style Guides for API Governance workflows, or handle any other JSON/YAML object linting. functions.	CLI & TypeScript/JavaScript	✅	✅	✅	github octocat
super-linter - GitHub Action to lint repositories as part of CI/CD. Implements the latest version of Spectral.	CLI / Docker	❌	✅	✅	github octocat
vacuum - A blazing fast OpenAPI linter and validator that is compatible with Spectral rulesets, and designed for enterprise-grade speed and scale.	go	✅	✅	✅	github octocat
Security
By poking around your OpenAPI description, some tools can look out for attack vectors you might not have noticed.

Name	Language	v3.1	v3.0	v2.0	GitHub
42crunch - A unique set of integrated API security tools that allow discovery, remediation of OpenAPI vulnerabilities and runtime protection against API attacks.	SaaS	❌	✅	✅	
API Insights - RestCase executes hundrends of security and quality checks against the API definition, the API insights report provides detailed security scoring for prioritization, and remediation advice to help developers define the best API definition possible.	SaaS	❌	✅	✅	
cats - CATS is a REST API Fuzzer and negative testing tool for OpenAPI endpoints. CATS automatically generates, runs and reports tests with minimum configuration and no coding effort. Tests are self-healing and do not require maintenance.	Java	✅	✅	✅	
FireTail - FireTail provides discovery, logging, posture management and in-line enforcement of APIs using OpenAPI. API governance is backed by cloud provider integrations and a suite of open-source application libraries.	SaaS	❌	✅	✅	github octocat
Mayhem for API - Probe your REST API with an infinite stream of test cases generated automatically from your OpenAPI specification.	Any	✅	✅	✅	github octocat
oas-tools - NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description over Express servers, including security validations	Node.js	❌	✅	❌	github octocat
openapi-fuzzer - Based on OpenAPI specification, openapi-fuzzer provides random data as inputs to the API endpoints in order to find bugs.	Rust	❌	✅	❌	
OpenAPI3 Fuzzer - Simple fuzzer for OpenAPI 3 specification based APIs. Verifies responses and sends various attack patterns.	Python	❌	✅	❌	github octocat
OWASP ZAP - OWASP ZAP is a free and open source web security tool that can be used manually or completely automated. It supports importing OpenAPI v2 and v3 definitions to allow an API to be thoroughly security tested.	Java	❌	✅	✅	github octocat
Rate My OpenAPI - Free and open source OpenAPI automated review and validation tool.	Go	✅	✅	❌	github octocat
RESTler - RESTler is the first stateful REST API fuzzing tool for automatically testing cloud services through their REST APIs and finding security and reliability bugs in these services. RESTler analyzes the OpenAPI description of a cloud service, and then generates and executes tests that exercise the service through its REST API. During testing, it checks for specific classes of bugs and dynamically learns how the service behaves from prior service responses.	Any	❌	✅	✅	github octocat
StackHawk HawkScan - StackHawk is an application vulnerability scanner purpose built for developers to use in the DevOps pipeline. It leverages a provided OpenAPI v2 or v3 spec file for route discovery and enhanced scanning.	SaaS	❌	✅	✅	github octocat
Treblle - Treblle is a lightweight SDK that helps Engineering and Product teams build, ship, and maintain REST based APIs faster.		✅	✅	❌	
SDK Generators
Generate code to give to consumers, to help them avoid interacting at a HTTP level.

Name	Language	v3.1	v3.0	v2.0	GitHub
🌿 Fern - Generate SDKs in popular languages and publish them to package managers (like npm).
Sponsored I'm a huge fan of Fern. It's a force multiplier for API teams - Mike Bifulco, APIs You Won't Hate cofounder
TypeScript, Java, Python, Go, Ruby, C#, PHP, Swift, and Rust	✅	✅	✅	github octocat
✨ Stainless - Generate SDKs in popular languages and publish them to package managers (like npm).
Sponsored
TypeScript, Python, Go, Java, and Kotlin	✅	✅	❌	github octocat
// Speakeasy - Generate & publish SDKs in 10+ languages, Terraform Providers, and docs from your OpenAPI
Sponsored
TypeScript, Python, Go, Java, Terraform, C#, PHP, Ruby, Swift, Unity	✅	✅	❌	github octocat
@hey-api/openapi-ts - Turn your OpenAPI description into a beautiful TypeScript client.	TypeScript	✅	✅	✅	github octocat
ABAP OpenAPI Client & Server Generator - ABAP OpenAPI Client & Server Generator written in ABAP. Code generation runs also in the Browser and on command line using NodeJS.	ABAP	❌	✅	❌	github octocat
api-codegen-ts - Generates TypeScript models, response validators, and operation controllers from OpenAPI descriptions	TypeScript	❌	✅	✅	github octocat
apigen-ts - Typed HTTP client generator as single file without extra dependencies	TypeScript	✅	✅	✅	github octocat
APIMatic Generate - Bring in your API description (OAI v2/v3, RAML, API Blueprint, WSDL, etc.) to generate fully functional SDKs in over 10 languages.	SaaS	✅	✅	✅	
Azure AutoRest - Generates client libraries for accessing RESTful web services from an OpenAPI document. Supports C#, PowerShell, Go, Java, Node.js, TypeScript, Python, and Ruby.	TypeScript	❌	✅	✅	github octocat
BlocklyAutomation - Input any OpenAPI document to have generated Blocks in Blockly form to test and generate documentation.	Javascript / .NET	✅	✅	❌	github octocat
Counterfact - Counterfact is a revolutionary free and open source mock server. If you have Node installed, all you have to do is run `npx counterfact@latest path-or-url-to-your-openapi-document`. Out of the box, you'll get a mock server that returns random data. With a TypeScript API that's optimized for mocking, you can add more realistic behavior. It supports mix and matching mocks with calls to the real API (sans CORS headaches). With hot reloading and a REPL, you can change things up on the fly.	TypeScript / Node	✅	✅	✅	github octocat
docler-labs/api-client-generator - API client generator is a console application capable of auto-generating a PSR18/PSR7 API client based on OpenAPI specification according to PHP best practices and your code style standards.	PHP	❌	✅	❌	github octocat
docs - A modern alternative to `go-swagger`. Offers generation and parsing of OpenAPI Specs, depending on the usage.		✅	✅	❌	github octocat
draig - DRAIG is an OpenAPI3 based design-first custom generator that creates fully functional microservices from an OAS API description document. You can use DRAIG with openapi-generator as a backend generator or use DRAIG CLI or REPL to generate your microservices. With simple user-customizable templates, you can extended and improve implementation code so that generated code can be compiled and deployed immediatelly.	Java	❌	✅	❌	github octocat
FabriKt - A sophisticated Kotlin code generation library capable of generating Jackson-annotated data classes, Spring Controller interfaces, and fault-tolerant OkHttp clients. Written in Kotlin, this library programatically generates code and is capable of handling advanced OpenApi3 specification features such as polymorphism.	Kotlin	❌	✅	❌	github octocat
Flotiq - headless CMS with OpenAPI support - Visually define your Content Types, Flotiq automatically generates your own OpenAPI v3 compatible endpoints, SDKs and Postman collections.		❌	✅	❌	
go-swagger - Unmaintained v2.0 only project seeking new maintainer, or probably a fork. Parser, validator, generates descriptions from code, or code from descriptions!	Go	❌	❌	✅	github octocat
guardrail - Principled code generation from OpenAPI descriptions	Scala, Java, ...	❌	✅	✅	github octocat
janephp/open-api - Generate a PHP Client API (PSR-7 compatible) given a OpenAPI specification.	PHP	❌	✅	✅	github octocat
Kiota Api Client Generator - Kiota is a cross platform API Client code generator that is small, fast, and optimized for API consumers to find APIs and generate client code for just the parts of the API that they need. One tool, for any OpenAPI described API, that delivers a consistent client experience in multiple languages.	C#	❌	✅	✅	github octocat
NSwag - OpenAPI toolchain for .NET, Web API and TypeScript	.NET	❌	✅	✅	github octocat
oa-client - Flexible client helper for making and validating calls to OpenAPI backends. For Node and the browser. Runtime lib - no need for code generation!	TypeScript	❌	✅	❌	github octocat
oazapfts! - Generate TypeScript clients from a given OpenAPI description document.	TypeScript	❌	✅	✅	github octocat
OpenAPI Client Generators - .NET Core command line program to generate strongly typed client API codes in C# on .NET Frameworks and .NET Core, and in TypeScript for Angular 5+, Aurelia, jQuery, AXIOS and Fetch API.	C#	❌	✅	✅	github octocat
OpenAPI Commander - Generate a Node.js command line tool from an OpenAPI definition.	Node.js / CLI	✅	✅	❌	github octocat
OpenAPI Generator - A template-driven engine to generate documentation, API clients and server stubs in different languages by parsing your OpenAPI Description (community-driven fork of swagger-codegen)	Java	👷	✅	✅	github octocat
OpenAPI JSON Schema Generator - A template-driven engine to generate API client code + documentation by parsing your OpenAPI Description	Python, Java	✅	✅	❌	github octocat
OpenAPI Qraft - Generate a type-safe TanStack Query client for React from an OpenAPI Document.	TypeScript	✅	✅	❌	github octocat
openapi-ts-sdk-builder - Generate a TypeScript SDK from OpenAPI 3 definitions.	Javascript / TypeScript	✅	✅	❌	github octocat
restful-react - Generate React hooks with appropriate type-signatures from OpenAPI descriptions	React (Typescript)	❌	✅	✅	github octocat
spring-openapi - OpenAPI v3 generator for Java Spring. Includes also client generation. Supports inheritance with discriminators, Jackson annotations and custom interceptors.	Java	❌	✅	❌	github octocat
Swift OpenAPI Generator - Generate Swift client and server code from an OpenAPI document. Includes support for type-safe JSON event streaming, multipart, Swift concurrency, customizable middlewares, and pluggable HTTP libraries.	Swift	✅	✅	❌	github octocat
Typoas - Fully typed OpenAPI Typescript generator	Typescript	❌	✅	❌	github octocat
Unchase.OpenAPI.Connectedservice - Visual Studio extension to generate C# (TypeScript) HttpClient (or C# Controllers) code for OpenAPI web service with NSwag.	.NET	❌	✅	✅	github octocat
Server Implementations
Easily create and implement resources and routes for your APIs.

Name	Language	v3.1	v3.0	v2.0	GitHub
🌿 Fern - Generate server-side boilerplate code from OpenAPI and then implement your business logic.
Sponsored I'm a huge fan of Fern. It's a force multiplier for API teams - Mike Bifulco, APIs You Won't Hate cofounder
Express.js, FastAPI, Spring Boot	✅	✅	✅	github octocat
@eropple/nestjs-openapi3 - Integrates tightly with a NestJS application to infers complex descriptions and expresses them in its generated OpenAPI document. It then presents that document via ReDoc, and validates inputs for conformance to spec.	Node.js	❌	✅	❌	github octocat
@nestjs/swagger - Official OpenAPI (Swagger) module for NestJS. Use decorators to define OpenAPI endpoint documentation, parameters and return types. Integrates tightly with a NestJS application. Ships with Swagger UI and serves OpenAPI v3 spec.	Node.js	❌	✅	❌	github octocat
@smartrecruiters/openapi-first - Initializes your API express application with the description in OpenAPI 3.0 format using provided middlewares (parsers, validators, controller, defaults setting) or custom ones	Node.js	❌	✅	❌	github octocat
ABAP OpenAPI Client & Server Generator - ABAP OpenAPI Client & Server Generator written in ABAP. Code generation runs also in the Browser and on command line using NodeJS.	ABAP	❌	✅	❌	github octocat
API Platform - REST and GraphQL framework to build modern API-driven projects	PHP	❌	✅	✅	github octocat
BaucisJS + baucis-openapi3 - Create REST resources with persistence on MongoDB and expose OpenAPI v.3 contracts	Node.js	❌	✅	❌	github octocat
Connexion - Connexion is a modern Python web framework that makes spec-first and api-first development easy. No code is generated. With Connexion, you write your server-side API handlers according to a naming convention, and the Connexion engine, given a spec, invokes your code after any input has been validated.	Python	❌	✅	✅	github octocat
draig-car - This is a REPL OpenAPI3 description document text editor. It provides both a CLI and and a REPL you can use to test your APIs, but you can also test database queries, start and stop database (containers), generate fake data automatically, start your test microservice and much more. You don't have to exit from your REPL! Or you can use the CLI to do the same if you want, giving you the option to automatize your contract-first based dev cycles.	TypeScript	❌	✅	❌	github octocat
express-openapi - An unopinionated OpenAPI framework for Express, which supports Promise based middleware, response handlers and Security Filtering.	Node.js / Typescript	👷	✅	✅	github octocat
Falcon Heavy - The framework for building app backends and microservices via the API design-first workflow.	Python	❌	✅	❌	github octocat
Fuego - Golang Fuego - web & API framework generating OpenAPI 3 spec from source code	Go	❌	✅	❌	github octocat
Fusio - Open source API management platform	PHP	❌	✅	❌	github octocat
Hot Potato - A reverse proxy that validates responses against an OpenAPI description. It can be used as either a standalone .NET tool, or installed as NuGet packages for an ASP.NET Core integration testing project.	C#	❌	❌	❌	github octocat
Huma - A modern, simple, fast & flexible micro framework for building HTTP REST/RPC APIs in Go backed by OpenAPI 3 and JSON Schema.	Go	✅	✅	❌	github octocat
LoopBack 4 - A highly extensible object-oriented Node.js and TypeScript framework for building APIs and microservices with tight OpenAPI 3 integration. Serves Swagger UI and OpenAPI 3 spec out of the box. Generate code to interact with other OpenAPI-compliant APIs, or generate new API endpoints based on existing OpenAPI specs.	Node.js + TypeScript	❌	✅	❌	github octocat
Mojolicious::Plugin::OpenApi - Mojolicious::Plugin::OpenAPI is a plugin for Mojolicious framework that add routes and input/output validation to your Mojolicious application based on OpenAPI description documents.'	Perl	❌	✅	✅	github octocat
Mojolicious::Plugin::OpenAPI::Modern - Mojolicious plugin for OpenAPI::Modern	Perl	✅	❌	❌	github octocat
oas-tools - NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description over Express servers, including security validations	Node.js	❌	✅	❌	github octocat
OpenAPI Enforcer - Validate your OpenAPI document, serialize, deserialize, and validate incoming requests and outgoing responses, and simplify response building. You can even produce mock data.	Node.js	❌	✅	✅	github octocat
OpenAPI Enforcer Middleware - An express middleware that makes it easy to write web services that follow an OpenAPI specification by leveraging the tools provided in the openapi-enforcer package.	Node.js	❌	✅	✅	github octocat
openapi-backend - Build, Validate, Route, and Mock using OpenAPI specification. Framework-agnostic	Node.js + Typescript	✅	✅	❌	github octocat
openapi-processor - Generates java interfaces & model classes for Spring Boot (annotation based, MVC & WebFlux) or Micronaut (annotation based) from an OpenAPI yaml description. Provides powerful type mapping capabilities to adjust the generated code. Gradle & Maven support. Playground.	Java	✅	✅	❌	github octocat
openapi-validator-middleware - Provides data validation within an Express, Koa or Fastify app according to a OpenAPI definition. It uses Ajv under the hood for validation.	Node.js	❌	✅	✅	github octocat
SpringFox - Automated JSON API documentation for APIs built with Spring and SpringBoot	Java, Kotlin, Groovy, or Ruby	❌	✅	✅	github octocat
Swift OpenAPI Generator - Generate Swift client and server code from an OpenAPI document. Includes support for type-safe JSON event streaming, multipart, Swift concurrency, customizable middlewares, and pluggable HTTP libraries.	Swift	✅	✅	❌	github octocat
tsoa - Creates OpenAPI docs and provides free runtime validation for your Koa, Express, Hapi (and more) services	Node.js / TypeScript	❌	✅	✅	github octocat
Vert.x Web Api Contract - Create API endpoints with Vert.x 3 and OpenAPI 3 with automatic requests validation	Java, Kotlin, JavaScript, Groovy, Ruby, Ceylon or Scala	❌	✅	❌	github octocat
Whook - OpenAPI 3 based NodeJS server.	Javascript / TypeScript	✅	✅	❌	github octocat
yii2-app-api - Generate Server side API code with routing, models, data validation and database schema from an OpenAPI description. Based on Yii Framework.	PHP	❌	✅	❌	github octocat
Miscellaneous
Anything else that does stuff with OpenAPI but hasn't quite got enough to warrant its own category.

Name	Language	v3.1	v3.0	v2.0	GitHub
allof-merge - Simplify your JsonSchema by combining allOf safely	TypeScript	✅	✅	❌	github octocat
api-diff-viewer - React component to view the difference between two Json based API documents. Supported specifications: JsonSchema, OpenAPI 3.x, AsyncAPI 2.x.	TypeScript	✅	✅	✅	github octocat
api-ref-bundler - Bundle all external $ref in Json based API document into single document	TypeScript	✅	✅	✅	github octocat
api-smart-diff - Compare two Json based API documents (OpenAPI, AsyncAPI, JsonSchema, GraphAPI)	TypeScript	✅	✅	✅	github octocat
Django REST Framework - Automates generation of OpenAPI 3 description documents either as a static file (via CLI command) or a dynamic view within the Django REST Framework (DRF) application.	Python	❌	✅	❌	github octocat
express-openapi-validator - 🦋 Auto-validate API requests and responses in ExpressJS.	JavaScript	❌	✅	❌	github octocat
Flotiq - headless CMS with OpenAPI support - Visually define your Content Types, Flotiq automatically generates your own OpenAPI v3 compatible endpoints, SDKs and Postman collections.		❌	✅	❌	
Frevo - Keep track of changes in your OpenAPI specifications & generate API references ⛱️	SaaS	✅	✅	❌	
go-openapi-spec-code-diffs - A golang validation tool that compares given OpenAPI specs (e.g. openapi.yaml) vis-a-vis routes (e.g. /api/v1/customer/:id) defined in golang source code and reports differences. This is useful in scenarios where you want to keep the OpenAPI specs and Code in synch.	go	✅	✅	❌	github octocat
HopFront - HopFront automatically builds an user friendly UI from a collection of OpenAPI specifications. You can setup custom dashboard tailored to the way your interact with your APIs.	TypeScript	❌	✅	❌	github octocat
laravel-openapi - Generate OpenAPI 3 specification for Laravel Applications.	PHP	❌	✅	❌	github octocat
oa-client - Flexible client helper for making and validating calls to OpenAPI backends. For Node and the browser. Runtime lib - no need for code generation!	TypeScript	❌	✅	❌	github octocat
oas - Comprehensive tooling for working with OpenAPI definitions	JavaScript, TypeScript	✅	✅	✅	github octocat
oasdiff - Golang module for deep comparison of two OpenAPI specifications. Available also as a command-line.	Go	❌	✅	❌	github octocat
OAuth2 as OpenAPI Spec 3.0 components - OAuth2 token endpoint described with OAS3 schema. All grants documented. Can be installed as NPM or Composer package.	Any	❌	✅	❌	github octocat
OpenAPI CRUD Wizard - This wizard is an IntelliJ Plugin to create a new OpenAPI document including all CRUD operations based only on a Yaml object. No knowledge about OpenAPI specification needed.	Yaml	✅	✅	❌	github octocat
OpenAPI Server Code Generator (oapi-codegen) - Generate a client, server, and HTTP types for various Go HTTP servers, from an OpenAPI v3 specification	Go	❌	✅	❌	github octocat
openapi-cli-tool - Can list up defined API paths and bundle multi-file into one. Supports multiple file extensions.	Python	❌	✅	❌	github octocat
openapi-comparator - C# library for comparing two OpenAPI specifications.	C#	❌	✅	❌	github octocat
openapi-dev-tool - OpenAPI Dev Tool proposes to developers a unique tool to address development and industrialization needs!	JavaScript	✅	✅	✅	github octocat
openapi-diff - Utility for comparing two OpenAPI specifications.	Java	❌	✅	❌	github octocat
openapi-examples-validator - Validates embedded JSON-examples in OpenAPI-specs	JavaScript	❌	✅	✅	github octocat
openapi-format - A CLI to format an OpenAPI document by ordering fields in a hierarchical order, with the option to filter out flags, tags, methods, operationIDs; including the option to convert an OpenAPI 3.0 document to an OpenAPI version 3.1.	Node.js	✅	✅	❌	github octocat
openapi-spring-webflux-validator - A friendly kotlin library to validate API endpoints against an OpenAPI description document.	Java/Kotlin	❌	✅	✅	github octocat
openVALIDATION - Allows complex validation rules to be specified in openAPI spec files using natural language.	Java	❌	✅	❌	github octocat
optic diff - Diff the effective API contract between any two versions of your OpenAPI description. Exit 1 on breaking changes.	Node	✅	✅	❌	github octocat
php-openapi-faker - Library to generate fake data for OpenAPI 3.x requests, responses and schemas.	PHP	❌	✅	❌	github octocat
Rate My OpenAPI - Free and open source OpenAPI automated review and validation tool.	Go	✅	✅	❌	github octocat
Restish - A CLI for REST-ish APIs with HTTP/2, built-in auth, content negotiation, caching, and more that understands and can discover OpenAPI descriptions.	CLI / Go	✅	✅	❌	github octocat
schema2dts - Create types definitions from an OpenAPI schema.	Javascript / TypeScript	❌	✅	❌	github octocat
Treblle - Treblle is a lightweight SDK that helps Engineering and Product teams build, ship, and maintain REST based APIs faster.		✅	✅	❌	
vacuum - A blazing fast OpenAPI linter and validator that is compatible with Spectral rulesets, and designed for enterprise-grade speed and scale.	go	✅	✅	✅	github octocat
wiretap - Wiretap is a feature packed OpenAPI compliance testing tool. Validate that a client and server are compliant with an OpenAPI spec. Rewrite paths, inject headers, and even host a UI locally to test an OpenAPI implementation.	go	✅	✅	✅	github octocat
Parsers
Loads and read OpenAPI descriptions, so you can work with them programmatically.

Name	Language	v3.1	v3.0	v2.0	GitHub
api - Magical SDK generation from an OpenAPI definition	JavaScript, TypeScript	✅	✅	✅	github octocat
APIDevTools/swagger-parser - OpenAPI 2.0 and 3.0 parser and validator. Can also bundle multiple documents into one via `$ref`.	Node.js	❌	✅	✅	github octocat
KaiZen OpenAPI Parser - High-performance Parser, Validator, and Java Object Model for OpenAPI 3.x	Java	❌	✅	❌	github octocat
kin-openapi - OpenAPI 3.0 (and Swagger v2) implementation for Go (parsing, converting, validation, and more)	Go	❌	✅	✅	github octocat
libopenapi - Enterprise grade, fully featured OpenAPI 3.1, 3.0 and Swagger parser library for go. A complete toolset for reading and parsing OpenAPI and Swagger specifications. Comes complete with high and low-level APIs, diff engine, index and resolver.	go	✅	✅	✅	github octocat
Microsoft/OpenAPI.NET - C# based parser with OpenAPI Description validation and migration support from V2	.NET	❌	✅	✅	github octocat
oas-normalize - Comprehensive tooling for working with OpenAPI definitions.	JavaScript, TypeScript	✅	✅	✅	github octocat
oas-tools - NodeJS module to manage RESTful APIs defined with OpenAPI 3.0 Description over Express servers, including security validations	Node.js	❌	✅	❌	github octocat
oas_parser - A Ruby parser for OpenAPI 3.0+ descriptions.	Ruby	❌	✅	❌	github octocat
Object Oriented OpenAPI Specification - An object oriented approach to generating OpenAPI Descriptions, implemented in PHP	PHP	❌	✅	❌	github octocat
openapi-filter - OpenAPI 2.0 and 3.0 filter utility. A CLI/module to filter out internal/private paths, operations, parameters, schemas etc from OpenAPI v1/OpenAPI v2/AsyncAPI definitions. Simply flag any OpenAPI object within the definition with an `x-internal` specification extension or target a OpenAPI property (tags, methods, OperationId), and it will be removed from the output.	Node.js	❌	✅	✅	github octocat
openapi-format - A CLI to format an OpenAPI document by ordering fields in a hierarchical order, with the option to filter out flags, tags, methods, operationIDs; including the option to convert an OpenAPI 3.0 document to an OpenAPI version 3.1.	Node.js	✅	✅	❌	github octocat
openapi-processor/openapi-parser - OpenAPI parser with (json schema) validation (currently 3.0 only). Separate apis for OpenAPI 3.0 & 3.1. Easily get resolved $ref objects. Pluggable document reader & json/yaml converter. Minimal dependencies.	Java	✅	✅	❌	github octocat
openapi-snippet - Generates code snippets in various languages & tools (cURL, Node, Python, Ruby, Java, Go, C#...), from OpenAPI documents.	Node.js	❌	✅	✅	github octocat
openapi-snippet-cli - Adds code snippets in redoc style (x-codeSamples) to OpenAPI documents. This is a CLI wrapper for the "openapi-snippet".	Node.js	❌	✅	✅	github octocat
OpenAPI-TS - TS Model & utils for OpenAPI 3.0.x contracts	TypeScript	❌	✅	❌	github octocat
openapi3 - An OpenAPI 3 Specification client, and validator, covering both description validation and limited data validation for Python 3.	Python	❌	✅	❌	github octocat
OpenAPI3-Rust - Rust serialization library for OpenAPI v3	Rust	❌	✅	❌	github octocat
openapi3_parser - A Ruby implementation of parser and validator for the OpenAPI 3 Specification.	Ruby	❌	✅	❌	github octocat
php-openapi - A PHP library for manipulating and validating OpenAPI 3.0 Descriptions	PHP	👷	✅	❌	github octocat
psx-api - Parse and generate API specification formats	PHP	❌	✅	✅	github octocat
swagger-parser - Swagger Parser reads OpenAPI definitions into current Java POJOs.	Java	✅	✅	✅	github octocat
Testing
Quickly execute API requests and validate responses on the fly through command line or GUI interfaces.

Name	Language	v3.1	v3.0	v2.0	GitHub
APIGit - the native Git based collaboration platform for API design, document, mock, testing and share.	SaaS	✅	✅	✅	github octocat
Assertible - Import an OpenAPI specification into Assertible to generate tests that validate JSON Schema responses and status codes on every endpoint.	SaaS	❌	✅	✅	
Atlassian OpenAPI Request Validators - A set of Java libraries which allow you to integrate OpenAPI Description Document validation into your testing or clients with tools like WireMock/RestAssured/MockMVC/etc...	Java	❌	✅	✅	github octocat
BlocklyAutomation - Input any OpenAPI document to have generated Blocks in Blockly form to test and generate documentation.	Javascript / .NET	✅	✅	❌	github octocat
Chai OpenAPI Response Validator - Simple Chai support for asserting that HTTP responses satisfy an OpenAPI spec.	Node.js	❌	✅	✅	github octocat
draig-car - This is a REPL OpenAPI3 description document text editor. It provides both a CLI and and a REPL you can use to test your APIs, but you can also test database queries, start and stop database (containers), generate fake data automatically, start your test microservice and much more. You don't have to exit from your REPL! Or you can use the CLI to do the same if you want, giving you the option to automatize your contract-first based dev cycles.	TypeScript	❌	✅	❌	github octocat
Dredd - Language-agnostic command-line tool for validating API description document against backend implementation of the API	Javascript	❌	✅	✅	github octocat
EvoMaster - A tool for automatically generating system-level test cases for RESTful APIs, using Evolutionary Algorithms and Dynamic Program Analysis.	Java/Kotlin	❌	✅	✅	github octocat
Fitting - Library add improve test log for RSpec and WebMock, validate its according to API Blueprint and Open API, show the documentation coverage with log.	Ruby	✅	✅	✅	github octocat
hikaku - A library that tests if the implementation of a REST-API meets its specification.	Kotlin	❌	✅	❌	github octocat
Hot Potato - A reverse proxy that validates responses against an OpenAPI description. It can be used as either a standalone .NET tool, or installed as NuGet packages for an ASP.NET Core integration testing project.	C#	❌	❌	❌	github octocat
jest-openapi - Additional Jest matchers for asserting that HTTP responses satisfy an OpenAPI spec.	Node.js	❌	✅	✅	github octocat
Karate-IDE - Generates KarateDSL Tests and Mocks from OpenAPI 3.0 documents and so you can quickly test/explore your API.	VSCode Extension	❌	✅	❌	github octocat
Mayhem for API - Probe your REST API with an infinite stream of test cases generated automatically from your OpenAPI specification.	Any	✅	✅	✅	github octocat
Meeshkan - Meeshkan is an automated testing and mocking tool. It offers first-class support for GraphQL APIs, but Meeshkan is also built to handle REST APIs and third-party dependencies.	SaaS	❌	✅	❌	
Microcks - Open source Kubernetes-native tool for API Mocking and Testing. Turn your OAI contract examples into ready-to-use mocks. Use examples to test and validate implementations according to spec and schema elements. Microcks is a Cloud Native Computing Sandbox project 🚀	Java	✅	✅	✅	github octocat
OpenAPI Enforcer - Validate your OpenAPI document, serialize, deserialize, and validate incoming requests and outgoing responses, and simplify response building. You can even produce mock data.	Node.js	❌	✅	✅	github octocat
openapi-changes - The world's fastest, most beautiful, powerful and detailed OpenAPI change detection tool on earth. Explore every change in An OpenAPI spec. See changes over time, go back into history and see what changed with each commit. Identifies all breaking changes, Powered by libopenapi.	go	✅	✅	✅	github octocat
openapi-dev-tool - OpenAPI Dev Tool proposes to developers a unique tool to address development and industrialization needs!	JavaScript	✅	✅	✅	github octocat
portman - Port OpenAPI Spec to Postman Collection, with contract & variation tests included!	Node.js	❌	✅	❌	github octocat
ReadyAPI - an end to end API functional, security, performance and virtualization tool where OAS description documents can be utilized to automate the creation and validation of end to end tests, running them manually or at any point in your CI/CD pipeline. pipelines.	Java	❌	✅	✅	
RESTest - RESTest is a framework for automated black-box testing of RESTful web APIs. It follows a model-based approach, where test cases are automatically derived from the OpenAPI description document (OAS) of the API under test.	Java	❌	✅	✅	github octocat
Restish - A CLI for REST-ish APIs with HTTP/2, built-in auth, content negotiation, caching, and more that understands and can discover OpenAPI descriptions.	CLI / Go	✅	✅	❌	github octocat
RESTler - RESTler is the first stateful REST API fuzzing tool for automatically testing cloud services through their REST APIs and finding security and reliability bugs in these services. RESTler analyzes the OpenAPI description of a cloud service, and then generates and executes tests that exercise the service through its REST API. During testing, it checks for specific classes of bugs and dynamically learns how the service behaves from prior service responses.	Any	❌	✅	✅	github octocat
Schemathesis - Reads the description document and generates test cases that will ensure that your application is compliant with its description.	Python	❌	✅	✅	github octocat
Specmatic - Specmatic enables teams to practice Contract-Driven Development by leveraging OpenAPI specifications as Executable Contracts to reduce time-to-market by allowing teams to build, test and deploy their MicroServices and MicroFrontends independently and Shift-Left the identification of compatibility issues between Components / Services in complex interdependent systems such as those built with MicroServices architecture. In the process it reduces / removes the need for Integration Testing.	Any, CLI	❌	✅	❌	github octocat
Spectator - Spectator provides light-weight OpenAPI testing tools you can use within your existing Laravel test suite.	PHP	👷	✅	❌	github octocat
Step CI - Open-source framework for API Quality Assurance. Generate multi-step test-scenarios from OpenAPI. Validate responses against description documents and more.	CLI, Node.js	❌	✅	❌	github octocat
Tcases for OpenAPI - Generates test cases directly from an OpenAPI v3 description of your API. Creates tests executable using various test frameworks. Bonus: Semantic linter reports elements that are inconsistent, superfluous, or dubious.	Java	❌	✅	❌	github octocat
vREST NG - vREST NG is a simple and powerful application for API Automation. It Allows to use OpenAPI specification into vREST NG to drive your API testing that validates the API responses against JSON Schema and also provides powerful response validation capabilities.	JavaScript	❌	✅	✅	
Wiremock - WireMock Cloud is a managed, hosted version of WireMock, developed by the same team who wrote the open-source project. It is built on the same technology that powers open source WireMock and is 100% compatible with the WireMock API, with additional features that make it quick and easy to mock any API you depend on. WireMock Cloud also introduces advanced capabilities such as chaos engineering, OpenAPI generation, validation and documentation as well as better collaboration and user management.	SaaS	✅	✅	✅	github octocat
wiretap - Wiretap is a feature packed OpenAPI compliance testing tool. Validate that a client and server are compliant with an OpenAPI spec. Rewrite paths, inject headers, and even host a UI locally to test an OpenAPI implementation.	go	✅	✅	✅	github octocat
Xapi Platform - Xapi is an integrated platform that enables you to implement a streamlined API-first design strategy with standardized API artifacts and collaborative teams.	Saas	✅	❌	❌	
Gateways
API Gateways and related tools that have integrated support for OpenAPI.

Name	Language	v3.1	v3.0	v2.0	GitHub
Fusio - Open source API management platform	PHP	❌	✅	❌	github octocat
Kong Enterprise Edition - Highly customizable developer portal with developer onboarding, integrated with the Kong API Gateway	Lua	✅	✅	✅	
KrakenD API Gateway - KrakenD is a high-performance, stateless API Gateway, seamlessly integrated with OpenAPI. It facilitates automatic API documentation and provides the capability to import existing specifications for generating configuration and mock servers.	Golang	❌	✅	✅	
Kusk Gateway - Kusk-Gateway is an OpenAPI-driven API Gateway for Kubernetes. It empowers you to develop, validate, mock and deploy your APIs in a matter of minutes using both manual and automated GitOps/APIOps workflows.	Kubernetes	❌	✅	✅	github octocat
Serverless API Gateway - Serverless API Gateway is a serverless, open-source, and free API Gateway that is designed to be used with any HTTP source.	TypeScript	✅	✅	✅	github octocat
Traefik Hub - Traefik Hub is a Kubernetes-native API Management solution for publishing, securing, and managing APIs. Configuration is driven by Kubernetes CRDs, labels, and selectors for effective GitOps.	Go	❌	✅	✅	github octocat
wiretap - Wiretap is a feature packed OpenAPI compliance testing tool. Validate that a client and server are compliant with an OpenAPI spec. Rewrite paths, inject headers, and even host a UI locally to test an OpenAPI implementation.	go	✅	✅	✅	github octocat
Zuplo (OpenAPI-based gateway and documentation) - Zuplo is an API gateway designed for developers. Natively powered by OpenAPI (3.1 or 3.0), zuplo offers an OpenAPI design surface, API documentation and a serverless, programmable edge gateway that includes request validation, auth, rate-limiting and more.	Web / SaaS	✅	✅	❌	
Monitoring
Monitoring tools let you know what is going on in your API.

Name	Language	v3.1	v3.0	v2.0	GitHub
API Insights - API Insights is a web application and native Mac application that allows you get real time insights into your API using your OpenAPI specification. Think of it like a static analysis tool for your API, using your OpenAPI Specification file.		❌	✅	❌	github octocat
Apitally - Simple REST API monitoring tool that helps engineering and product teams understand their APIs. Tracks usage, errors, response times and more using middleware for Python and Node.js frameworks. Also offers uptime monitoring and logging of individual requests.	SaaS	✅	✅	✅	github octocat
Treblle - Treblle is a lightweight SDK that helps Engineering and Product teams build, ship, and maintain REST based APIs faster.		✅	✅	❌	
Sponsored by Zudoku - Open-source, OpenAPI powered, highly customizable API documentation.
Back to top
Copyright 2024 - APIs You Won't Hate